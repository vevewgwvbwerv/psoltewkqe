-- üß† SMART MOTOR COPIER - –£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º Anchored
-- –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–º–∞–µ—Ç Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏, –Ω–æ –Ω–µ –¥–∞–µ—Ç –∫–æ–ø–∏–∏ —É–ø–∞—Å—Ç—å

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

print("üß† === SMART MOTOR COPIER ===")
print("=" .. string.rep("=", 50))

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            break
        end
    end
    
    if copy then
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name == copyUUID then
                original = obj
                break
            end
        end
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏–π
local function analyzeAnchored(model, modelName)
    print("‚öì –ê–Ω–∞–ª–∏–∑ Anchored –≤ " .. modelName .. ":")
    
    local parts = getAllParts(model)
    local anchoredCount = 0
    local unanchoredCount = 0
    
    for _, part in ipairs(parts) do
        if part.Anchored then
            anchoredCount = anchoredCount + 1
        else
            unanchoredCount = unanchoredCount + 1
        end
    end
    
    print("  –í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π: " .. #parts)
    print("  Anchored: " .. anchoredCount)
    print("  Unanchored: " .. unanchoredCount)
    
    if anchoredCount > 0 then
        print("  ‚ö†Ô∏è Anchored —á–∞—Å—Ç–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç –¥–≤–∏–∂–µ–Ω–∏–µ!")
    else
        print("  ‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è")
    end
    
    return parts, anchoredCount, unanchoredCount
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å (–æ–±—ã—á–Ω–æ Torso –∏–ª–∏ HumanoidRootPart)
    local rootPart = nil
    local rootCandidates = {"Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        -- –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ –∫–æ—Ä–Ω–µ–≤—É—é
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é: " .. rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å: " .. rootPart.Name)
    end
    
    -- –°—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –æ—Å—Ç–∞–µ—Ç—Å—è Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true  -- –ö–æ—Ä–Ω–µ–≤–∞—è –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞—è–∫–æ—Ä–µ–Ω–Ω–æ–π
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–º–Ω—ã–º Anchored
local function startSmartLiveCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Å—Ç–µ–π
    local originalParts, origAnchored, origUnanchored = analyzeAnchored(original, "–û–†–ò–ì–ò–ù–ê–õ")
    local copyParts, copyAnchored, copyUnanchored = analyzeAnchored(copy, "–ö–û–ü–ò–Ø")
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–º–Ω—ã–π Anchored –¥–ª—è –∫–æ–ø–∏–∏
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –ü–æ–ª—É—á–∞–µ–º Motor6D
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª: " .. #originalMotors .. ", –ö–æ–ø–∏—è: " .. #copyMotors)
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
    wait(0.1)
    local _, newAnchored, newUnanchored = analyzeAnchored(copy, "–ö–û–ü–ò–Ø –ü–û–°–õ–ï –ù–ê–°–¢–†–û–ô–ö–ò")
    
    if newUnanchored == 0 then
        print("‚ùå –í—Å–µ —á–∞—Å—Ç–∏ –≤—Å–µ –µ—â–µ –∑–∞—è–∫–æ—Ä–µ–Ω—ã! –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
        return nil
    end
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—é –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        local copiedCount = 0
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                if copyMotorState(originalMotor, copyMotor) then
                    copiedCount = copiedCount + 1
                end
            end
        end
        
        -- –ö–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        if frameCount % 60 == 0 then
            print("üìä –ö–∞–¥—Ä " .. frameCount .. ": —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ " .. copiedCount .. " Motor6D")
        end
    end)
    
    print("‚úÖ –£–º–Ω–æ–µ –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è, –Ω–æ –Ω–µ –ø–∞–¥–∞—Ç—å")
    print("‚è∞ –ê–≤—Ç–æ—Å—Ç–æ–ø —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
    
    -- –ê–≤—Ç–æ—Å—Ç–æ–ø
    spawn(function()
        wait(30)
        isRunning = false
        print("‚è∞ –£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    end)
    
    return connection
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original or not copy then
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –£–±–µ–¥–∏—Å—å —á—Ç–æ –µ—Å—Ç—å –∫–æ–ø–∏—è —Å _SCALED_COPY")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    print("üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    analyzeAnchored(original, "–û–†–ò–ì–ò–ù–ê–õ")
    analyzeAnchored(copy, "–ö–û–ü–ò–Ø –î–û –ù–ê–°–¢–†–û–ô–ö–ò")
    print()
    
    print("üöÄ –ó–ê–ü–£–°–ö –£–ú–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:")
    local connection = startSmartLiveCopying(original, copy)
    
    if connection then
        print("üéâ –£–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!")
        print("üéÆ –¢–µ–ø–µ—Ä—å –ø–æ–¥–≤–∏–≥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
        print("üëÄ –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è, –Ω–æ –Ω–µ –ø–∞–¥–∞—Ç—å")
    else
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    end
    
    print("=" .. string.rep("=", 50))
end

-- –ó–∞–ø—É—Å–∫
main()
