-- üî• PET SCALER - –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û –î–õ–Ø IDLE –ê–ù–ò–ú–ê–¶–ò–ò
-- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π idle –∞–Ω–∏–º–∞—Ü–∏–∏ –ª—é–±–æ–π —Ü–µ–Ω–æ–π

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER - –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û ===")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 3.0,
    TWEEN_TIME = 3.0,
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out,
    EXTREME_CHECK_INTERVAL = 0.01 -- –ö–ê–ñ–î–´–ï 0.01 –°–ï–ö–£–ù–î–´!
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Motor6D
local function getMotor6Ds(model)
    local motors = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            local key = obj.Name
            if obj.Part0 then
                key = key .. "_" .. obj.Part0.Name
            end
            if obj.Part1 then
                key = key .. "_" .. obj.Part1.Name
            end
            motors[key] = obj
        end
    end
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_EXTREME_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        local newPosition = originalCFrame.Position + offset
        local newCFrame = CFrame.lookAt(newPosition, newPosition + originalCFrame.LookVector, Vector3.new(0, 1, 0))
        copy:SetPrimaryPartCFrame(newCFrame)
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- –§—É–Ω–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0,
        false,
        0
    )
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        local newSize = originalSize * scaleFactor
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleFactor) * (relativeCFrame - relativeCFrame.Position)
        local newCFrame = centerCFrame * scaledRelativeCFrame
        
        local tween = TweenService:Create(part, tweenInfo, {
            Size = newSize,
            CFrame = newCFrame
        })
        
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
local function startLiveMotorCopying(original, copy)
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    if next(originalMotors) == nil or next(copyMotors) == nil then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return nil
    end
    
    print("üé≠ –ó–∞–ø—É—Å–∫–∞—é –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D...")
    
    local function copyMotorState(originalMotor, copyMotor, scaleFactor)
        local originalTransform = originalMotor.Transform
        local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
        copyMotor.Transform = scaledTransform
        
        local originalC0 = originalMotor.C0
        local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
        copyMotor.C0 = scaledC0
        
        local originalC1 = originalMotor.C1
        local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
        copyMotor.C1 = scaledC1
    end
    
    local connection = RunService.Heartbeat:Connect(function()
        for key, originalMotor in pairs(originalMotors) do
            local copyMotor = copyMotors[key]
            if copyMotor and originalMotor.Parent and copyMotor.Parent then
                copyMotorState(originalMotor, copyMotor, CONFIG.SCALE_FACTOR)
            end
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∞–∫—Ç–∏–≤–Ω–æ!")
    return connection
end

-- üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –£–î–ï–†–ñ–ê–ù–ò–ï –í IDLE
local function startExtremeIdleForcing(petModel)
    print("üî• === –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ì–û –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û IDLE ===")
    
    local originalRoot = petModel:FindFirstChild("RootPart") or 
                        petModel:FindFirstChild("Torso") or 
                        petModel:FindFirstChild("HumanoidRootPart")
    
    local originalHumanoid = petModel:FindFirstChildOfClass("Humanoid")
    local originalAnimator = petModel:FindFirstChildOfClass("Animator")
    
    if not originalRoot or not originalHumanoid then
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞!")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º Animator –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not originalAnimator then
        originalAnimator = Instance.new("Animator")
        originalAnimator.Parent = originalHumanoid
        print("üé≠ –°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π Animator")
    end
    
    print("üéØ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ idle...")
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    local originalPosition = originalRoot.Position
    local originalOrientation = originalRoot.CFrame - originalRoot.Position
    
    -- üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ñ–î–´–ï 0.01 –°–ï–ö–£–ù–î–´
    local extremeConnection = RunService.Heartbeat:Connect(function()
        -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if originalHumanoid and originalHumanoid.Parent then
            originalHumanoid.WalkSpeed = 0
            originalHumanoid.JumpPower = 0
            -- –ù–ï –≤–∫–ª—é—á–∞–µ–º PlatformStand - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é!
        end
        
        -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if originalRoot and originalRoot.Parent then
            local currentPos = originalRoot.Position
            local distance = (currentPos - originalPosition).Magnitude
            
            if distance > 0.1 then -- –ï—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 0.1 —Å—Ç–∞–¥–∏–∏
                -- –ú–ì–ù–û–í–ï–ù–ù–û –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –º–µ—Å—Ç–æ
                originalRoot.CFrame = CFrame.new(originalPosition) * originalOrientation
                originalRoot.Velocity = Vector3.new(0, 0, 0)
                originalRoot.AngularVelocity = Vector3.new(0, 0, 0)
            end
        end
        
        -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Ö–æ–¥—å–±—ã
        if originalAnimator and originalAnimator.Parent then
            local tracks = originalAnimator:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                if track.IsPlaying then
                    local animName = track.Animation.Name:lower()
                    local animId = tostring(track.Animation.AnimationId):lower()
                    
                    -- –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ª—é–±—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                    if animName:find("walk") or animName:find("run") or animName:find("move") or
                       animId:find("walk") or animId:find("run") or animId:find("move") then
                        track:Stop()
                        track:Destroy()
                    end
                end
            end
        end
    end)
    
    print("üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ idle –ê–ö–¢–ò–í–ù–û!")
    print("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ", CONFIG.EXTREME_CHECK_INTERVAL, "—Å–µ–∫—É–Ω–¥—ã")
    
    return extremeConnection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    print("\nüîç === –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê ===")
    
    local petModel = nil
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") and obj ~= playerChar then
            local humanoid = obj:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local rootPart = obj:FindFirstChild("RootPart") or obj:FindFirstChild("Torso") or obj:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local distance = (rootPart.Position - playerPos).Magnitude
                    if distance <= CONFIG.SEARCH_RADIUS then
                        petModel = obj
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                        break
                    end
                end
            end
        end
    end
    
    if not petModel then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS)
        return
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    local petCopy = deepCopyModel(petModel)
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï ===")
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    wait(CONFIG.TWEEN_TIME + 1)
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    local copyParts = getAllParts(petCopy)
    for _, part in ipairs(copyParts) do
        if part.Name == "RootPart" or part.Name == "Torso" or part.Name == "HumanoidRootPart" then
            part.Anchored = true -- –ö–æ—Ä–µ–Ω—å –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        end
    end
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===")
    local copyConnection = startLiveMotorCopying(petModel, petCopy)
    
    -- üî• –ó–ê–ü–£–°–ö–ê–ï–ú –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –£–î–ï–†–ñ–ê–ù–ò–ï –í IDLE
    print("\nüî• === –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï IDLE ===")
    local extremeConnection = startExtremeIdleForcing(petModel)
    
    if extremeConnection then
        print("\nüéâ === –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        print("üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ idle –∞–∫—Ç–∏–≤–Ω–æ!")
        print("‚ö° –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 0.01 —Å–µ–∫—É–Ω–¥—ã!")
        print("üí° –ü–∏—Ç–æ–º–µ—Ü –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –Ω–∞ –º–µ—Å—Ç–µ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–π idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    else
        print("‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerExtremeGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerExtremeGUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 280, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 450)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 0, 0) -- –ö—Ä–∞—Å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 260, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô PetScaler"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚ö° –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ï –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô PetScaler"
            button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        end)
    end)
    
    print("üñ•Ô∏è PetScaler –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("üí° –ù–∞–∂–º–∏—Ç–µ –ö–†–ê–°–ù–£–Æ –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ idle!")
print("üî• –í–ù–ò–ú–ê–ù–ò–ï: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 0.01 —Å–µ–∫—É–Ω–¥—ã!")
print("‚ö° –≠—Ç–æ —Å–∞–º—ã–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ idle!")
