-- ‚öôÔ∏è MOTOR6D COPIER - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π Motor6D –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–π
-- –ê–Ω–∏–º–∞—Ü–∏–∏ rbxasset –∑–∞—â–∏—â–µ–Ω—ã, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D –º–æ–∂–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

print("‚öôÔ∏è === MOTOR6D COPIER ===")
print("=" .. string.rep("=", 40))

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            break
        end
    end
    
    if copy then
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name == copyUUID then
                original = obj
                break
            end
        end
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D –ø–æ –∏–º–µ–Ω–∞–º
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è Motor6D + –∏–º–µ–Ω–∞ Part0 –∏ Part1 –∫–∞–∫ –∫–ª—é—á
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–¥–Ω–æ–≥–æ Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    -- –ö–æ–ø–∏—Ä—É–µ–º Transform (–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    copyMotor.Transform = originalMotor.Transform
    
    -- –ö–æ–ø–∏—Ä—É–µ–º C0 –∏ C1 (–ø–æ–∑–∏—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    -- –ö–æ–ø–∏—Ä—É–µ–º CurrentAngle –∏ DesiredAngle –µ—Å–ª–∏ –µ—Å—Ç—å
    if originalMotor:FindFirstChild("CurrentAngle") then
        copyMotor.CurrentAngle = originalMotor.CurrentAngle
    end
    if originalMotor:FindFirstChild("DesiredAngle") then
        copyMotor.DesiredAngle = originalMotor.DesiredAngle
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Motor6D —Å–æ—Å—Ç–æ—è–Ω–∏–π
local function analyzeMotorStates(model, modelName)
    print("üîç –ê–Ω–∞–ª–∏–∑ Motor6D –≤ " .. modelName .. ":")
    
    local motors = getMotor6Ds(model)
    print("  –ù–∞–π–¥–µ–Ω–æ Motor6D: " .. #motors)
    
    for i, motor in ipairs(motors) do
        print("  [" .. i .. "] " .. motor.Name)
        if motor.Part0 then
            print("    Part0: " .. motor.Part0.Name)
        end
        if motor.Part1 then
            print("    Part1: " .. motor.Part1.Name)
        end
        print("    Transform: " .. tostring(motor.Transform))
        print("    C0: " .. tostring(motor.C0))
        print("    C1: " .. tostring(motor.C1))
        print()
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
local function copyMotorStatesOnce(original, copy)
    print("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π Motor6D (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ)...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª: " .. #originalMotors .. " Motor6D")
    print("  –ö–æ–ø–∏—è: " .. #copyMotors .. " Motor6D")
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local successCount = 0
    
    -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for key, originalMotor in pairs(originalMap) do
        local copyMotor = copyMap[key]
        if copyMotor then
            local success = copyMotorState(originalMotor, copyMotor)
            if success then
                successCount = successCount + 1
                print("  ‚úÖ " .. key)
            else
                print("  ‚ùå " .. key)
            end
        else
            print("  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ø–∏–∏: " .. key)
        end
    end
    
    print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: " .. successCount .. "/" .. #originalMotors)
    return successCount > 0
end

-- –§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è)
local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª–∏ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –û–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
    spawn(function()
        wait(30)
        isRunning = false
        print("‚è∞ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
    end)
    
    return connection
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original or not copy then
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Motor6D –≤ –æ–±–µ–∏—Ö –º–æ–¥–µ–ª—è—Ö
    print("üìä –ê–ù–ê–õ–ò–ó MOTOR6D:")
    analyzeMotorStates(original, "–û–†–ò–ì–ò–ù–ê–õ")
    analyzeMotorStates(copy, "–ö–û–ü–ò–Ø")
    
    -- –¢–µ—Å—Ç 1: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ –¢–ï–°–¢ 1: –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    local success = copyMotorStatesOnce(original, copy)
    
    if success then
        print("‚úÖ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        
        wait(2)
        
        -- –¢–µ—Å—Ç 2: –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        print()
        print("üß™ –¢–ï–°–¢ 2: –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (30 —Å–µ–∫—É–Ω–¥)")
        print("üí° –¢–µ–ø–µ—Ä—å –ø–æ–¥–≤–∏–≥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ - –∫–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å!")
        
        local connection = startLiveMotorCopying(original, copy)
        
    else
        print("‚ùå –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Motor6D")
    end
    
    print("=" .. string.rep("=", 40))
end

-- –ó–∞–ø—É—Å–∫
main()
