-- üîÑ ANIMATION COPYING TEST - –¢–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
-- –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π Animation –ø—ã—Ç–∞–µ–º—Å—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üîÑ === ANIMATION COPYING TEST ===")
print("=" .. string.rep("=", 40))

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            break
        end
    end
    
    if copy then
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name == copyUUID then
                original = obj
                break
            end
        end
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
local function getOriginalAnimation(original)
    print("üîç –ò—â—É –∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
    
    local animator = nil
    for _, obj in pairs(original:GetDescendants()) do
        if obj:IsA("Animator") then
            animator = obj
            break
        end
    end
    
    if not animator then
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return nil
    end
    
    local activeTracks = animator:GetPlayingAnimationTracks()
    print("üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #activeTracks)
    
    if #activeTracks == 0 then
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π!")
        return nil
    end
    
    -- –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    local track = activeTracks[1]
    if not track.Animation then
        print("‚ùå –£ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç Animation –æ–±—ä–µ–∫—Ç–∞!")
        return nil
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è:")
    print("  Name:", track.Name or "Unknown")
    print("  ID:", track.Animation.AnimationId)
    print("  Playing:", track.IsPlaying)
    print("  Speed:", track.Speed)
    print("  Weight:", track.WeightCurrent)
    print("  Looped:", track.Looped)
    
    return track
end

-- –ú–ï–¢–û–î 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Animation –æ–±—ä–µ–∫—Ç–∞
local function method1_CloneAnimation(originalTrack, copyAnimator)
    print("üîÑ –ú–ï–¢–û–î 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Animation –æ–±—ä–µ–∫—Ç–∞")
    
    local success, result = pcall(function()
        -- –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–∞–º Animation –æ–±—ä–µ–∫—Ç
        local clonedAnimation = originalTrack.Animation:Clone()
        print("‚úÖ Animation –æ–±—ä–µ–∫—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω")
        
        -- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        local newTrack = copyAnimator:LoadAnimation(clonedAnimation)
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Animator –∫–æ–ø–∏–∏")
        
        -- –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        newTrack.Looped = originalTrack.Looped
        newTrack.Priority = originalTrack.Priority
        
        -- –ó–∞–ø—É—Å–∫–∞–µ–º
        newTrack:Play()
        newTrack:AdjustSpeed(originalTrack.Speed)
        newTrack:AdjustWeight(originalTrack.WeightCurrent)
        
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        return newTrack
    end)
    
    if success then
        print("üéâ –ú–ï–¢–û–î 1 –£–°–ü–ï–®–ï–ù!")
        return result
    else
        print("‚ùå –ú–ï–¢–û–î 1 –ù–ï–£–î–ê–ß–ï–ù:", result)
        return nil
    end
end

-- –ú–ï–¢–û–î 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AnimationId
local function method2_CopyById(originalTrack, copyAnimator)
    print("üÜî –ú–ï–¢–û–î 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AnimationId")
    
    local success, result = pcall(function()
        local animation = Instance.new("Animation")
        animation.AnimationId = originalTrack.Animation.AnimationId
        
        local newTrack = copyAnimator:LoadAnimation(animation)
        newTrack.Looped = originalTrack.Looped
        newTrack.Priority = originalTrack.Priority
        
        newTrack:Play()
        newTrack:AdjustSpeed(originalTrack.Speed)
        newTrack:AdjustWeight(originalTrack.WeightCurrent)
        
        return newTrack
    end)
    
    if success then
        print("üéâ –ú–ï–¢–û–î 2 –£–°–ü–ï–®–ï–ù!")
        return result
    else
        print("‚ùå –ú–ï–¢–û–î 2 –ù–ï–£–î–ê–ß–ï–ù:", result)
        return nil
    end
end

-- –ú–ï–¢–û–î 3: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ Animation –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
local function method3_FindInModel(original, copyAnimator)
    print("üîç –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ Animation –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–æ–¥–µ–ª–∏")
    
    local animations = {}
    for _, obj in pairs(original:GetDescendants()) do
        if obj:IsA("Animation") then
            table.insert(animations, obj)
            print("  –ù–∞–π–¥–µ–Ω Animation:", obj.Name, obj.AnimationId)
        end
    end
    
    if #animations == 0 then
        print("‚ùå Animation –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏")
        return nil
    end
    
    -- –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    local success, result = pcall(function()
        local clonedAnim = animations[1]:Clone()
        local newTrack = copyAnimator:LoadAnimation(clonedAnim)
        newTrack.Looped = true
        newTrack:Play()
        return newTrack
    end)
    
    if success then
        print("üéâ –ú–ï–¢–û–î 3 –£–°–ü–ï–®–ï–ù!")
        return result
    else
        print("‚ùå –ú–ï–¢–û–î 3 –ù–ï–£–î–ê–ß–ï–ù:", result)
        return nil
    end
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
local function checkResult(copy)
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    local copyAnimator = nil
    for _, obj in pairs(copy:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
            break
        end
    end
    
    if not copyAnimator then
        print("‚ùå Animator –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    wait(1) -- –î–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    local activeTracks = copyAnimator:GetPlayingAnimationTracks()
    print("üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π —É –∫–æ–ø–∏–∏:", #activeTracks)
    
    local hasPlayingAnimation = false
    for i, track in ipairs(activeTracks) do
        print("  [" .. i .. "] " .. (track.Name or "Unknown"))
        print("    Playing:", track.IsPlaying)
        if track.IsPlaying then
            hasPlayingAnimation = true
        end
    end
    
    return hasPlayingAnimation
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original or not copy then
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    -- –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    local originalTrack = getOriginalAnimation(original)
    if not originalTrack then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        return
    end
    
    -- –ü–æ–ª—É—á–∞–µ–º Animator –∫–æ–ø–∏–∏
    local copyAnimator = nil
    for _, obj in pairs(copy:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
            break
        end
    end
    
    if not copyAnimator then
        print("‚ùå Animator –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–ø–∏–∏
    local currentTracks = copyAnimator:GetPlayingAnimationTracks()
    for _, track in ipairs(currentTracks) do
        track:Stop()
    end
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ " .. #currentTracks .. " –∞–Ω–∏–º–∞—Ü–∏–π –∫–æ–ø–∏–∏")
    print()
    
    -- –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    local success = false
    
    -- –ú–ï–¢–û–î 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    local result1 = method1_CloneAnimation(originalTrack, copyAnimator)
    if result1 then
        success = checkResult(copy)
        if success then
            print("üéâ –£–°–ü–ï–•! –ú–µ—Ç–æ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        end
    end
    
    print()
    
    -- –ú–ï–¢–û–î 2: –ü–æ ID
    local result2 = method2_CopyById(originalTrack, copyAnimator)
    if result2 then
        success = checkResult(copy)
        if success then
            print("üéâ –£–°–ü–ï–•! –ú–µ—Ç–æ–¥ –ø–æ ID —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        end
    end
    
    print()
    
    -- –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ –≤ –º–æ–¥–µ–ª–∏
    local result3 = method3_FindInModel(original, copyAnimator)
    if result3 then
        success = checkResult(copy)
        if success then
            print("üéâ –£–°–ü–ï–•! –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        end
    end
    
    print()
    print("‚ùå –í–°–ï –ú–ï–¢–û–î–´ –ù–ï–£–î–ê–ß–ù–´!")
    print("üí° –í–æ–∑–º–æ–∂–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("=" .. string.rep("=", 40))
end

-- –ó–∞–ø—É—Å–∫
main()
