--[[
    CONSOLE ANIMATION RECORDER
    –ë–µ–∑ GUI - —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞
]]

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local isRecording = false
local animationData = {}
local currentRecording = nil
local recordingConnection = nil

print("üé¨ Console Animation Recorder –∑–∞–≥—Ä—É–∂–µ–Ω!")
print("üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–Ω–µ—Ç –∑–∞–ø–∏—Å—å –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–∏—Ç–æ–º–µ—Ü –∏–∑ —è–π—Ü–∞")

-- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–∏
local function recordModelState(model, frameTime)
    local state = {
        time = frameTime,
        parts = {},
        modelExists = true
    }
    
    if not model or not model.Parent then
        state.modelExists = false
        return state
    end
    
    local success, error = pcall(function()
        for _, part in ipairs(model:GetDescendants()) do
            if part and part:IsA("BasePart") and part.Parent then
                local partName = part.Name or "UnknownPart"
                state.parts[partName] = {
                    size = part.Size or Vector3.new(1,1,1),
                    position = part.Position or Vector3.new(0,0,0),
                    transparency = part.Transparency or 0
                }
            end
        end
    end)
    
    if not success then
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–∞–¥—Ä–∞: " .. tostring(error))
    end
    
    return state
end

-- –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
local function startRecording(model)
    if isRecording then return end
    
    print("üé¨ –ù–ê–ß–ò–ù–ê–Æ –ó–ê–ü–ò–°–¨: " .. (model.Name or "Unknown"))
    
    isRecording = true
    currentRecording = {
        startTime = tick(),
        frames = {},
        model = model,
        modelName = model.Name or "Unknown"
    }
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    local initialState = recordModelState(model, 0)
    table.insert(currentRecording.frames, initialState)
    print("üìä –ó–∞–ø–∏—Å–∞–ª –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    recordingConnection = RunService.Heartbeat:Connect(function()
        if not isRecording then return end
        
        local frameTime = tick() - currentRecording.startTime
        local state = recordModelState(model, frameTime)
        table.insert(currentRecording.frames, state)
        
        -- –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
        if #currentRecording.frames % 30 == 0 then
            print("üî¥ –ó–ê–ü–ò–°–¨: " .. string.format("%.1fs (%d –∫–∞–¥—Ä–æ–≤)", frameTime, #currentRecording.frames))
        end
        
        -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –∏—Å—á–µ–∑–ª–∞
        if not state.modelExists then
            print("üí• –ú–æ–¥–µ–ª—å –∏—Å—á–µ–∑–ª–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–ø–∏—Å—å")
            stopRecording()
        end
        
        -- –ê–≤—Ç–æ—Å—Ç–æ–ø —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        if frameTime > 10 then
            print("‚è∞ –ê–≤—Ç–æ—Å—Ç–æ–ø —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥")
            stopRecording()
        end
    end)
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
function stopRecording()
    if not isRecording then return end
    
    isRecording = false
    
    if recordingConnection then
        recordingConnection:Disconnect()
        recordingConnection = nil
    end
    
    local duration = tick() - currentRecording.startTime
    
    print("‚úÖ –ó–ê–ü–ò–°–¨ –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " .. string.format("%.2f", duration) .. " —Å–µ–∫—É–Ω–¥")
    print("üéûÔ∏è –ö–∞–¥—Ä–æ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ: " .. #currentRecording.frames)
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    animationData[currentRecording.modelName] = currentRecording
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    analyzeAnimation(currentRecording)
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
local function analyzeAnimation(recording)
    print("\n=== üìä –ê–ù–ê–õ–ò–ó –ê–ù–ò–ú–ê–¶–ò–ò ===")
    
    if #recording.frames < 2 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    end
    
    local firstFrame = recording.frames[1]
    local lastFrame = recording.frames[#recording.frames]
    
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é " .. #recording.frames .. " –∫–∞–¥—Ä–æ–≤...")
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    for partName, firstState in pairs(firstFrame.parts) do
        if lastFrame.parts[partName] then
            local startSize = firstState.size
            local endSize = lastFrame.parts[partName].size
            
            if startSize and endSize then
                local sizeChange = endSize.Magnitude / startSize.Magnitude
                
                if sizeChange > 1.2 then
                    print("üìà " .. partName .. " —É–≤–µ–ª–∏—á–∏–ª—Å—è –≤ " .. string.format("%.2f", sizeChange) .. " —Ä–∞–∑")
                    print("   –†–∞–∑–º–µ—Ä: " .. tostring(startSize) .. " ‚Üí " .. tostring(endSize))
                elseif sizeChange < 0.8 then
                    print("üìâ " .. partName .. " —É–º–µ–Ω—å—à–∏–ª—Å—è –≤ " .. string.format("%.2f", 1/sizeChange) .. " —Ä–∞–∑")
                end
            end
            
            local startTrans = firstState.transparency or 0
            local endTrans = lastFrame.parts[partName].transparency or 0
            
            if math.abs(endTrans - startTrans) > 0.1 then
                print("üí´ " .. partName .. " –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: " .. string.format("%.2f", startTrans) .. " ‚Üí " .. string.format("%.2f", endTrans))
            end
        end
    end
    
    print("üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("üìã –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ animationData['" .. recording.modelName .. "']")
    print("\nüöÄ –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏!")
end

-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ Visuals
local visuals = Workspace:FindFirstChild("Visuals")
if visuals then
    print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ Visuals")
    
    visuals.ChildAdded:Connect(function(child)
        if child:IsA("Model") and not isRecording then
            print("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: " .. (child.Name or "Unknown"))
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü (–Ω–µ —ç—Ñ—Ñ–µ–∫—Ç)
            if child.Name and not child.Name:find("Egg") and not child.Name:find("Explode") and not child.Name:find("Poof") then
                wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                startRecording(child)
            else
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —ç—Ñ—Ñ–µ–∫—Ç: " .. (child.Name or "Unknown"))
            end
        end
    end)
else
    print("‚ùå –ü–∞–ø–∫–∞ Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
end

print("üé¨ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏! –û—Ç–∫—Ä–æ–π —è–π—Ü–æ...")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function getAnimationData(petName)
    return animationData[petName or "Dog"]
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
function listAnimations()
    print("üìã –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏:")
    for name, data in pairs(animationData) do
        print("  - " .. name .. " (" .. #data.frames .. " –∫–∞–¥—Ä–æ–≤, " .. string.format("%.2f", data.frames[#data.frames].time) .. "—Å)")
    end
end
