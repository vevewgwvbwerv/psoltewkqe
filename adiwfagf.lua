-- üéØ PRECISE IDLE RESTORER - –¢–æ—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Idle –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
-- –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞: –∫–æ–ø–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ Idle –∞–Ω–∏–º–∞—Ü–∏—é (rbxassetid://1073293904134556)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üéØ === PRECISE IDLE RESTORER ===")
print("=" .. string.rep("=", 40))

-- –¢–æ—á–Ω—ã–π ID Idle –∞–Ω–∏–º–∞—Ü–∏–∏ (–∏–∑ –∞–Ω–∞–ª–∏–∑–∞)
local IDLE_ANIMATION_ID = "rbxassetid://1073293904134556"

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    -- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–ø–∏—é
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            print("üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ø–∏—è:", obj.Name)
            break
        end
    end
    
    if not copy then
        print("‚ùå –ö–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return nil, nil
    end
    
    -- –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å —Ç–µ–º –∂–µ UUID
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == copyUUID then
            original = obj
            print("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª:", obj.Name)
            break
        end
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –µ—Å—Ç—å Idle –∞–Ω–∏–º–∞—Ü–∏—è
local function verifyOriginalHasIdle(original)
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ Idle –∞–Ω–∏–º–∞—Ü–∏–∏ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
    
    local animator = nil
    for _, obj in pairs(original:GetDescendants()) do
        if obj:IsA("Animator") then
            animator = obj
            break
        end
    end
    
    if not animator then
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        return false
    end
    
    local activeTracks = animator:GetPlayingAnimationTracks()
    print("üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:", #activeTracks)
    
    local hasIdle = false
    for _, track in ipairs(activeTracks) do
        if track.Animation and track.Animation.AnimationId == IDLE_ANIMATION_ID then
            hasIdle = true
            print("‚úÖ Idle –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
            print("  Playing:", track.IsPlaying)
            print("  Speed:", track.Speed)
            print("  Weight:", track.WeightCurrent)
            break
        end
    end
    
    if not hasIdle then
        print("‚ö†Ô∏è Idle –∞–Ω–∏–º–∞—Ü–∏—è –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º–µ—Ü —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ")
        
        -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ
        for i, track in ipairs(activeTracks) do
            if track.Animation then
                print("  [" .. i .. "] " .. (track.Name or "Unknown") .. " - " .. track.Animation.AnimationId)
            end
        end
    end
    
    return hasIdle
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Idle –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
local function startIdleOnCopy(copy)
    print("üé¨ –ó–∞–ø—É—Å–∫–∞—é Idle –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–æ–ø–∏–∏...")
    
    local copyAnimator = nil
    for _, obj in pairs(copy:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
            break
        end
    end
    
    if not copyAnimator then
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ø–∏–∏!")
        return false
    end
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
    local currentTracks = copyAnimator:GetPlayingAnimationTracks()
    print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é " .. #currentTracks .. " —Ç–µ–∫—É—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π –Ω–∞ –∫–æ–ø–∏–∏")
    
    for _, track in ipairs(currentTracks) do
        track:Stop()
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Idle –∞–Ω–∏–º–∞—Ü–∏—é
    local success, result = pcall(function()
        local animation = Instance.new("Animation")
        animation.AnimationId = IDLE_ANIMATION_ID
        
        local idleTrack = copyAnimator:LoadAnimation(animation)
        idleTrack.Looped = true
        idleTrack.Priority = Enum.AnimationPriority.Action
        
        idleTrack:Play()
        idleTrack:AdjustSpeed(1)
        idleTrack:AdjustWeight(1)
        
        print("‚úÖ Idle –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –∫–æ–ø–∏–∏!")
        print("  ID:", IDLE_ANIMATION_ID)
        print("  Looped: true")
        print("  Speed: 1")
        print("  Weight: 1")
        
        return idleTrack
    end)
    
    if success then
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∏–º–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–∞–µ—Ç
        wait(0.5)
        local newTracks = copyAnimator:GetPlayingAnimationTracks()
        local isPlaying = false
        
        for _, track in ipairs(newTracks) do
            if track.Animation and track.Animation.AnimationId == IDLE_ANIMATION_ID and track.IsPlaying then
                isPlaying = true
                break
            end
        end
        
        if isPlaying then
            print("üéâ –£–°–ü–ï–•! Idle –∞–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –∫–æ–ø–∏–∏!")
            return true
        else
            print("‚ùå –ê–Ω–∏–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
            return false
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏:", result)
        return false
    end
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
local function verifyResult(copy)
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    local copyAnimator = nil
    for _, obj in pairs(copy:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
            break
        end
    end
    
    if not copyAnimator then
        return false
    end
    
    local activeTracks = copyAnimator:GetPlayingAnimationTracks()
    print("üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π —É –∫–æ–ø–∏–∏:", #activeTracks)
    
    for i, track in ipairs(activeTracks) do
        if track.Animation then
            print("  [" .. i .. "] " .. (track.Name or "Unknown"))
            print("    ID: " .. track.Animation.AnimationId)
            print("    Playing: " .. tostring(track.IsPlaying))
            print("    Speed: " .. track.Speed)
            
            if track.Animation.AnimationId == IDLE_ANIMATION_ID and track.IsPlaying then
                print("‚úÖ Idle –∞–Ω–∏–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return true
            end
        end
    end
    
    print("‚ùå Idle –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç")
    return false
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original or not copy then
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏!")
        print("üí° –£–±–µ–¥–∏—Å—å —á—Ç–æ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—è —Å _SCALED_COPY")
        return
    end
    
    print("üéØ –ú–æ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –µ—Å—Ç—å Idle (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):")
    verifyOriginalHasIdle(original)
    print()
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º Idle –Ω–∞ –∫–æ–ø–∏–∏
    print("üé¨ –ó–∞–ø—É—Å–∫ Idle –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏:")
    local success = startIdleOnCopy(copy)
    
    if success then
        print()
        print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:")
        local verified = verifyResult(copy)
        
        if verified then
            print("üéâ –í–°–ï –ì–û–¢–û–í–û! –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            print("üé≠ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Idle (—Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ)")
        else
            print("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        end
    else
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Idle –∞–Ω–∏–º–∞—Ü–∏—é")
    end
    
    print("=" .. string.rep("=", 40))
end

-- –ó–∞–ø—É—Å–∫
main()
