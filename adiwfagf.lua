-- üîç PET MODEL ORIGIN TRACKER
-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –û–¢–ö–£–î–ê –±–µ—Ä–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ (dog, bunny, golden lab) –¥–ª—è —è–π—Ü–∞
-- –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å–ø–∞–º–æ–º, —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
local CONFIG = {
    SEARCH_RADIUS = 200,
    MONITOR_DURATION = 30,
    PET_NAMES = {"dog", "bunny", "golden lab", "cat", "rabbit", "golden", "lab"}
}

-- üñ•Ô∏è –°–ò–°–¢–ï–ú–ê –û–¢–î–ï–õ–¨–ù–û–ô –ö–û–ù–°–û–õ–ò
local ConsoleGUI = nil
local ConsoleFrame = nil
local ConsoleScrollFrame = nil
local ConsoleTextLabel = nil
local ConsoleLines = {}
local MaxConsoleLines = 50

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
local function createConsole()
    if ConsoleGUI then
        ConsoleGUI:Destroy()
    end
    
    ConsoleGUI = Instance.new("ScreenGui")
    ConsoleGUI.Name = "PetOriginTrackerConsole"
    ConsoleGUI.Parent = player:WaitForChild("PlayerGui")
    
    -- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –∫–æ–Ω—Å–æ–ª–∏
    ConsoleFrame = Instance.new("Frame")
    ConsoleFrame.Size = UDim2.new(0, 600, 0, 400)
    ConsoleFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    ConsoleFrame.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
    ConsoleFrame.BorderSizePixel = 2
    ConsoleFrame.BorderColor3 = Color3.fromRGB(0, 255, 100)
    ConsoleFrame.Parent = ConsoleGUI
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = ConsoleFrame
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "üîç PET MODEL ORIGIN TRACKER - –ö–û–ù–°–û–õ–¨"
    titleLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = ConsoleFrame
    
    -- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 150, 0, 30)
    startButton.Position = UDim2.new(0, 10, 0, 45)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    startButton.Text = "üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨"
    startButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.SourceSansBold
    startButton.Parent = ConsoleFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 5)
    buttonCorner.Parent = startButton
    
    -- –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
    local clearButton = Instance.new("TextButton")
    clearButton.Size = UDim2.new(0, 100, 0, 30)
    clearButton.Position = UDim2.new(0, 170, 0, 45)
    clearButton.BackgroundColor3 = Color3.fromRGB(200, 100, 0)
    clearButton.Text = "üóëÔ∏è –û–ß–ò–°–¢–ò–¢–¨"
    clearButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    clearButton.TextScaled = true
    clearButton.Font = Enum.Font.SourceSansBold
    clearButton.Parent = ConsoleFrame
    
    local clearCorner = Instance.new("UICorner")
    clearCorner.CornerRadius = UDim.new(0, 5)
    clearCorner.Parent = clearButton
    
    -- –°–∫—Ä–æ–ª–ª —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    ConsoleScrollFrame = Instance.new("ScrollingFrame")
    ConsoleScrollFrame.Size = UDim2.new(1, -20, 1, -90)
    ConsoleScrollFrame.Position = UDim2.new(0, 10, 0, 80)
    ConsoleScrollFrame.BackgroundColor3 = Color3.fromRGB(5, 5, 10)
    ConsoleScrollFrame.BorderSizePixel = 1
    ConsoleScrollFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)
    ConsoleScrollFrame.ScrollBarThickness = 10
    ConsoleScrollFrame.Parent = ConsoleFrame
    
    local scrollCorner = Instance.new("UICorner")
    scrollCorner.CornerRadius = UDim.new(0, 5)
    scrollCorner.Parent = ConsoleScrollFrame
    
    -- –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–µ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    ConsoleTextLabel = Instance.new("TextLabel")
    ConsoleTextLabel.Size = UDim2.new(1, -10, 1, 0)
    ConsoleTextLabel.Position = UDim2.new(0, 5, 0, 0)
    ConsoleTextLabel.BackgroundTransparency = 1
    ConsoleTextLabel.Text = "–ö–æ–Ω—Å–æ–ª—å –≥–æ—Ç–æ–≤–∞. –ù–∞–∂–º–∏—Ç–µ –ó–ê–ü–£–°–¢–ò–¢–¨ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
    ConsoleTextLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    ConsoleTextLabel.TextSize = 12
    ConsoleTextLabel.Font = Enum.Font.SourceSans
    ConsoleTextLabel.TextXAlignment = Enum.TextXAlignment.Left
    ConsoleTextLabel.TextYAlignment = Enum.TextYAlignment.Top
    ConsoleTextLabel.TextWrapped = true
    ConsoleTextLabel.Parent = ConsoleScrollFrame
    
    return startButton, clearButton
end

-- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
local function addConsoleLog(level, message, data)
    local timestamp = os.date("%H:%M:%S")
    local prefixes = {
        ORIGIN = "üîç", PET = "üêæ", CREATION = "‚ö°", PARENT = "üìÅ",
        SUCCESS = "‚úÖ", WARNING = "‚ö†Ô∏è", ERROR = "‚ùå", INFO = "‚ÑπÔ∏è"
    }
    
    local logLine = string.format("[%s] %s %s", timestamp, prefixes[level] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n    %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if #ConsoleLines > MaxConsoleLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Å–æ–ª–∏
    if ConsoleTextLabel then
        ConsoleTextLabel.Text = table.concat(ConsoleLines, "\n")
        
        -- –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
        spawn(function()
            wait(0.1)
            ConsoleScrollFrame.CanvasPosition = Vector2.new(0, ConsoleTextLabel.TextBounds.Y)
        end)
    end
end

-- üîç –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê EGGEXPLODE
local function checkForEggExplode()
    -- –ò—â–µ–º –≤ ReplicatedStorage
    for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
        if obj.Name == "EggExplode" and obj:IsA("Model") then
            return true, obj, "ReplicatedStorage"
        end
    end
    
    -- –ò—â–µ–º –≤ Workspace
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj.Name == "EggExplode" and obj:IsA("Model") then
            return true, obj, "Workspace"
        end
    end
    
    return false, nil, nil
end

-- üêæ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ú–û–î–ï–õ–ò –ü–ò–¢–û–ú–¶–ê
local function isPetModel(model)
    if not model:IsA("Model") then return false end
    if model.Name == "EggExplode" then return false end
    if model.Name:find("%[") and model.Name:find("KG") and model.Name:find("Age") then return false end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
    local modelNameLower = model.Name:lower()
    for _, petName in pairs(CONFIG.PET_NAMES) do
        if modelNameLower:find(petName) then
            return true
        end
    end
    
    return false
end

-- üìÅ –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ü–†–û–ò–°–•–û–ñ–î–ï–ù–ò–Ø –ú–û–î–ï–õ–ò
local function analyzeModelOrigin(model)
    local originData = {
        name = model.Name,
        className = model.ClassName,
        parent = model.Parent and model.Parent.Name or "nil",
        parentClass = model.Parent and model.Parent.ClassName or "nil"
    }
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π
    local parentChain = {}
    local currentParent = model.Parent
    local depth = 0
    
    while currentParent and depth < 10 do
        table.insert(parentChain, currentParent.Name .. " (" .. currentParent.ClassName .. ")")
        currentParent = currentParent.Parent
        depth = depth + 1
    end
    
    originData.parentChain = table.concat(parentChain, " ‚Üí ")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –≤ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö
    local scripts = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
            table.insert(scripts, obj.Name .. " (" .. obj.ClassName .. ")")
        end
    end
    
    if model.Parent then
        for _, obj in pairs(model.Parent:GetDescendants()) do
            if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
                table.insert(scripts, "[Parent] " .. obj.Name .. " (" .. obj.ClassName .. ")")
            end
        end
    end
    
    originData.scripts = #scripts > 0 and table.concat(scripts, ", ") or "–ù–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤"
    
    return originData
end

-- üöÄ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø
local function startOriginTracking()
    addConsoleLog("INFO", "üöÄ –ó–ê–ü–£–°–ö –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–ò–°–•–û–ñ–î–ï–ù–ò–Ø –ú–û–î–ï–õ–ï–ô –ü–ò–¢–û–ú–¶–ï–í")
    addConsoleLog("INFO", "üéØ –¶–µ–ª—å: dog, bunny, golden lab –∏ –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è")
    
    local eggExplodeDetected = false
    local trackingStartTime = 0
    local processedModels = {}
    local foundOrigins = {}
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        -- –§–∞–∑–∞ 1: –ü–æ–∏—Å–∫ EggExplode
        if not eggExplodeDetected then
            local found, eggObj, location = checkForEggExplode()
            if found then
                eggExplodeDetected = true
                trackingStartTime = tick()
                
                addConsoleLog("SUCCESS", "‚úÖ EggExplode –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ " .. location)
                addConsoleLog("ORIGIN", "üîç –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤...")
            end
        else
            -- –§–∞–∑–∞ 2: –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤ –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            local elapsed = tick() - trackingStartTime
            
            if elapsed > CONFIG.MONITOR_DURATION then
                addConsoleLog("INFO", "‚è∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
                connection:Disconnect()
                
                if #foundOrigins > 0 then
                    addConsoleLog("SUCCESS", "‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –ü–ò–¢–û–ú–¶–ï–í:")
                    for i, origin in pairs(foundOrigins) do
                        addConsoleLog("PET", string.format("üêæ –ü–∏—Ç–æ–º–µ—Ü %d: %s", i, origin.name), origin)
                    end
                else
                    addConsoleLog("WARNING", "‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                end
                return
            end
            
            -- –°–∫–∞–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–µ–≤
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") and obj ~= player.Character and not processedModels[obj] then
                    processedModels[obj] = true
                    
                    if isPetModel(obj) then
                        addConsoleLog("PET", "üêæ –ù–ê–ô–î–ï–ù –ü–ò–¢–û–ú–ï–¶: " .. obj.Name)
                        
                        -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
                        local originData = analyzeModelOrigin(obj)
                        table.insert(foundOrigins, originData)
                        
                        addConsoleLog("ORIGIN", "üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–°–•–û–ñ–î–ï–ù–ò–Ø:", originData)
                        
                        -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
                        spawn(function()
                            local startTime = tick()
                            local petName = obj.Name
                            
                            while obj and obj.Parent do
                                wait(0.5)
                            end
                            
                            local lifetime = tick() - startTime
                            addConsoleLog("INFO", string.format("‚è±Ô∏è %s –∏—Å—á–µ–∑ —á–µ—Ä–µ–∑ %.2f —Å–µ–∫", petName, lifetime))
                        end)
                    end
                end
            end
        end
    end)
    
    addConsoleLog("INFO", "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
end

-- üñ•Ô∏è –°–û–ó–î–ê–ù–ò–ï GUI –ò –ó–ê–ü–£–°–ö
local function initializeTracker()
    local startButton, clearButton = createConsole()
    
    startButton.MouseButton1Click:Connect(function()
        startButton.Text = "‚è≥ –ê–ö–¢–ò–í–ï–ù..."
        startButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        startOriginTracking()
    end)
    
    clearButton.MouseButton1Click:Connect(function()
        ConsoleLines = {}
        if ConsoleTextLabel then
            ConsoleTextLabel.Text = "–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é."
        end
    end)
    
    addConsoleLog("SUCCESS", "‚úÖ PET MODEL ORIGIN TRACKER –ì–û–¢–û–í!")
    addConsoleLog("INFO", "üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –û–¢–ö–£–î–ê –±–µ—Ä–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è —è–π—Ü–∞")
    addConsoleLog("INFO", "üéØ –ù–∞–∂–º–∏—Ç–µ –ó–ê–ü–£–°–¢–ò–¢–¨ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
end

-- üöÄ –ó–ê–ü–£–°–ö
initializeTracker()
