-- üß† SMART ANIMATION SELECTOR - –£–º–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏–∏
-- –ù–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç idle/walk –∞–Ω–∏–º–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π (–∫–æ–ø–∞–Ω–∏–µ/–¥—Ä.)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üß† === SMART ANIMATION SELECTOR ===")
print("=" .. string.rep("=", 50))

-- –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
local PREFERRED_ANIMATIONS = {
    "idle", "walk", "stand", "standing", "default"
}

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            break
        end
    end
    
    if copy then
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name == copyUUID then
                original = obj
                break
            end
        end
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
local function analyzeAllAnimations(model)
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local animator = nil
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Animator") then
            animator = obj
            break
        end
    end
    
    if not animator then
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return {}
    end
    
    -- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
    local allAnimations = {}
    local activeTracks = animator:GetPlayingAnimationTracks()
    
    print("üìπ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #activeTracks)
    
    for i, track in ipairs(activeTracks) do
        if track.Animation then
            local animInfo = {
                id = track.Animation.AnimationId,
                name = track.Name or "Unknown",
                isPlaying = track.IsPlaying,
                speed = track.Speed,
                weight = track.WeightCurrent,
                looped = track.Looped,
                priority = track.Priority,
                track = track
            }
            
            table.insert(allAnimations, animInfo)
            
            print("  [" .. i .. "] " .. animInfo.name)
            print("    ID: " .. animInfo.id)
            print("    Playing: " .. tostring(animInfo.isPlaying))
            print("    Speed: " .. animInfo.speed)
            print("    Priority: " .. animInfo.priority.Name)
            print()
        end
    end
    
    return allAnimations
end

-- –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏–∏
local function selectBestAnimation(animations)
    print("üéØ –í—ã–±–∏—Ä–∞—é –ª—É—á—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –∫–æ–ø–∏–∏...")
    
    if #animations == 0 then
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π!")
        return nil
    end
    
    -- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, preferred in ipairs(PREFERRED_ANIMATIONS) do
        for _, anim in ipairs(animations) do
            if string.lower(anim.name):find(preferred) or string.lower(anim.id):find(preferred) then
                print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è:", anim.name, "(" .. preferred .. ")")
                return anim
            end
        end
    end
    
    -- –ï—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—É—é
    for _, anim in ipairs(animations) do
        if anim.looped and anim.isPlaying then
            print("‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è:", anim.name)
            return anim
        end
    end
    
    -- –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é
    for _, anim in ipairs(animations) do
        if anim.isPlaying then
            print("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è:", anim.name)
            return anim
        end
    end
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é!")
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
local function startAnimationOnCopy(copyModel, selectedAnimation)
    print("üé¨ –ó–∞–ø—É—Å–∫–∞—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–æ–ø–∏–∏...")
    
    local copyAnimator = nil
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
            break
        end
    end
    
    if not copyAnimator then
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ø–∏–∏!")
        return false
    end
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
    local currentTracks = copyAnimator:GetPlayingAnimationTracks()
    for _, track in ipairs(currentTracks) do
        track:Stop()
    end
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ " .. #currentTracks .. " —Ç–µ–∫—É—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π –Ω–∞ –∫–æ–ø–∏–∏")
    
    -- –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    local success, result = pcall(function()
        local animation = Instance.new("Animation")
        animation.AnimationId = selectedAnimation.id
        
        local newTrack = copyAnimator:LoadAnimation(animation)
        newTrack.Looped = selectedAnimation.looped
        newTrack.Priority = selectedAnimation.priority
        
        newTrack:Play()
        newTrack:AdjustSpeed(selectedAnimation.speed)
        newTrack:AdjustWeight(selectedAnimation.weight)
        
        return newTrack
    end)
    
    if success then
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –∫–æ–ø–∏–∏!")
        print("  ID:", selectedAnimation.id)
        print("  –ò–º—è:", selectedAnimation.name)
        return true
    else
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏:", result)
        return false
    end
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    if not copy then
        print("‚ùå –ö–æ–ø–∏—è –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ø–∏—é —á–µ—Ä–µ–∑ PetScaler")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    local animations = analyzeAllAnimations(original)
    
    if #animations == 0 then
        print("‚ùå –£ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return
    end
    
    -- –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    local bestAnimation = selectBestAnimation(animations)
    
    if not bestAnimation then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é!")
        return
    end
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –∫–æ–ø–∏–∏
    local success = startAnimationOnCopy(copy, bestAnimation)
    
    if success then
        print("üéâ –£–°–ü–ï–•! –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –∫–æ–ø–∏–∏!")
        print("üé≠ –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    else
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–æ–ø–∏–∏")
    end
    
    print("=" .. string.rep("=", 50))
end

-- –ó–∞–ø—É—Å–∫
main()
