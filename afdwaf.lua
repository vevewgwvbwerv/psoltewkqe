-- ü•ö EGG PET REPLACER - –ó–∞–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞ –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
-- –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ PetScaler_v2, –Ω–æ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å –∑–∞–º–µ–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("ü•ö === EGG PET REPLACER - –ó–ê–ü–£–©–ï–ù ===")
print("=" .. string.rep("=", 50))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 100,
    WAIT_TIMEOUT = 30, -- 30 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
    TARGET_PETS = {"BUNNY", "DOG", "GOLDEN LAB"} -- –¶–µ–ª–µ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã –∏–∑ —è–π—Ü–∞
}

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã
local isWaiting = false
local scannedPet = nil
local waitConnection = nil

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local function getPlayerPosition()
    local playerChar = player.Character
    if not playerChar then return nil end
    
    local hrp = playerChar:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    
    return hrp.Position
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó PETSCALER_V2 (–ë–ï–ó –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø) ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–∏–∑ PetScaler_v2)
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏ (–∏–∑ PetScaler_v2)
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏ (–∏–∑ PetScaler_v2)
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D (–∏–∑ PetScaler_v2)
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D (–∏–∑ PetScaler_v2)
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ PetScaler_v2)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ê ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ PetScaler_v2)
local function scanNearbyPet()
    local playerPos = getPlayerPosition()
    if not playerPos then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞!")
        return nil
    end
    
    print("üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º...")
    print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
    print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("  ‚úÖ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", math.floor(distance))
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS)
        return nil
    end
    
    -- –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name, "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", math.floor(targetPet.distance))
    
    return targetPet.model
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function createPetCopy(originalModel, targetPosition)
    print("üìã –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é –ø–∏—Ç–æ–º—Ü–∞:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_EGG_COPY"
    copy.Parent = Workspace
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    if copy.PrimaryPart then
        copy:SetPrimaryPartCFrame(CFrame.new(targetPosition))
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ PrimaryPart –≤ –ø–æ–∑–∏—Ü–∏–∏:", targetPosition)
    elseif copy:FindFirstChild("RootPart") then
        copy.RootPart.Position = targetPosition
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart –≤ –ø–æ–∑–∏—Ü–∏–∏:", targetPosition)
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D (–∏–∑ PetScaler_v2)
local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    return connection
end

-- –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ workspace.visuals
local function waitForVisualsPet()
    print("üëÅÔ∏è –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ workspace.visuals...")
    print("üéØ –ò—â—É –ø–∏—Ç–æ–º—Ü–µ–≤:", table.concat(CONFIG.TARGET_PETS, ", "))
    
    local startTime = tick()
    local found = false
    
    return coroutine.create(function()
        while not found and (tick() - startTime) < CONFIG.WAIT_TIMEOUT do
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º workspace.visuals
            local visuals = Workspace:FindFirstChild("visuals")
            if visuals then
                for _, obj in pairs(visuals:GetChildren()) do
                    if obj:IsA("Model") then
                        for _, targetName in ipairs(CONFIG.TARGET_PETS) do
                            if obj.Name:upper() == targetName:upper() then
                                print("üéâ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ø–∏—Ç–æ–º–µ—Ü –≤ visuals:", obj.Name)
                                
                                -- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                                local tempPetPosition
                                local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                                if success then
                                    tempPetPosition = modelCFrame.Position
                                elseif obj.PrimaryPart then
                                    tempPetPosition = obj.PrimaryPart.Position
                                elseif obj:FindFirstChild("RootPart") then
                                    tempPetPosition = obj.RootPart.Position
                                else
                                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
                                    found = true
                                    return false
                                end
                                
                                print("üìç –ü–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", tempPetPosition)
                                
                                -- –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                                print("üóëÔ∏è –£–¥–∞–ª—è—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ visuals")
                                obj:Destroy()
                                
                                found = true
                                return tempPetPosition
                            end
                        end
                    end
                end
            end
            
            wait(0.1) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
        end
        
        if not found then
            print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ (", CONFIG.WAIT_TIMEOUT, "—Å–µ–∫)")
        end
        
        return false
    end)
end

-- === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

local function startEggReplacement()
    if isWaiting then
        print("‚ö†Ô∏è –£–∂–µ –æ–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞!")
        return
    end
    
    print("üöÄ === –ó–ê–ü–£–°–ö –ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ê –ò–ó –Ø–ô–¶–ê ===")
    
    -- –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º
    local targetPet = scanNearbyPet()
    if not targetPet then
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return
    end
    
    scannedPet = targetPet
    isWaiting = true
    
    print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω:", scannedPet.Name)
    print("‚è≥ –û–∂–∏–¥–∞—é –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞ –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ visuals...")
    
    -- –®–∞–≥ 2: –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ visuals
    local waitCoroutine = waitForVisualsPet()
    
    spawn(function()
        local result = coroutine.resume(waitCoroutine)
        local tempPetPosition = select(2, result)
        
        isWaiting = false
        
        if tempPetPosition then
            print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!")
            print("üìç –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é –≤ –ø–æ–∑–∏—Ü–∏–∏:", tempPetPosition)
            
            -- –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
            local petCopy = createPetCopy(scannedPet, tempPetPosition)
            if petCopy then
                -- –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored
                local copyParts = getAllParts(petCopy)
                smartAnchoredManagement(copyParts)
                
                -- –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                wait(0.5)
                local connection = startLiveMotorCopying(scannedPet, petCopy)
                
                if connection then
                    print("üéâ === –£–°–ü–ï–•! ===")
                    print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü –∏–∑ —è–π—Ü–∞ –∑–∞–º–µ–Ω–µ–Ω –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–µ–π!")
                    print("üí° –ö–æ–ø–∏—è –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
                else
                    print("‚ö†Ô∏è –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
                end
            end
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ visuals –∏–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
        end
        
        scannedPet = nil
    end)
end

-- === –°–û–ó–î–ê–ù–ò–ï GUI ===

local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("EggReplacerGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EggReplacerGUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 280, 0, 100)
    frame.Position = UDim2.new(0, 50, 0, 250) -- –ù–∏–∂–µ –¥—Ä—É–≥–∏—Ö GUI
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 165, 0) -- –û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ReplaceButton"
    button.Size = UDim2.new(0, 260, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 15)
    button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
    button.BorderSizePixel = 0
    button.Text = "ü•ö –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "StatusLabel"
    statusLabel.Size = UDim2.new(0, 260, 0, 25)
    statusLabel.Position = UDim2.new(0, 10, 0, 65)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextSize = 12
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        if isWaiting then
            statusLabel.Text = "–£–∂–µ –æ–∂–∏–¥–∞—é –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞..."
            return
        end
        
        button.Text = "‚è≥ –°–∫–∞–Ω–∏—Ä—É—é –∏ –æ–∂–∏–¥–∞—é..."
        button.BackgroundColor3 = Color3.fromRGB(255, 200, 0)
        statusLabel.Text = "–û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ visuals..."
        
        spawn(function()
            startEggReplacement()
            
            wait(2)
            if not isWaiting then
                button.Text = "ü•ö –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞"
                button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
                statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            end
        end)
    end)
    
    -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    spawn(function()
        while true do
            if isWaiting then
                statusLabel.Text = "‚è≥ –û–∂–∏–¥–∞—é –ø–∏—Ç–æ–º—Ü–∞ –≤ visuals..."
            elseif not isWaiting and statusLabel.Text:find("–û–∂–∏–¥–∞—é") then
                statusLabel.Text = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            end
            wait(1)
        end
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(255, 165, 0) then
            button.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(255, 140, 0) then
            button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        end
    end)
    
    print("üñ•Ô∏è EggReplacer GUI —Å–æ–∑–¥–∞–Ω!")
end

-- === –ó–ê–ü–£–°–ö ===

createGUI()
print("=" .. string.rep("=", 50))
print("üí° EGG PET REPLACER - –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï:")
print("   1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É")
print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ")
print("   3. –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–µ–π!")
print("üéØ –¶–µ–ª–µ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã: " .. table.concat(CONFIG.TARGET_PETS, ", "))
print("=" .. string.rep("=", 50))
