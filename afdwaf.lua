-- üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ü–ò–ò –ü–ò–¢–û–ú–¶–ê - –ê–Ω–∞–ª–∏–∑ Motor6D –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
-- –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–æ–ø–∏—é –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

print("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ü–ò–ò –ü–ò–¢–û–ú–¶–ê ===")
print("=" .. string.rep("=", 50))

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏
local function analyzeModel(model, modelType)
    print("\nüìä –ê–ù–ê–õ–ò–ó " .. modelType .. ": " .. model.Name)
    print("-" .. string.rep("-", 40))
    
    -- –ê–Ω–∞–ª–∏–∑ BasePart
    local parts = {}
    local anchoredParts = {}
    local freeParts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
            if obj.Anchored then
                table.insert(anchoredParts, obj.Name)
            else
                table.insert(freeParts, obj.Name)
            end
        end
    end
    
    print("üß© –í—Å–µ–≥–æ —á–∞—Å—Ç–µ–π:", #parts)
    print("‚öì –ó–∞—è–∫–æ—Ä–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π:", #anchoredParts)
    if #anchoredParts > 0 then
        print("   –ó–∞—è–∫–æ—Ä–µ–Ω–Ω—ã–µ:", table.concat(anchoredParts, ", "))
    end
    print("üé≠ –°–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å—Ç–µ–π:", #freeParts)
    if #freeParts > 0 and #freeParts <= 10 then
        print("   –°–≤–æ–±–æ–¥–Ω—ã–µ:", table.concat(freeParts, ", "))
    elseif #freeParts > 10 then
        print("   –°–≤–æ–±–æ–¥–Ω—ã–µ: (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–ª—è –≤—ã–≤–æ–¥–∞)")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Motor6D
    local motor6ds = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motor6ds, {
                name = obj.Name,
                part0 = obj.Part0 and obj.Part0.Name or "nil",
                part1 = obj.Part1 and obj.Part1.Name or "nil",
                enabled = obj.Enabled
            })
        end
    end
    
    print("üîß Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:", #motor6ds)
    for i, motor in ipairs(motor6ds) do
        local status = motor.enabled and "‚úÖ" or "‚ùå"
        print(string.format("   %s %s: %s ‚Üí %s", status, motor.name, motor.part0, motor.part1))
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Animator –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    local animator = model:FindFirstChildOfClass("Animator", true)
    if animator then
        print("üé¨ Animator –Ω–∞–π–¥–µ–Ω:", animator.Parent.Name)
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        local animationTracks = animator:GetPlayingAnimationTracks()
        print("üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #animationTracks)
        
        for i, track in ipairs(animationTracks) do
            print(string.format("   üéµ %s (ID: %s, Playing: %s, Looped: %s)", 
                track.Name or "Unnamed", 
                track.Animation.AnimationId,
                tostring(track.IsPlaying),
                tostring(track.Looped)
            ))
        end
    else
        print("‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Humanoid
    local humanoid = model:FindFirstChildOfClass("Humanoid")
    if humanoid then
        print("üë§ Humanoid –Ω–∞–π–¥–µ–Ω")
        print("   PlatformStand:", humanoid.PlatformStand)
        print("   Sit:", humanoid.Sit)
        print("   Health:", humanoid.Health .. "/" .. humanoid.MaxHealth)
    else
        print("‚ùå Humanoid –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    return {
        parts = #parts,
        anchoredParts = #anchoredParts,
        freeParts = #freeParts,
        motor6ds = #motor6ds,
        hasAnimator = animator ~= nil,
        activeAnimations = animator and #animator:GetPlayingAnimationTracks() or 0
    }
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
local function findModels()
    local originalModels = {}
    local copyModels = {}
    
    -- –ò—â–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ Workspace
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID —Ñ–æ—Ä–º–∞—Ç (36 —Å–∏–º–≤–æ–ª–æ–≤ —Å –¥–µ—Ñ–∏—Å–∞–º–∏)
            if string.match(obj.Name, "^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") then
                table.insert(originalModels, obj)
            elseif string.find(obj.Name, "_SCALED_COPY") then
                table.insert(copyModels, obj)
            end
        end
    end
    
    return originalModels, copyModels
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local originals, copies = findModels()
    
    print("üîç –ù–∞–π–¥–µ–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:", #originals)
    print("üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ø–∏–π:", #copies)
    
    if #originals == 0 then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    end
    
    if #copies == 0 then
        print("‚ùå –ö–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ø–∏—é —Å –ø–æ–º–æ—â—å—é PetScaler")
        return
    end
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø–∞—Ä—É
    local original = originals[1]
    local copy = copies[1]
    
    local originalStats = analyzeModel(original, "–û–†–ò–ì–ò–ù–ê–õ")
    local copyStats = analyzeModel(copy, "–ö–û–ü–ò–Ø")
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\nüîç === –°–†–ê–í–ù–ï–ù–ò–ï ===")
    print("-" .. string.rep("-", 30))
    
    local function compareField(field, name, unit)
        unit = unit or ""
        if originalStats[field] == copyStats[field] then
            print("‚úÖ " .. name .. ": " .. originalStats[field] .. unit .. " (–æ–¥–∏–Ω–∞–∫–æ–≤–æ)")
        else
            print("‚ö†Ô∏è " .. name .. ": " .. originalStats[field] .. unit .. " ‚Üí " .. copyStats[field] .. unit .. " (–†–ê–ó–ù–´–ï!)")
        end
    end
    
    compareField("parts", "–ß–∞—Å—Ç–µ–π")
    compareField("anchoredParts", "–ó–∞—è–∫–æ—Ä–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π")
    compareField("freeParts", "–°–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å—Ç–µ–π")
    compareField("motor6ds", "Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    compareField("hasAnimator", "–ï—Å—Ç—å Animator")
    compareField("activeAnimations", "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π")
    
    -- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
    print("-" .. string.rep("-", 30))
    
    if copyStats.anchoredParts > 1 then
        print("‚ö†Ô∏è –£ –∫–æ–ø–∏–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–∫–æ—Ä–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π (" .. copyStats.anchoredParts .. ")")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –¢–æ–ª—å–∫–æ 1 —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—è–∫–æ—Ä–µ–Ω–∞")
    end
    
    if copyStats.freeParts == 0 then
        print("‚ùå –£ –∫–æ–ø–∏–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å Anchored=false")
    end
    
    if copyStats.motor6ds == 0 then
        print("‚ùå –£ –∫–æ–ø–∏–∏ –Ω–µ—Ç Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Motor6D –¥–æ–ª–∂–Ω—ã –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –º–æ–¥–µ–ª—å—é")
    end
    
    if not copyStats.hasAnimator then
        print("‚ùå –£ –∫–æ–ø–∏–∏ –Ω–µ—Ç Animator!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: Animator –¥–æ–ª–∂–µ–Ω –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –º–æ–¥–µ–ª—å—é")
    end
    
    if copyStats.activeAnimations == 0 and originalStats.activeAnimations > 0 then
        print("‚ùå –£ –∫–æ–ø–∏–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –≤ –∫–æ–ø–∏–∏")
    end
    
    print("\nüéØ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")
    if copyStats.freeParts > 0 and copyStats.motor6ds > 0 and copyStats.hasAnimator then
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        if copyStats.activeAnimations == 0 then
            print("‚ö†Ô∏è –ù–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Ö –≤—Ä—É—á–Ω—É—é")
        else
            print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã!")
        end
    else
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
    end
end

-- –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
main()
print("=" .. string.rep("=", 50))
