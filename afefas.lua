-- üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ê
-- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî¨ === –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ê ===")
print("=" .. string.rep("=", 70))

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
local SEARCH_RADIUS = 50

print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", SEARCH_RADIUS)
print()

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–∞
local function analyzeObject(obj, depth)
    local indent = string.rep("  ", depth)
    local info = {
        name = obj.Name,
        className = obj.ClassName,
        parent = obj.Parent and obj.Parent.Name or "NIL"
    }
    
    print(indent .. "üì¶ " .. info.className .. ": " .. info.name .. " (Parent: " .. info.parent .. ")")
    
    -- –ê–Ω–∞–ª–∏–∑ BasePart
    if obj:IsA("BasePart") then
        print(indent .. "  üìè Size: " .. tostring(obj.Size))
        print(indent .. "  üìç Position: " .. tostring(obj.Position))
        print(indent .. "  üîÑ CFrame: " .. tostring(obj.CFrame))
        print(indent .. "  üëª Transparency: " .. obj.Transparency)
        print(indent .. "  üé® Material: " .. tostring(obj.Material))
        print(indent .. "  üåà Color: " .. tostring(obj.Color))
        print(indent .. "  ‚öì Anchored: " .. tostring(obj.Anchored))
        print(indent .. "  üè∑Ô∏è CanCollide: " .. tostring(obj.CanCollide))
        if obj.Shape then
            print(indent .. "  üî∫ Shape: " .. tostring(obj.Shape))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Model
    if obj:IsA("Model") then
        print(indent .. "  üéØ PrimaryPart: " .. (obj.PrimaryPart and obj.PrimaryPart.Name or "NIL"))
        local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
        if success then
            print(indent .. "  üìç ModelCFrame: " .. tostring(modelCFrame))
        end
        local success2, modelSize = pcall(function() return obj:GetExtentsSize() end)
        if success2 then
            print(indent .. "  üìè ModelSize: " .. tostring(modelSize))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Motor6D
    if obj:IsA("Motor6D") then
        print(indent .. "  üîó Part0: " .. (obj.Part0 and obj.Part0.Name or "NIL"))
        print(indent .. "  üîó Part1: " .. (obj.Part1 and obj.Part1.Name or "NIL"))
        print(indent .. "  üìê C0: " .. tostring(obj.C0))
        print(indent .. "  üìê C1: " .. tostring(obj.C1))
        print(indent .. "  üéØ CurrentAngle: " .. obj.CurrentAngle)
        print(indent .. "  üéØ DesiredAngle: " .. obj.DesiredAngle)
        print(indent .. "  ‚ö° MaxVelocity: " .. obj.MaxVelocity)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Weld
    if obj:IsA("Weld") or obj:IsA("WeldConstraint") then
        print(indent .. "  üîó Part0: " .. (obj.Part0 and obj.Part0.Name or "NIL"))
        print(indent .. "  üîó Part1: " .. (obj.Part1 and obj.Part1.Name or "NIL"))
        if obj:IsA("Weld") then
            print(indent .. "  üìê C0: " .. tostring(obj.C0))
            print(indent .. "  üìê C1: " .. tostring(obj.C1))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Attachment
    if obj:IsA("Attachment") then
        print(indent .. "  üìç Position: " .. tostring(obj.Position))
        print(indent .. "  üîÑ Orientation: " .. tostring(obj.Orientation))
        print(indent .. "  üìê CFrame: " .. tostring(obj.CFrame))
        print(indent .. "  üëÅÔ∏è Visible: " .. tostring(obj.Visible))
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Humanoid
    if obj:IsA("Humanoid") then
        print(indent .. "  ‚ù§Ô∏è Health: " .. obj.Health .. "/" .. obj.MaxHealth)
        print(indent .. "  üèÉ WalkSpeed: " .. obj.WalkSpeed)
        print(indent .. "  ü¶ò JumpPower: " .. obj.JumpPower)
        print(indent .. "  üé≠ DisplayDistanceType: " .. tostring(obj.DisplayDistanceType))
        print(indent .. "  üìä RigType: " .. tostring(obj.RigType))
        
        -- –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        local animator = obj:FindFirstChild("Animator")
        if animator then
            print(indent .. "  üé¨ Animator –Ω–∞–π–¥–µ–Ω!")
            local animTracks = animator:GetPlayingAnimationTracks()
            print(indent .. "  üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #animTracks)
            for i, track in ipairs(animTracks) do
                print(indent .. "    üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è #" .. i .. ":")
                print(indent .. "      üìù Name: " .. (track.Name or "Unnamed"))
                print(indent .. "      üÜî AnimationId: " .. (track.Animation and track.Animation.AnimationId or "NIL"))
                print(indent .. "      ‚è±Ô∏è Length: " .. track.Length)
                print(indent .. "      ‚èØÔ∏è IsPlaying: " .. tostring(track.IsPlaying))
                print(indent .. "      üîÅ Looped: " .. tostring(track.Looped))
                print(indent .. "      üìä Priority: " .. tostring(track.Priority))
                print(indent .. "      üîä Weight: " .. track.WeightCurrent)
                print(indent .. "      ‚è∞ TimePosition: " .. track.TimePosition)
                print(indent .. "      üèÉ Speed: " .. track.Speed)
            end
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ AnimationController
    if obj:IsA("AnimationController") then
        print(indent .. "  üéÆ AnimationController –Ω–∞–π–¥–µ–Ω!")
        local animator = obj:FindFirstChild("Animator")
        if animator then
            print(indent .. "  üé¨ Animator –Ω–∞–π–¥–µ–Ω!")
            local animTracks = animator:GetPlayingAnimationTracks()
            print(indent .. "  üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #animTracks)
            for i, track in ipairs(animTracks) do
                print(indent .. "    üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è #" .. i .. ":")
                print(indent .. "      üìù Name: " .. (track.Name or "Unnamed"))
                print(indent .. "      üÜî AnimationId: " .. (track.Animation and track.Animation.AnimationId or "NIL"))
                print(indent .. "      ‚è±Ô∏è Length: " .. track.Length)
                print(indent .. "      ‚èØÔ∏è IsPlaying: " .. tostring(track.IsPlaying))
                print(indent .. "      üîÅ Looped: " .. tostring(track.Looped))
                print(indent .. "      üìä Priority: " .. tostring(track.Priority))
                print(indent .. "      üîä Weight: " .. track.WeightCurrent)
                print(indent .. "      ‚è∞ TimePosition: " .. track.TimePosition)
                print(indent .. "      üèÉ Speed: " .. track.Speed)
            end
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Animation –æ–±—ä–µ–∫—Ç–æ–≤
    if obj:IsA("Animation") then
        print(indent .. "  üéûÔ∏è AnimationId: " .. obj.AnimationId)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
    if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
        print(indent .. "  üìú –°–∫—Ä–∏–ø—Ç: " .. obj.ClassName)
        print(indent .. "  ‚úÖ Enabled: " .. tostring(obj.Enabled or "N/A"))
    end
    
    -- –ê–Ω–∞–ª–∏–∑ SpecialMesh
    if obj:IsA("SpecialMesh") then
        print(indent .. "  üé≠ MeshType: " .. tostring(obj.MeshType))
        print(indent .. "  üìè Scale: " .. tostring(obj.Scale))
        print(indent .. "  üìç Offset: " .. tostring(obj.Offset))
        if obj.MeshId ~= "" then
            print(indent .. "  üÜî MeshId: " .. obj.MeshId)
        end
        if obj.TextureId ~= "" then
            print(indent .. "  üñºÔ∏è TextureId: " .. obj.TextureId)
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –¥—Ä—É–≥–∏—Ö –≤–∞–∂–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    if obj:IsA("GuiObject") then
        print(indent .. "  üëÅÔ∏è Visible: " .. tostring(obj.Visible))
    end
    
    return info
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–µ—Ç–µ–π
local function analyzeChildren(obj, depth, maxDepth)
    if depth > maxDepth then
        return
    end
    
    analyzeObject(obj, depth)
    
    local children = obj:GetChildren()
    if #children > 0 then
        for _, child in ipairs(children) do
            analyzeChildren(child, depth + 1, maxDepth)
        end
    end
end

-- –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ —Å UUID –∏–º–µ–Ω–∞–º–∏
print("üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ï–í –° UUID –ò–ú–ï–ù–ê–ú–ò...")
print("-" .. string.rep("-", 50))

local foundPets = {}

for _, obj in ipairs(Workspace:GetChildren()) do
    if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
        local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
        if success then
            local distance = (modelCFrame.Position - playerPos).Magnitude
            if distance <= SEARCH_RADIUS then
                table.insert(foundPets, {
                    model = obj,
                    distance = distance
                })
            end
        end
    end
end

print("üìä –ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º: " .. #foundPets)
print()

if #foundPets == 0 then
    print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ " .. SEARCH_RADIUS .. " –µ–¥–∏–Ω–∏—Ü!")
    print("üí° –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ –ø–∏—Ç–æ–º—Ü—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
    return
end

-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
local targetPet = foundPets[1].model
print("üéØ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ü–ò–¢–û–ú–¶–ê: " .. targetPet.Name)
print("üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " .. math.floor(foundPets[1].distance) .. " –µ–¥–∏–Ω–∏—Ü")
print("=" .. string.rep("=", 70))
print()

-- –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´
print("üî¨ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–ò–¢–û–ú–¶–ê:")
print("-" .. string.rep("-", 50))

analyzeChildren(targetPet, 0, 10) -- –ú–∞–∫—Å–∏–º—É–º 10 —É—Ä–æ–≤–Ω–µ–π –≤–≥–ª—É–±—å

print()
print("üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("-" .. string.rep("-", 30))

-- –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
local stats = {}
for _, obj in ipairs(targetPet:GetDescendants()) do
    local className = obj.ClassName
    stats[className] = (stats[className] or 0) + 1
end

for className, count in pairs(stats) do
    print("  " .. className .. ": " .. count)
end

print()
print("üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
print("=" .. string.rep("=", 70))
