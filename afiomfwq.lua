-- üîç SIMPLE IDLE ANALYZER - –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ—è—á–µ–π –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞
-- –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üîç === SIMPLE IDLE ANALYZER ===")
print("=" .. string.rep("=", 40))

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–±–µ–∑ –∫–æ–ø–∏–∏)
local function findOriginalPet()
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and not obj.Name:find("_SCALED_COPY") then
            return obj
        end
    end
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
local function analyzeModelStructure(model)
    print("üìä –°–¢–†–£–ö–¢–£–†–ê –ú–û–î–ï–õ–ò: " .. model.Name)
    print()
    
    -- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üéØ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("  –ò–º—è: " .. model.Name)
    print("  –ö–ª–∞—Å—Å: " .. model.ClassName)
    print("  –†–æ–¥–∏—Ç–µ–ª—å: " .. (model.Parent and model.Parent.Name or "nil"))
    if model.PrimaryPart then
        print("  PrimaryPart: " .. model.PrimaryPart.Name)
    else
        print("  PrimaryPart: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    end
    print()
    
    -- –í—Å–µ –¥–µ—Ç–∏ –º–æ–¥–µ–ª–∏
    local children = model:GetChildren()
    print("üë∂ –î–µ—Ç–∏ –º–æ–¥–µ–ª–∏ (" .. #children .. "):")
    for i, child in ipairs(children) do
        print("  [" .. i .. "] " .. child.Name .. " (" .. child.ClassName .. ")")
    end
    print()
    
    -- –í—Å–µ BasePart
    local parts = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    print("üß© BasePart –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (" .. #parts .. "):")
    for i, part in ipairs(parts) do
        print("  [" .. i .. "] " .. part.Name .. " (" .. part.ClassName .. ")")
        print("    Size: " .. tostring(part.Size))
        print("    Position: " .. tostring(part.Position))
        print("    Anchored: " .. tostring(part.Anchored))
        print("    CanCollide: " .. tostring(part.CanCollide))
        print("    Transparency: " .. part.Transparency)
        print()
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
local function analyzeMotor6D(model)
    print("‚öôÔ∏è MOTOR6D –°–û–ï–î–ò–ù–ï–ù–ò–Ø:")
    
    local motors = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    print("  –ù–∞–π–¥–µ–Ω–æ Motor6D: " .. #motors)
    print()
    
    if #motors == 0 then
        print("  ‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return {}
    end
    
    for i, motor in ipairs(motors) do
        print("  [" .. i .. "] " .. motor.Name)
        print("    Part0: " .. (motor.Part0 and motor.Part0.Name or "nil"))
        print("    Part1: " .. (motor.Part1 and motor.Part1.Name or "nil"))
        print("    Transform: " .. tostring(motor.Transform))
        print("    C0: " .. tostring(motor.C0))
        print("    C1: " .. tostring(motor.C1))
        print()
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
local function analyzeAnimationComponents(model)
    print("üé¨ –ê–ù–ò–ú–ê–¶–ò–û–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    
    local animationController = nil
    local animator = nil
    local humanoid = nil
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("AnimationController") then
            animationController = obj
        elseif obj:IsA("Animator") then
            animator = obj
        elseif obj:IsA("Humanoid") then
            humanoid = obj
        end
    end
    
    -- AnimationController
    if animationController then
        print("  ‚úÖ AnimationController –Ω–∞–π–¥–µ–Ω: " .. animationController.Name)
        print("    –†–æ–¥–∏—Ç–µ–ª—å: " .. (animationController.Parent and animationController.Parent.Name or "nil"))
    else
        print("  ‚ùå AnimationController –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- Animator
    if animator then
        print("  ‚úÖ Animator –Ω–∞–π–¥–µ–Ω: " .. animator.Name)
        print("    –†–æ–¥–∏—Ç–µ–ª—å: " .. (animator.Parent and animator.Parent.Name or "nil"))
        
        -- –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        local activeTracks = animator:GetPlayingAnimationTracks()
        print("    –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #activeTracks)
        
        for i, track in ipairs(activeTracks) do
            if track.Animation then
                print("      [" .. i .. "] " .. (track.Name or "Unknown"))
                print("        ID: " .. track.Animation.AnimationId)
                print("        Playing: " .. tostring(track.IsPlaying))
                print("        Speed: " .. track.Speed)
                print("        Weight: " .. track.WeightCurrent)
                print("        Looped: " .. tostring(track.Looped))
                print("        Priority: " .. track.Priority.Name)
            end
        end
    else
        print("  ‚ùå Animator –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- Humanoid
    if humanoid then
        print("  ‚úÖ Humanoid –Ω–∞–π–¥–µ–Ω: " .. humanoid.Name)
        print("    Health: " .. humanoid.Health .. "/" .. humanoid.MaxHealth)
        print("    WalkSpeed: " .. humanoid.WalkSpeed)
        print("    JumpPower: " .. humanoid.JumpPower)
    else
        print("  ‚ùå Humanoid –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    print()
    
    return {
        animationController = animationController,
        animator = animator,
        humanoid = humanoid
    }
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
local function analyzeOtherComponents(model)
    print("üîß –î–†–£–ì–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    
    local attachments = {}
    local welds = {}
    local scripts = {}
    local other = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Attachment") then
            table.insert(attachments, obj)
        elseif obj:IsA("Weld") or obj:IsA("WeldConstraint") then
            table.insert(welds, obj)
        elseif obj:IsA("Script") or obj:IsA("LocalScript") then
            table.insert(scripts, obj)
        elseif not obj:IsA("BasePart") and not obj:IsA("Motor6D") and not obj:IsA("AnimationController") and not obj:IsA("Animator") and not obj:IsA("Humanoid") then
            table.insert(other, obj)
        end
    end
    
    print("  üìé Attachments: " .. #attachments)
    for _, att in ipairs(attachments) do
        print("    " .. att.Name .. " (–≤ " .. (att.Parent and att.Parent.Name or "nil") .. ")")
    end
    
    print("  üîó Welds: " .. #welds)
    for _, weld in ipairs(welds) do
        print("    " .. weld.Name .. " (" .. weld.ClassName .. ")")
    end
    
    print("  üìú Scripts: " .. #scripts)
    for _, script in ipairs(scripts) do
        print("    " .. script.Name .. " (" .. script.ClassName .. ")")
    end
    
    print("  ‚ùì –î—Ä—É–≥–∏–µ: " .. #other)
    for _, obj in ipairs(other) do
        print("    " .. obj.Name .. " (" .. obj.ClassName .. ")")
    end
    
    print()
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local pet = findOriginalPet()
    
    if not pet then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Å—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Workspace")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü: " .. pet.Name)
    print("üìç –ü–æ–∑–∏—Ü–∏—è: " .. tostring(pet:GetModelCFrame().Position))
    print()
    print("‚è∞ –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –°–¢–û–ò–¢ –ù–ê –ú–ï–°–¢–ï –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!")
    print()
    
    -- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏
    local parts = analyzeModelStructure(pet)
    local motors = analyzeMotor6D(pet)
    local animComponents = analyzeAnimationComponents(pet)
    analyzeOtherComponents(pet)
    
    -- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print("üìã –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
    print("  BasePart: " .. #parts)
    print("  Motor6D: " .. #motors)
    print("  AnimationController: " .. (animComponents.animationController and "‚úÖ" or "‚ùå"))
    print("  Animator: " .. (animComponents.animator and "‚úÖ" or "‚ùå"))
    print("  Humanoid: " .. (animComponents.humanoid and "‚úÖ" or "‚ùå"))
    
    if animComponents.animator then
        local activeTracks = animComponents.animator:GetPlayingAnimationTracks()
        print("  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #activeTracks)
    end
    
    print()
    print("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üí° –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–æ—è—á–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
    
    print("=" .. string.rep("=", 40))
end

-- –ó–∞–ø—É—Å–∫
main()
