-- üîç COPY DIAGNOSTICS - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–ø–∏–µ–π –ø–∏—Ç–æ–º—Ü–∞
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫–æ–ø–∏–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üîç === COPY DIAGNOSTICS ===")
print("=" .. string.rep("=", 40))

-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –∫–æ–ø–∏–∏
local function findModels()
    local original = nil
    local copy = nil
    local copyUUID = nil
    
    -- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–ø–∏—é —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å UUID
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") and obj.Name:find("_SCALED_COPY") then
            copy = obj
            -- –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –∏–∑ –∏–º–µ–Ω–∏ –∫–æ–ø–∏–∏
            copyUUID = obj.Name:gsub("_SCALED_COPY", "")
            print("üîç –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ø–∏—è:", obj.Name)
            print("üéØ –ò—â—É –æ—Ä–∏–≥–∏–Ω–∞–ª —Å UUID:", copyUUID)
            break
        end
    end
    
    if not copy then
        print("‚ö†Ô∏è –ö–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â—É –ª—é–±–æ–π UUID –ø–∏—Ç–æ–º–µ—Ü...")
        -- –ï—Å–ª–∏ –∫–æ–ø–∏–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
                original = obj
                break
            end
        end
        return original, copy
    end
    
    -- –¢–µ–ø–µ—Ä—å –∏—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∂–µ UUID
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == copyUUID then
            original = obj
            print("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª:", obj.Name)
            break
        end
    end
    
    if not original then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª —Å UUID", copyUUID, "–Ω–µ –Ω–∞–π–¥–µ–Ω!")
    end
    
    return original, copy
end

-- –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏
local function diagnoseModel(model, modelType)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê " .. modelType .. ":", model.Name)
    print("-" .. string.rep("-", 30))
    
    local parts = {}
    local motor6Ds = {}
    local animations = {}
    
    -- –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç—è—Ö
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, {
                name = obj.Name,
                anchored = obj.Anchored,
                position = obj.Position,
                size = obj.Size,
                parent = obj.Parent.Name,
                visible = obj.Transparency < 1
            })
        elseif obj:IsA("Motor6D") then
            table.insert(motor6Ds, {
                name = obj.Name,
                part0 = obj.Part0 and obj.Part0.Name or "NIL",
                part1 = obj.Part1 and obj.Part1.Name or "NIL",
                currentAngle = obj.CurrentAngle,
                enabled = obj.Enabled
            })
        elseif obj:IsA("Animator") then
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in ipairs(tracks) do
                table.insert(animations, {
                    name = track.Name,
                    id = track.Animation and track.Animation.AnimationId or "N/A",
                    playing = track.IsPlaying,
                    speed = track.Speed
                })
            end
        end
    end
    
    -- –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("  BaseParts:", #parts)
    print("  Motor6D:", #motor6Ds)
    print("  –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #animations)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–∏
    print("üß© –ß–ê–°–¢–ò:")
    local anchoredCount = 0
    local visibleCount = 0
    for i, part in ipairs(parts) do
        local status = ""
        if part.anchored then 
            status = status .. "[ANCHORED] "
            anchoredCount = anchoredCount + 1
        end
        if not part.visible then 
            status = status .. "[INVISIBLE] "
        else
            visibleCount = visibleCount + 1
        end
        
        print("  [" .. i .. "] " .. part.name .. " " .. status)
        print("    Pos: " .. tostring(part.position))
        print("    Size: " .. tostring(part.size))
    end
    print("  –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ:", anchoredCount .. "/" .. #parts)
    print("  –í–∏–¥–∏–º—ã—Ö:", visibleCount .. "/" .. #parts)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Motor6D
    print("üîß MOTOR6D –°–û–ï–î–ò–ù–ï–ù–ò–Ø:")
    local workingMotors = 0
    for i, motor in ipairs(motor6Ds) do
        local status = ""
        if motor.part0 == "NIL" or motor.part1 == "NIL" then
            status = "[BROKEN] "
        else
            workingMotors = workingMotors + 1
            status = "[OK] "
        end
        
        if not motor.enabled then
            status = status .. "[DISABLED] "
        end
        
        print("  [" .. i .. "] " .. motor.name .. " " .. status)
        print("    " .. motor.part0 .. " -> " .. motor.part1)
        print("    Angle: " .. motor.currentAngle)
    end
    print("  –†–∞–±–æ—á–∏—Ö –º–æ—Ç–æ—Ä–æ–≤:", workingMotors .. "/" .. #motor6Ds)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    print("üé¨ –ê–ù–ò–ú–ê–¶–ò–ò:")
    if #animations == 0 then
        print("  ‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π")
    else
        for i, anim in ipairs(animations) do
            print("  [" .. i .. "] " .. anim.name)
            print("    ID: " .. anim.id)
            print("    Playing: " .. tostring(anim.playing))
            print("    Speed: " .. anim.speed)
        end
    end
    print()
    
    return {
        parts = parts,
        motor6Ds = motor6Ds,
        animations = animations,
        stats = {
            totalParts = #parts,
            anchoredParts = anchoredCount,
            visibleParts = visibleCount,
            workingMotors = workingMotors,
            activeAnimations = #animations
        }
    }
end

-- –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
local function compareModels(originalData, copyData)
    print("‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–ê –ò –ö–û–ü–ò–ò:")
    print("-" .. string.rep("-", 30))
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("  –ß–∞—Å—Ç–∏ - –û—Ä–∏–≥–∏–Ω–∞–ª:", originalData.stats.totalParts, "| –ö–æ–ø–∏—è:", copyData.stats.totalParts)
    print("  –í–∏–¥–∏–º—ã–µ —á–∞—Å—Ç–∏ - –û—Ä–∏–≥–∏–Ω–∞–ª:", originalData.stats.visibleParts, "| –ö–æ–ø–∏—è:", copyData.stats.visibleParts)
    print("  –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ - –û—Ä–∏–≥–∏–Ω–∞–ª:", originalData.stats.anchoredParts, "| –ö–æ–ø–∏—è:", copyData.stats.anchoredParts)
    print("  –†–∞–±–æ—á–∏–µ –º–æ—Ç–æ—Ä—ã - –û—Ä–∏–≥–∏–Ω–∞–ª:", originalData.stats.workingMotors, "| –ö–æ–ø–∏—è:", copyData.stats.workingMotors)
    print("  –ê–Ω–∏–º–∞—Ü–∏–∏ - –û—Ä–∏–≥–∏–Ω–∞–ª:", originalData.stats.activeAnimations, "| –ö–æ–ø–∏—è:", copyData.stats.activeAnimations)
    print()
    
    -- –ò—â–µ–º –ø—Ä–æ–ø–∞–≤—à–∏–µ —á–∞—Å—Ç–∏
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ü–ê–í–®–ò–• –ß–ê–°–¢–ï–ô:")
    for _, originalPart in ipairs(originalData.parts) do
        local found = false
        for _, copyPart in ipairs(copyData.parts) do
            if copyPart.name == originalPart.name then
                found = true
                if not copyPart.visible and originalPart.visible then
                    print("  ‚ö†Ô∏è –ß–∞—Å—Ç—å —Å—Ç–∞–ª–∞ –Ω–µ–≤–∏–¥–∏–º–æ–π:", copyPart.name)
                end
                break
            end
        end
        if not found then
            print("  ‚ùå –ß–∞—Å—Ç—å –ø—Ä–æ–ø–∞–ª–∞:", originalPart.name)
        end
    end
    print()
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findModels()
    
    if not original then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    if not copy then
        print("‚ùå –ö–æ–ø–∏—è –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ø–∏—é —á–µ—Ä–µ–∑ PetScaler")
        return
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω—ã –º–æ–¥–µ–ª–∏:")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", original.Name)
    print("  –ö–æ–ø–∏—è:", copy.Name)
    print()
    
    -- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞
    local originalData = diagnoseModel(original, "–û–†–ò–ì–ò–ù–ê–õ")
    local copyData = diagnoseModel(copy, "–ö–û–ü–ò–Ø")
    
    -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
    compareModels(originalData, copyData)
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" .. string.rep("=", 40))
end

-- –ó–∞–ø—É—Å–∫
main()
