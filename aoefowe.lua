-- === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHARACTER –ò –ü–ò–¢–û–ú–¶–ï–í ===
-- –ò—â–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –∫–æ–≥–¥–∞ Tool –∞–∫—Ç–∏–≤–µ–Ω

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî¨ === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CHARACTER –ò –ü–ò–¢–û–ú–¶–ï–í ===")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Character
local function findPetsInCharacter(character)
    local pets = {}
    
    -- –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –¥–µ—Ç—è—Ö Character
    for _, obj in pairs(character:GetChildren()) do
        if obj:IsA("Model") then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞
            if obj.Name:find("Golden") or obj.Name:find("Dog") or obj.Name:find("Bunny") or 
               obj.Name:find("Lab") or obj.Name:find("%{") or obj.Name:find("Cat") or
               obj.Name:find("Dragon") or obj.Name:find("Pet") then
                table.insert(pets, {
                    model = obj,
                    location = "Character",
                    type = obj.Name:find("%{") and "UUID" or "Regular"
                })
            end
        end
    end
    
    -- –ò—â–µ–º –≤ Tool –æ–±—ä–µ–∫—Ç–∞—Ö
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") then
            for _, obj in pairs(tool:GetChildren()) do
                if obj:IsA("Model") then
                    table.insert(pets, {
                        model = obj,
                        location = "Tool: " .. tool.Name,
                        type = obj.Name:find("%{") and "UUID" or "Regular"
                    })
                end
            end
        end
    end
    
    return pets
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (Welds, Motor6D)
local function analyzeConnections(character)
    print("\nüîó === –ê–ù–ê–õ–ò–ó –°–û–ï–î–ò–ù–ï–ù–ò–ô –í CHARACTER ===")
    
    local connections = {}
    
    for _, obj in pairs(character:GetDescendants()) do
        if obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") then
            table.insert(connections, obj)
        end
    end
    
    print("üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:", #connections)
    
    for i, conn in pairs(connections) do
        if i <= 20 then -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print("  " .. i .. ". " .. conn.Name .. " (" .. conn.ClassName .. ")")
            
            if conn:IsA("Weld") or conn:IsA("Motor6D") then
                local part0Name = conn.Part0 and conn.Part0.Name or "nil"
                local part1Name = conn.Part1 and conn.Part1.Name or "nil"
                print("    Part0: " .. part0Name .. " ‚Üí Part1: " .. part1Name)
                
                -- –ò—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Handle
                if part0Name == "Handle" or part1Name == "Handle" then
                    print("    ü§è –°–û–ï–î–ò–ù–ï–ù–ò–ï –° HANDLE –ù–ê–ô–î–ï–ù–û!")
                    
                    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–æ —Å Handle
                    local otherPart = conn.Part0 and conn.Part0.Name == "Handle" and conn.Part1 or conn.Part0
                    if otherPart then
                        print("    üêæ –°–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:", otherPart.Name, "(" .. otherPart.ClassName .. ")")
                        print("    üìç –ü–æ–∑–∏—Ü–∏—è:", otherPart.Position)
                        
                        -- –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å
                        local parentModel = otherPart.Parent
                        while parentModel and not parentModel:IsA("Model") do
                            parentModel = parentModel.Parent
                        end
                        
                        if parentModel and parentModel ~= character then
                            print("    üè† –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å:", parentModel.Name)
                            print("    üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:", parentModel.Parent and parentModel.Parent.Name or "nil")
                        end
                    end
                end
            end
        elseif i == 21 then
            print("  ... –∏ –µ—â–µ " .. (#connections - 20) .. " —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
            break
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Workspace —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
local function findNearbyWorkspacePets()
    print("\nüåç === –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ï–í –í WORKSPACE ===")
    
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        print("‚ùå Character –∏–ª–∏ HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    end
    
    local playerPos = character.HumanoidRootPart.Position
    local nearbyPets = {}
    
    for _, obj in pairs(game.Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Parent ~= character then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞
            if obj.Name:find("Golden") or obj.Name:find("Dog") or obj.Name:find("Bunny") or 
               obj.Name:find("Lab") or obj.Name:find("%{") or obj.Name:find("Cat") or
               obj.Name:find("Dragon") then
                
                local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                if success then
                    local distance = (modelCFrame.Position - playerPos).Magnitude
                    if distance <= 50 then -- –í —Ä–∞–¥–∏—É—Å–µ 50 studs
                        
                        -- –°—á–∏—Ç–∞–µ–º MeshParts
                        local meshCount = 0
                        for _, desc in pairs(obj:GetDescendants()) do
                            if desc:IsA("MeshPart") then
                                meshCount = meshCount + 1
                            end
                        end
                        
                        table.insert(nearbyPets, {
                            model = obj,
                            distance = distance,
                            meshCount = meshCount,
                            type = obj.Name:find("%{") and "UUID" or "Regular",
                            location = obj.Parent and obj.Parent.Name or "Unknown"
                        })
                    end
                end
            end
        end
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    table.sort(nearbyPets, function(a, b) return a.distance < b.distance end)
    
    print("üêæ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º:", #nearbyPets)
    for i, pet in pairs(nearbyPets) do
        if i <= 10 then
            print("  " .. i .. ". " .. pet.model.Name)
            print("    üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: " .. math.floor(pet.distance))
            print("    üß© MeshParts: " .. pet.meshCount)
            print("    üè∑Ô∏è –¢–∏–ø: " .. pet.type)
            print("    üìç –õ–æ–∫–∞—Ü–∏—è: " .. pet.location)
        end
    end
    
    return nearbyPets
end

-- –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
local lastToolState = nil
local frameCount = 0

local diagnosticConnection = RunService.Heartbeat:Connect(function()
    frameCount = frameCount + 1
    
    local character = player.Character
    if not character then return end
    
    -- –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π Tool
    local activeTool = nil
    for _, obj in pairs(character:GetChildren()) do
        if obj:IsA("Tool") then
            activeTool = obj
            break
        end
    end
    
    -- –ï—Å–ª–∏ Tool –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if activeTool and (not lastToolState or lastToolState.name ~= activeTool.Name) then
        print("\nüö® === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–ì–û TOOL ===")
        print("‚è∞ –í—Ä–µ–º—è:", os.date("%H:%M:%S"))
        print("üìõ Tool:", activeTool.Name)
        
        -- 1. –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Character
        print("\nüêæ === –ü–ò–¢–û–ú–¶–´ –í CHARACTER ===")
        local petsInChar = findPetsInCharacter(character)
        if #petsInChar == 0 then
            print("‚ùå –ü–∏—Ç–æ–º—Ü–µ–≤ –≤ Character –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else
            for i, pet in pairs(petsInChar) do
                print("  " .. i .. ". " .. pet.model.Name .. " (" .. pet.type .. ") –≤ " .. pet.location)
            end
        end
        
        -- 2. –ê–Ω–∞–ª–∏–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        analyzeConnections(character)
        
        -- 3. –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Workspace
        local workspacePets = findNearbyWorkspacePets()
        
        -- 4. –ê–Ω–∞–ª–∏–∑ Handle –≤ Tool
        print("\nü§è === –ê–ù–ê–õ–ò–ó HANDLE –í TOOL ===")
        local handle = activeTool:FindFirstChild("Handle")
        if handle then
            print("‚úÖ Handle –Ω–∞–π–¥–µ–Ω")
            print("üìç Handle –ø–æ–∑–∏—Ü–∏—è:", handle.Position)
            
            -- –ò—â–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–æ —Å Handle
            print("\nüîó –ß—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–æ —Å Handle:")
            local handleConnections = 0
            for _, obj in pairs(character:GetDescendants()) do
                if (obj:IsA("Weld") or obj:IsA("Motor6D")) and 
                   ((obj.Part0 == handle) or (obj.Part1 == handle)) then
                    handleConnections = handleConnections + 1
                    local otherPart = obj.Part0 == handle and obj.Part1 or obj.Part0
                    print("  üîó " .. obj.Name .. " —Å–æ–µ–¥–∏–Ω—è–µ—Ç Handle —Å " .. (otherPart and otherPart.Name or "nil"))
                    
                    -- –ò—â–µ–º –º–æ–¥–µ–ª—å —ç—Ç–æ–π —á–∞—Å—Ç–∏
                    if otherPart then
                        local parentModel = otherPart.Parent
                        while parentModel and not parentModel:IsA("Model") and parentModel ~= character do
                            parentModel = parentModel.Parent
                        end
                        
                        if parentModel and parentModel ~= character then
                            print("    üè† –ú–æ–¥–µ–ª—å: " .. parentModel.Name)
                            print("    üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: " .. (parentModel.Parent and parentModel.Parent.Name or "nil"))
                        end
                    end
                end
            end
            
            if handleConnections == 0 then
                print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å Handle –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            end
        else
            print("‚ùå Handle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Tool")
        end
        
        -- 5. –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ UUID –ø–∏—Ç–æ–º—Ü–∞
        print("\nüîç === –ü–û–ò–°–ö –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ï–ì–û UUID –ü–ò–¢–û–ú–¶–ê ===")
        local toolPetName = activeTool.Name
        print("üéØ –ò—â—É UUID –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è:", toolPetName)
        
        -- –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –∏–º–µ–Ω–∏ Tool
        local petType = nil
        if toolPetName:find("Golden Lab") then
            petType = "Golden Lab"
        elseif toolPetName:find("Dog") then
            petType = "Dog"
        elseif toolPetName:find("Bunny") then
            petType = "Bunny"
        end
        
        if petType then
            print("üè∑Ô∏è –¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞:", petType)
            
            -- –ò—â–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
            for _, pet in pairs(workspacePets) do
                if pet.type == "UUID" and pet.model.Name:find(petType) then
                    print("üîë –ù–ê–ô–î–ï–ù –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ò–ô UUID:", pet.model.Name)
                    print("    üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è:", math.floor(pet.distance))
                    print("    üß© MeshParts:", pet.meshCount)
                    break
                end
            end
        end
        
        print("\n" .. string.rep("=", 60))
        
        lastToolState = {name = activeTool.Name, tool = activeTool}
        
    elseif not activeTool and lastToolState then
        print("\nüóëÔ∏è === TOOL –£–î–ê–õ–ï–ù ===")
        print("üìõ –ë—ã–ª:", lastToolState.name)
        lastToolState = nil
    end
    
    -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—â–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if frameCount % 1800 == 0 then -- –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        print("\nüìä === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===")
        print("‚è∞ –í—Ä–µ–º—è:", os.date("%H:%M:%S"))
        print("üéØ –ö–∞–¥—Ä:", frameCount)
        
        if character then
            print("üë§ Character –æ–±—ä–µ–∫—Ç–æ–≤:", #character:GetChildren())
            
            -- –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
            local objectTypes = {}
            for _, obj in pairs(character:GetChildren()) do
                local className = obj.ClassName
                objectTypes[className] = (objectTypes[className] or 0) + 1
            end
            
            print("üìã –¢–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤:")
            for className, count in pairs(objectTypes) do
                print("  " .. className .. ": " .. count)
            end
        end
    end
end)

print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
print("üéØ –í–æ–∑—å–º–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: diagnosticConnection:Disconnect()")

return diagnosticConnection
