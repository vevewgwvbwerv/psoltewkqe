-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü–õ–ê–í–ù–û–ì–û –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –î–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê
local CONFIG = {
    SEARCH_RADIUS = 100,
    START_SCALE = 0.3,      -- –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–ø–∏–∏ (30% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
    TARGET_SCALE = 1.0,     -- –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä (–∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª)
    SCALE_FACTOR = 1.0,     -- –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Motor6D –ª–æ–≥–∏–∫–æ–π
    TWEEN_TIME = 3.0,       -- –í—Ä–µ–º—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    for _, descendant in ipairs(model:GetDescendants()) do
        if descendant:IsA("BasePart") then
            table.insert(parts, descendant)
        end
    end
    return parts
end

-- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: deepCopyModel (–±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞!)
local function deepCopyModel(originalModel)
    if not originalModel or not originalModel.Parent then
        print("‚ùå deepCopyModel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
        return nil
    end
    
    print("üîÑ –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    -- –ö–ª–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    
    -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º Handle –∏ —Å–µ—Ä—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã
    local removedParts = {}
    for _, part in ipairs(copy:GetDescendants()) do
        if part:IsA("BasePart") then
            local shouldRemove = false
            local reason = ""
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ (Handle)
            if part.Name == "Handle" then
                shouldRemove = true
                reason = "Handle"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–æ—Ä–º–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—É (—Å–µ—Ä—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã) - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è Shape
            elseif part:IsA("Part") and part.Shape == Enum.PartType.Block and part.Material == Enum.Material.Plastic then
                shouldRemove = true
                reason = "—Å–µ—Ä—ã–π –∫–≤–∞–¥—Ä–∞—Ç (Block+Plastic)"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ü–≤–µ—Ç—É (–ª—é–±—ã–µ —Å–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏)
            elseif part.BrickColor.Name:find("[Gg]rey") or part.BrickColor.Name:find("[Gg]ray") then
                shouldRemove = true
                reason = "—Å–µ—Ä—ã–π —Ü–≤–µ—Ç"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ —á–∞—Å—Ç–∏)
            elseif part.Size.Magnitude > 50 then
                shouldRemove = true
                reason = "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä"
            end
            
            if shouldRemove then
                table.insert(removedParts, {name = part.Name, reason = reason})
                part:Destroy()
            end
        end
    end
    
    -- –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏
    if #removedParts > 0 then
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ", #removedParts, "–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π:")
        for _, removed in ipairs(removedParts) do
            print("  -", removed.name, "(", removed.reason, ")")
        end
    end
    
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –∫–æ–ø–∏–∏ –µ—Å—Ç—å PrimaryPart
    if not copy.PrimaryPart then
        for _, part in ipairs(copy:GetChildren()) do
            if part:IsA("BasePart") then
                copy.PrimaryPart = part
                print("üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PrimaryPart:", part.Name)
                break
            end
        end
    end
    
    -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–ø–∏—é —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
    if originalModel.PrimaryPart and copy.PrimaryPart then
        local originalPos = originalModel.PrimaryPart.Position
        local offset = Vector3.new(10, 5, 0)  -- –†—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º, –≤—ã—à–µ –∑–µ–º–ª–∏
        
        -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–°–¢–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó RAYCAST!
        -- Raycast –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü—Ä–æ—Å—Ç–æ —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–ø–∏—é —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º!
        
        -- –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥—ë–∂–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        local safeY = math.max(originalPos.Y + 2, 10)  -- –ú–∏–Ω–∏–º—É–º Y=10, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥ –∑–µ–º–ª—ë–π!
        local finalPosition = Vector3.new(
            originalPos.X + offset.X,  -- –†—è–¥–æ–º –ø–æ X
            safeY,                     -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            originalPos.Z + offset.Z   -- –†—è–¥–æ–º –ø–æ Z
        )
        
        print("üö® –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:", originalPos)
        print("üìç –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–ø–∏–∏:", finalPosition)
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
        if finalPosition.Y < 0 then
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞!")
            finalPosition = Vector3.new(finalPosition.X, 15, finalPosition.Z)  -- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –∑–µ–º–ª–∏
        end
        
        copy:SetPrimaryPartCFrame(CFrame.new(finalPosition))
    end
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for _, part in ipairs(copy:GetDescendants()) do
        if part:IsA("BasePart") then
            if part == copy.PrimaryPart then
                part.Anchored = true  -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –∑–∞–∞–Ω–∫–æ—Ä–µ–Ω–∞
            else
                part.Anchored = false  -- –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            end
        end
    end
    
    print("‚úÖ deepCopyModel –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return copy
end

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Attachment —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function fixAttachmentParenting(model)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é Attachment —Å–≤—è–∑–∏...")
    
    local attachments = {}
    local fixedCount = 0
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Attachments
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Attachment") then
            table.insert(attachments, obj)
        end
    end
    
    -- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤—è–∑–∏
    for _, attachment in pairs(attachments) do
        if attachment.Parent and not attachment.Parent:IsA("BasePart") then
            -- –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π BasePart –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            local parent = attachment.Parent
            while parent and not parent:IsA("BasePart") do
                parent = parent.Parent
            end
            
            if parent and parent:IsA("BasePart") then
                attachment.Parent = parent
                fixedCount = fixedCount + 1
            else
                -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ BasePart, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment
                print("‚ö†Ô∏è –£–¥–∞–ª—è—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment:", attachment.Name)
                attachment:Destroy()
            end
        end
    end
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Attachment —Å–≤—è–∑–µ–π:", fixedCount)
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ë–ï–ó HANDLE –ò –°–ï–†–´–• –ö–í–ê–î–†–ê–¢–û–í)
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–î–ê–õ–Ø–ï–ú HANDLE –ò –í–°–ï –°–ï–†–´–ï –ö–í–ê–î–†–ê–¢–´
    local removedParts = 0
    local partsToRemove = {}
    
    for _, part in pairs(copy:GetDescendants()) do
        if part:IsA("BasePart") then
            local shouldRemove = false
            local reason = ""
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏
            if part.Name == "Handle" then
                shouldRemove = true
                reason = "Handle"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ñ–æ—Ä–º–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—É (—Å–µ—Ä—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã) - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è Shape
            elseif part:IsA("Part") and part.Shape == Enum.PartType.Block and part.Material == Enum.Material.Plastic then
                shouldRemove = true
                reason = "—Å–µ—Ä—ã–π –∫–≤–∞–¥—Ä–∞—Ç (Block+Plastic)"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ü–≤–µ—Ç—É (–ª—é–±—ã–µ —Å–µ—Ä—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏)
            elseif part.BrickColor.Name:find("[Gg]rey") or part.BrickColor.Name:find("[Gg]ray") then
                shouldRemove = true
                reason = "—Å–µ—Ä—ã–π —Ü–≤–µ—Ç (" .. part.BrickColor.Name .. ")"
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å Handle)
            elseif part.Size.X > 4 and part.Size.Y > 4 and part.Size.Z > 4 and part.Shape == Enum.PartType.Block then
                shouldRemove = true
                reason = "–±–æ–ª—å—à–æ–π –∫–≤–∞–¥—Ä–∞—Ç (" .. part.Size.X .. "x" .. part.Size.Y .. "x" .. part.Size.Z .. ")"
            end
            
            if shouldRemove then
                table.insert(partsToRemove, {part = part, reason = reason})
            end
        end
    end
    
    -- –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
    for _, item in pairs(partsToRemove) do
        print("üö® –£–¥–∞–ª—è—é:", item.part.Name, "(–ø—Ä–∏—á–∏–Ω–∞:", item.reason, ")")
        item.part:Destroy()
        removedParts = removedParts + 1
    end
    
    if removedParts > 0 then
        print("‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–µ—Ä—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:", removedParts)
    else
        print("üí¨ –°–µ—Ä—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    end
    
    -- üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú PrimaryPart –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø –ß–ê–°–¢–ï–ô
    if not copy.PrimaryPart then
        -- –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —á–∞—Å—Ç—å –¥–ª—è PrimaryPart
        local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
        for _, candidateName in ipairs(rootCandidates) do
            local candidate = copy:FindFirstChild(candidateName)
            if candidate and candidate:IsA("BasePart") then
                copy.PrimaryPart = candidate
                print("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PrimaryPart:", candidate.Name)
                break
            end
        end
        
        -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —á–∞—Å—Ç—å
        if not copy.PrimaryPart then
            for _, part in pairs(copy:GetDescendants()) do
                if part:IsA("BasePart") then
                    copy.PrimaryPart = part
                    print("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PrimaryPart (–∑–∞–ø–∞—Å–Ω–æ–π):", part.Name)
                    break
                end
            end
        end
    end
    
    -- üôà –°–ö–†–´–í–ê–ï–ú –ö–û–ü–ò–Æ –í–û –í–†–ï–ú–Ø –°–û–ó–î–ê–ù–ò–Ø –ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø
    for _, part in pairs(copy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 1  -- –î–µ–ª–∞–µ–º –Ω–µ–≤–∏–¥–∏–º–æ–π
        end
    end
    print("üôà –ö–æ–ø–∏—è —Å–∫—Ä—ã—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
    
    -- üìç –£–õ–£–ß–®–ï–ù–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï –ö–û–ü–ò–ò (–†–Ø–î–û–ú –° –û–†–ò–ì–ò–ù–ê–õ–û–ú)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(10, 5, 0)  -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º Y-—Å–º–µ—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∫–æ–ø–∏—è –Ω–µ –ø–∞–¥–∞–ª–∞ –ø–æ–¥ –∫–∞—Ä—Ç—É
        
        local targetPosition = originalCFrame.Position + offset
        print("üìç –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–ø–∏–∏:", targetPosition)
        print("üìç –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤:", originalCFrame.Position)
        
        -- üîç –£–õ–£–ß–®–ï–ù–ù–´–ô RAYCAST –î–õ–Ø –ü–û–ò–°–ö–ê –ó–ï–ú–õ–ò
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel, player.Character}
        
        -- –ù–∞—á–∏–Ω–∞–µ–º raycast —Å –±–æ–ª—å—à–æ–π –≤—ã—Å–æ—Ç—ã —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –Ω–∞–π—Ç–∏ –∑–µ–º–ª—é
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 200, targetPosition.Z)
        local rayDirection = Vector3.new(0, -400, 0)  -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å raycast
        
        print("üîç Raycast –æ—Ç:", rayOrigin, "–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:", rayDirection)
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y + 2  -- –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ 2 —Å—Ç–∞–¥–∞ –Ω–∞–¥ –∑–µ–º–ª–µ–π
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            
            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–µ–º–ª—è –Ω–∞ –≤—ã—Å–æ—Ç–µ:", raycastResult.Position.Y)
            print("üìç –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–ø–∏–∏:", finalPosition)
            
            -- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (—Å—Ç–æ—è—á–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
            local upVector = Vector3.new(0, 1, 0) -- –°—Ç—Ä–æ–≥–æ –≤–≤–µ—Ä—Ö
            local lookVector = originalCFrame.LookVector
            -- –û–±–Ω—É–ª—è–µ–º Y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á—Ç–æ–±—ã –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–∫–ª–æ–Ω—è–ª—Å—è
            lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
            local newCFrame = CFrame.lookAt(finalPosition, finalPosition + lookVector, upVector)
            
            copy:SetPrimaryPartCFrame(newCFrame)
            print("‚úÖ –ö–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º!")
        else
            -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –±–µ–∑ –∑–µ–º–ª–∏
            local newPosition = originalCFrame.Position + offset
            local upVector = Vector3.new(0, 1, 0)
            local lookVector = Vector3.new(originalCFrame.LookVector.X, 0, originalCFrame.LookVector.Z).Unit
            local newCFrame = CFrame.lookAt(newPosition, newPosition + lookVector, upVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function copyMotorState(originalMotor, copyMotor, scaleFactor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Motor6D
    -- Transform —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ–≥–æ
    local originalTransform = originalMotor.Transform
    local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
    copyMotor.Transform = scaledTransform
    
    -- C0 –∏ C1 - –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–æ–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    local originalC0 = originalMotor.C0
    local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
    copyMotor.C0 = scaledC0
    
    local originalC1 = originalMotor.C1
    local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
    copyMotor.C1 = scaledC1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:", model.Name)
    print("üìç –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:", CONFIG.START_SCALE .. "x (–º–∞–ª–µ–Ω—å–∫–∏–π)")
    print("üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä:", CONFIG.TARGET_SCALE .. "x (–∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª)")
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–ù–ê–ß–ê–õ–ê –£–ú–ï–ù–¨–®–ê–ï–ú –ö–û–ü–ò–Æ, –ü–û–¢–û–ú –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú
    
    -- –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (—ç—Ç–æ –±—É–¥–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä)
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Ü–µ–ª–µ–≤–æ–π)
            cframe = part.CFrame
        }
    end
    
    -- –®–∞–≥ 2: –°–ù–ê–ß–ê–õ–ê —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ø–∏—é –¥–æ START_SCALE (–ú–ì–ù–û–í–ï–ù–ù–û)
    print("üîç –®–∞–≥ 1: –£–º–µ–Ω—å—à–∞—é –∫–æ–ø–∏—é –¥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (" .. CONFIG.START_SCALE .. "x)")
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ START_SCALE
        local startSize = originalSize * CONFIG.START_SCALE
        
        -- –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * CONFIG.START_SCALE) * (relativeCFrame - relativeCFrame.Position)
        local startCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –ú–ì–ù–û–í–ï–ù–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
        part.Size = startSize
        part.CFrame = startCFrame
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!")
    
    -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ–ø–∏—é
    wait(0.5)
    
    -- –®–∞–≥ 3: –¢–µ–ø–µ—Ä—å –ü–õ–ê–í–ù–û —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    print("üöÄ –®–∞–≥ 2: –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (" .. CONFIG.TARGET_SCALE .. "x)")
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ü–õ–ê–í–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –î–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local targetSize = originalData[part].size * CONFIG.TARGET_SCALE  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        local targetCFrame = originalData[part].cframe  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        -- üö® –£–ë–ò–†–ê–ï–ú CFrame –ò–ó –¢–í–ò–ù–ê - –ü–£–°–¢–¨ –ê–ù–ò–ú–ê–¶–ò–Ø –£–ü–†–ê–í–õ–Ø–ï–¢ –ü–û–ó–ò–¶–ò–ï–ô!
        local tween = TweenService:Create(part, tweenInfo, {
            Size = targetSize
            -- CFrame = targetCFrame  -- –û–¢–ö–õ–Æ–ß–ï–ù–û! –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ü–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("üéâ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª!")
                
                -- –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–¢–ê–í–ò–ú –ö–û–ü–ò–Æ –í –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ï –ü–û–õ–û–ñ–ï–ù–ò–ï
                print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å—Ç–∞–≤–ª—é –∫–æ–ø–∏—é –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–µ –ª–µ–∂–∞—á–µ–µ)...")
                
                if model.PrimaryPart then
                    local currentPosition = model.PrimaryPart.Position
                    
                    -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π CFrame
                    -- Y-–æ—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–≤–µ—Ä—Ö (0, 1, 0)
                    -- Z-–æ—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ø–µ—Ä–µ–¥ (0, 0, -1) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    local uprightCFrame = CFrame.new(
                        currentPosition,  -- –ü–æ–∑–∏—Ü–∏—è
                        currentPosition + Vector3.new(0, 0, -1)  -- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                    )
                    
                    -- –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                    model:SetPrimaryPartCFrame(uprightCFrame)
                    
                    print("‚úÖ –ö–æ–ø–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ!")
                    
                    -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π...")
                    
                    local correctedParts = 0
                    for _, part in pairs(model:GetDescendants()) do
                        if part:IsA("BasePart") and part ~= model.PrimaryPart then
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
                            local partCFrame = part.CFrame
                            local upVector = partCFrame.UpVector
                            
                            -- –ï—Å–ª–∏ —á–∞—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–µ –≤–≤–µ—Ä—Ö)
                            if math.abs(upVector.Y) < 0.7 then -- Y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ 1
                                -- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —á–∞—Å—Ç–∏
                                local correctedPartCFrame = CFrame.new(
                                    partCFrame.Position,
                                    partCFrame.Position + Vector3.new(0, 0, -1)
                                )
                                part.CFrame = correctedPartCFrame
                                correctedParts = correctedParts + 1
                            end
                        end
                    end
                    
                    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π:", correctedParts)
                    print("üöÄ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Å—Ç–æ—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else
                    print("‚ö†Ô∏è –ù–µ—Ç PrimaryPart –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
                end
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
    return true
end

-- === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===
-- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ Motor6DIdleForcer.lua

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —á–∏—Å—Ç—ã—Ö idle –ø–æ–∑
local function recordPureIdlePoses(petModel)
    print("\nüé¨ === –ó–ê–ü–ò–°–¨ –ß–ò–°–¢–´–• IDLE –ü–û–ó ===")
    
    local motor6Ds = {}
    local idlePoses = {}
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Motor6D
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motor6Ds, obj)
        end
    end
    
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D:", #motor6Ds)
    
    if #motor6Ds == 0 then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –ù–∞—Ö–æ–¥–∏–º RootPart –∏ —è–∫–æ—Ä–∏–º –¥–ª—è –∑–∞–ø–∏—Å–∏
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    local originalPosition = nil
    
    if rootPart then
        originalPosition = rootPart.Position
        rootPart.Anchored = true
        print("‚öì RootPart –∑–∞—è–∫–æ—Ä–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
    end
    
    -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Animator") then
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                local name = track.Animation.Name:lower()
                if name:find("walk") or name:find("run") or name:find("move") then
                    track:Stop()
                    print("üíÄ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                end
            end
        end
    end
    
    -- –û–ñ–ò–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–•–û–î–ê –ö IDLE
    print("‚è≥ –û–∂–∏–¥–∞—é 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ idle...")
    wait(3) -- –î–∞–µ–º –≤—Ä–µ–º—è –ø–∏—Ç–æ–º—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ (–£–í–ï–õ–ò–ß–ï–ù–û –î–õ–Ø –ü–û–õ–ù–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò)
    local recordingTime = 8 -- 8 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ idle —Ü–∏–∫–ª–∞
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local totalFrames = recordingTime * frameRate
    
    print("üìπ –ó–∞–ø–∏—Å—ã–≤–∞—é –ü–û–õ–ù–£–Æ idle –∞–Ω–∏–º–∞—Ü–∏—é:", recordingTime, "—Å–µ–∫—É–Ω–¥ (", totalFrames, "–∫–∞–¥—Ä–æ–≤)")
    
    local currentFrame = 0
    local startTime = tick()
    
    local recordConnection
    recordConnection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        if elapsed >= frameInterval * currentFrame then
            currentFrame = currentFrame + 1
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑—ã Motor6D
            local framePoses = {}
            for _, motor in pairs(motor6Ds) do
                framePoses[motor.Name] = {
                    C0 = motor.C0,
                    C1 = motor.C1,
                    Transform = motor.Transform
                }
            end
            
            table.insert(idlePoses, framePoses)
            
            if currentFrame >= totalFrames then
                recordConnection:Disconnect()
                print("üìπ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø–∏—Å–∞–Ω–æ –∫–∞–¥—Ä–æ–≤:", #idlePoses)
            end
        end
    end)
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    while #idlePoses < totalFrames and recordConnection.Connected do
        wait(0.1)
    end
    
    return idlePoses, motor6Ds, originalPosition
end

-- –§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ idle
local function forceOnlyIdleAnimation(idlePoses, motor6Ds, petModel, originalPosition)
    print("\nüî• === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û IDLE ===")
    
    if not idlePoses or #idlePoses == 0 then
        print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö idle –ø–æ–∑!")
        return nil
    end
    
    local humanoid = petModel:FindFirstChild("Humanoid")
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    
    local currentFrame = 1
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local lastFrameTime = tick()
    
    local forceConnection
    forceConnection = RunService.Heartbeat:Connect(function()
        local now = tick()
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid.JumpPower = 0
            humanoid.PlatformStand = true
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        if rootPart and originalPosition then
            if rootPart.Position ~= originalPosition then
                rootPart.Position = originalPosition
                print("üîÑ –ü–∏—Ç–æ–º–µ—Ü —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ")
            end
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º walking –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        for _, obj in pairs(petModel:GetDescendants()) do
            if obj:IsA("Animator") then
                local tracks = obj:GetPlayingAnimationTracks()
                for _, track in pairs(tracks) do
                    local name = track.Animation.Name:lower()
                    if name:find("walk") or name:find("run") or name:find("move") then
                        track:Stop()
                        print("üíÄ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                    end
                end
            end
        end
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã
        if now - lastFrameTime >= frameInterval then
            lastFrameTime = now
            
            local framePoses = idlePoses[currentFrame]
            
            if framePoses then
                -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã –∫–æ –≤—Å–µ–º Motor6D
                for _, motor in pairs(motor6Ds) do
                    local pose = framePoses[motor.Name]
                    if pose then
                        pcall(function()
                            motor.C0 = pose.C0
                            motor.C1 = pose.C1
                            motor.Transform = pose.Transform
                        end)
                    end
                end
            end
            
            -- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É —Å –ü–õ–ê–í–ù–´–ú –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
            currentFrame = currentFrame + 1
            if currentFrame > #idlePoses then
                currentFrame = 1  -- –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º idle
                print("üîÑ –ü–æ–ª–Ω—ã–π idle —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ")
            end
        end
    end)
    
    print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üî• –ü–∏—Ç–æ–º–µ—Ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¢–û–õ–¨–ö–û idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    print("üíÄ –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏ —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä!")
    
    return forceConnection
end

-- LIVE CFRAME ANIMATION SYSTEM (CLEAN VERSION)
local function startEndlessIdleLoop(originalModel, copyModel)
    print("\nüîÑ === LIVE CFRAME ANIMATION SYSTEM ===\n")
    
    -- üé≠ CFrame –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    local handPetModel = nil
    local handPetParts = {}  -- –ê–Ω–∏–º–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏ –∏–∑ Tool
    local lastHandPetCheck = 0
    local HAND_PET_CHECK_INTERVAL = 1.0  -- –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
    
    -- üìç –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø –ö–û–ü–ò–ò
    local copyFixedPosition = nil
    local copyPositionSet = false
    
    -- üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CFrame —Å–∏—Å—Ç–µ–º—ã
    local INTERPOLATION_SPEED = 0.3
    
    print("üì° –ó–ê–ü–£–°–ö–ê–Æ LIVE CFRAME –ê–ù–ò–ú–ê–¶–ò–Æ!")
    print("üé¨ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ")
    print("üîÑ –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –í–°–ï –¥–≤–∏–∂–µ–Ω–∏—è!")
    
    local connection = RunService.Heartbeat:Connect(function()
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not originalModel.Parent or not copyModel.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º—É")
            connection:Disconnect()
            return
        end
        
        local currentTime = tick()
        
        -- === üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===
        if currentTime - lastHandPetCheck >= HAND_PET_CHECK_INTERVAL then
            -- –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
            local foundPetModel = nil
            local foundTool = nil
            
            local playerChar = player.Character
            if playerChar then
                for _, tool in pairs(playerChar:GetChildren()) do
                    if tool:IsA("Tool") then
                        for _, child in pairs(tool:GetDescendants()) do
                            if child:IsA("Model") and child.Name ~= "Handle" then
                                local parts = {}
                                for _, part in ipairs(child:GetDescendants()) do
                                    if part:IsA("BasePart") and part.Name ~= "Handle" then
                                        table.insert(parts, part)
                                    end
                                end
                                if #parts > 3 then
                                    foundPetModel = child
                                    foundTool = tool
                                    break
                                end
                            end
                        end
                        if foundPetModel then break end
                    end
                end
            end
            
            if foundPetModel ~= handPetModel then
                handPetModel = foundPetModel
                -- –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∏–º–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏
                handPetParts = {}
                if handPetModel then
                    for _, part in ipairs(handPetModel:GetDescendants()) do
                        if part:IsA("BasePart") and part.Name ~= "Handle" then
                            table.insert(handPetParts, part)
                        end
                    end
                end
                
                if handPetModel then
                    print("üéØ –ù–ê–®–õ–ò –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï:", foundTool and foundTool.Name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                    print("üì¶ –ê–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π:", #handPetParts)
                else
                    print("‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    handPetParts = {}
                end
            end
            
            lastHandPetCheck = currentTime
        end
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º CFrame –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ
        if handPetModel and #handPetParts > 0 then
            -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ü–ï–†–ï–ó–ê–ü–ò–°–´–í–ê–ï–ú –ü–û–ó–ò–¶–ò–Æ!
            -- –ü–æ–∑–∏—Ü–∏—è –∫–æ–ø–∏–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ deepCopyModel!
            -- –¢–æ–ª—å–∫–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏, –ù–û –ù–ï –ú–ï–ù–Ø–ï–ú –ï–Å!
            if not copyPositionSet and copyModel and copyModel.PrimaryPart then
                copyFixedPosition = copyModel.PrimaryPart.Position  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–ï–ö–£–©–£–Æ –ø–æ–∑–∏—Ü–∏—é –∫–æ–ø–∏–∏
                copyPositionSet = true
                print("üìç –ó–∞–ø–æ–º–Ω–∏–ª —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫–æ–ø–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏:", copyFixedPosition)
            end
            
            -- –ü—Ä–∏–º–µ–Ω—è–µ–º CFrame –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º
            for _, handPart in ipairs(handPetParts) do
                if handPart and handPart.Parent then
                    -- –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å –≤ –∫–æ–ø–∏–∏
                    local copyPart = nil
                    for _, part in ipairs(copyModel:GetDescendants()) do
                        if part:IsA("BasePart") and part.Name == handPart.Name then
                            copyPart = part
                            break
                        end
                    end
                    
                    if copyPart and copyPart.Parent and not copyPart.Anchored then
                        local handCFrame = handPart.CFrame
                        
                        -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ü–ï–†–ï–ú–ï–©–ê–ï–ú –ö–û–†–ù–ï–í–´–ï –ß–ê–°–¢–ò!
                        local isRootPart = (copyPart.Name == "RootPart" or copyPart.Name == "Torso" or copyPart.Name == "HumanoidRootPart")
                        
                        if isRootPart then
                            -- –ö–æ—Ä–Ω–µ–≤—ã–µ —á–∞—Å—Ç–∏ –û–°–¢–ê–Æ–¢–°–Ø –ù–ê –ú–ï–°–¢–ï! –¢–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç
                            local currentPos = copyPart.Position  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                            local rotationOnly = handCFrame - handCFrame.Position  -- –¢–æ–ª—å–∫–æ –ø–æ–≤–æ—Ä–æ—Ç
                            local newCFrame = CFrame.new(currentPos) * rotationOnly
                            copyPart.CFrame = copyPart.CFrame:Lerp(newCFrame, INTERPOLATION_SPEED)
                        else
                            -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –ü–ï–†–ï–ú–ï–©–ê–ï–ú –û–ë–´–ß–ù–´–ï –ß–ê–°–¢–ò!
                            -- –û–±—ã—á–Ω—ã–µ —á–∞—Å—Ç–∏ —Ç–æ–∂–µ –û–°–¢–ê–Æ–¢–°–Ø –ù–ê –ú–ï–°–¢–ï! –¢–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç!
                            local currentPos = copyPart.Position  -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                            local rotationOnly = handCFrame - handCFrame.Position  -- –¢–æ–ª—å–∫–æ –ø–æ–≤–æ—Ä–æ—Ç
                            local newCFrame = CFrame.new(currentPos) * rotationOnly
                            copyPart.CFrame = copyPart.CFrame:Lerp(newCFrame, INTERPOLATION_SPEED)
                            
                            -- –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –ù–ï –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                            if math.abs(copyPart.Position.Y - currentPos.Y) > 0.1 then
                                print("‚ùå –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ß–∞—Å—Ç—å", copyPart.Name, "–∏–∑–º–µ–Ω–∏–ª–∞ Y –ø–æ–∑–∏—Ü–∏—é!")
                                print("  –ë—ã–ª–æ:", currentPos.Y, "–°—Ç–∞–ª–æ:", copyPart.Position.Y)
                            end
                        end
                    end
                end
            end
            
            -- üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–ü–ò–ò
            local copyPartsCount = 0
            local validCopyParts = 0
            local anchoredParts = 0
            
            for _, part in ipairs(copyModel:GetDescendants()) do
                if part:IsA("BasePart") then
                    copyPartsCount = copyPartsCount + 1
                    if part.Parent then
                        validCopyParts = validCopyParts + 1
                        if part.Anchored then
                            anchoredParts = anchoredParts + 1
                        end
                    end
                end
            end
            -- üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            if math.floor(currentTime) % 3 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("üìê LIVE CFrame –ö–û–ü–ò–†–û–í–ê–ù–ò–ï: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", #handPetParts, "CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                print(string.format("üîç –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ü–ò–ò: %d/%d —á–∞—Å—Ç–µ–π –≤–∞–ª–∏–¥–Ω—ã, %d –∑–∞—è–∫–æ—Ä–µ–Ω–æ", validCopyParts, copyPartsCount, anchoredParts))
                print("üé≠ –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï: CFrame –∞–Ω–∏–º–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞")
                
                -- üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ü–û–¢–ï–†–ï –ß–ê–°–¢–ï–ô
                if validCopyParts < copyPartsCount * 0.8 then
                    print(string.format("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ø–∏—è —Ç–µ—Ä—è–µ—Ç —á–∞—Å—Ç–∏! %d –∏–∑ %d —á–∞—Å—Ç–µ–π –ø–æ—Ç–µ—Ä—è–Ω—ã!", 
                        copyPartsCount - validCopyParts, copyPartsCount))
                end
            end
        else
            -- –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é idle –ø–æ–∑—É
            if math.floor(currentTime) % 5 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∫–æ–ø–∏—è –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –ø–æ–∑–µ")
            end
        end
    end)
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è
local function smartAnchoredManagement(copyParts)
    print("üîç –ü–†–û–í–ï–†–ö–ê ANCHORED –°–û–°–¢–û–Ø–ù–ò–ô –ö–û–ü–ò–ò:")
    local anchoredCount = 0
    local rootPart = nil
    
    -- –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é —á–∞—Å—Ç—å
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    -- –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        end
        if part.Anchored then
            anchoredCount = anchoredCount + 1
        end
    end
    
    print("‚öôÔ∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart and rootPart.Name or "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    print("‚öì Anchored —á–∞—Å—Ç–µ–π:", anchoredCount, "/", #copyParts)
    
    print("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø IDLE –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
    print("üìç –ö–æ–ø–∏—è –±—É–¥–µ—Ç –í–°–ï–ì–î–ê –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ idle –∞–Ω–∏–º–∞—Ü–∏—é!")
    print("üî• –ù–∏–∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ö–æ–¥—å–±–µ!")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –¢–í–û–ò–• –ø–∏—Ç–æ–º—Ü–µ–≤ (—Ä—è–¥–æ–º + –≤ —Ä—É–∫–µ)...")
    
    local foundPets = {}
    
    -- üîç –ü–û–ò–°–ö 1: –ü–ò–¢–û–ú–¶–´ –†–Ø–î–û–ú –° –ò–ì–†–û–ö–û–ú (–≤ –º–∞–ª–æ–º —Ä–∞–¥–∏—É—Å–µ)
    print("üìç –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π...")
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= 50 then -- –ú–ê–õ–´–ô —Ä–∞–¥–∏—É—Å - —Ç–æ–ª—å–∫–æ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π
                    
                    -- üîí –§–ò–õ–¨–¢–†–´ –î–õ–Ø –¢–í–û–ò–• –ü–ò–¢–û–ú–¶–ï–í (–ù–ï –ß–£–ñ–ò–•!)
                    local isPet = false
                    local reason = ""
                    
                    -- –§–∏–ª—å—Ç—Ä 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –ø–∏—Ç–æ–º–µ—Ü –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                    local isNearOtherPlayer = false
                    for _, otherPlayer in pairs(Players:GetPlayers()) do
                        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local otherPlayerPos = otherPlayer.Character.HumanoidRootPart.Position
                            local distanceToOtherPlayer = (modelCFrame.Position - otherPlayerPos).Magnitude
                            if distanceToOtherPlayer < 30 then -- –ï—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
                                isNearOtherPlayer = true
                                break
                            end
                        end
                    end
                    
                    if not isNearOtherPlayer then
                        -- –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–∏—Ç–æ–º–µ—Ü –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                    
                    -- üéØ –¢–û–õ–¨–ö–û UUID –í –ò–ú–ï–ù–ò - –ù–ò–ö–ê–ö–ò–• –î–†–£–ì–ò–• –ö–†–ò–¢–ï–†–ò–ï–í!
                    if obj.Name:find("%{") and obj.Name:find("%}") then
                        isPet = true
                        reason = "UUID –≤ –∏–º–µ–Ω–∏"
                        print("üîç –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü —Å UUID:", obj.Name)
                    else
                        isPet = false
                        reason = "–ù–µ—Ç UUID"
                    end
                    
                    if isPet then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            reason = reason,
                            source = "workspace"
                        })
                        print("‚úÖ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ Workspace:", obj.Name, "(–ø—Ä–∏—á–∏–Ω–∞:", reason, ")")
                    end
                    
                    end -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ if not isNearOtherPlayer then
                end
            end
        end
    end
    
    -- üîç –ü–û–ò–°–ö 2: –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï (Tool)
    print("üéí –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ç–≤–æ–µ–π —Ä—É–∫–µ...")
    
    if playerChar then
        -- –ü–æ–∏—Å–∫ Tool –≤ —Ä—É–∫–∞—Ö
        for _, tool in pairs(playerChar:GetChildren()) do
            if tool:IsA("Tool") then
                -- üéØ –ò–©–ï–ú –õ–Æ–ë–£–Æ –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê, –ò–°–ö–õ–Æ–ß–ê–ï–ú –¢–û–õ–¨–ö–û HANDLE
                for _, child in pairs(tool:GetChildren()) do
                    if child:IsA("Model") and child.Name ~= "Handle" then
                        local partCount = 0
                        for _, part in pairs(child:GetDescendants()) do
                            if part:IsA("BasePart") then
                                partCount = partCount + 1
                            end
                        end
                        
                        if partCount >= 3 then -- –ú–∏–Ω–∏–º—É–º 3 —á–∞—Å—Ç–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞
                            -- üéØ –ö–û–ü–ò–†–£–ï–ú –¢–û–õ–¨–ö–û –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê (–ë–ï–ó HANDLE)
                            table.insert(foundPets, {
                                model = child, -- –¢–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ (Dog), –ù–ï –≤–µ—Å—å Tool
                                distance = 0,
                                reason = "–ú–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ Tool (" .. partCount .. " —á–∞—Å—Ç–µ–π)",
                                source = "tool"
                            })
                            print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤ Tool:", child.Name, "(" .. partCount .. " —á–∞—Å—Ç–µ–π)")
                            print("üö´ Handle –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!")
                        end
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–û–†–ò–¢–ï–¢ WORKSPACE –ü–ò–¢–û–ú–¶–ê–ú!
    -- –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–ª—è—Ç—å—Å—è —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º –≤ Workspace!
    local targetPet = nil
    
    -- 1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü–∏—Ç–æ–º–µ—Ü –≤ Workspace (–ù–ï –≤ —Ä—É–∫–µ!)
    for _, pet in pairs(foundPets) do
        if pet.source == "workspace" and pet.reason:find("UUID") then
            targetPet = pet
            print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü —Å UUID –≤ Workspace (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1):", pet.model.Name)
            break
        end
    end
    
    -- 2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: –õ—é–±–æ–π –ø–∏—Ç–æ–º–µ—Ü –≤ Workspace (–Ω–µ Egg)
    if not targetPet then
        for _, pet in pairs(foundPets) do
            if pet.source == "workspace" and not pet.model.Name:find("Egg") and not pet.model.Name:find("egg") then
                targetPet = pet
                print("üéØ –í—ã–±—Ä–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –≤ Workspace (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2):", pet.model.Name)
                break
            end
        end
    end
    
    -- 3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ (–¢–û–õ–¨–ö–û –ï–°–õ–ò –ù–ï–¢ –í Workspace!)
    if not targetPet then
        for _, pet in pairs(foundPets) do
            if pet.source == "tool" then
                targetPet = pet
                print("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 - –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π):", pet.model.Name)
                print("üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ö–æ–ø–∏—è –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä—É–∫–µ!")
                break
            end
        end
    end
    
    -- 3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –õ—é–±–æ–π –æ—Å—Ç–∞–ª—å–Ω–æ–π –ø–∏—Ç–æ–º–µ—Ü (–Ω–µ Egg)
    if not targetPet then
        for _, pet in pairs(foundPets) do
            if not pet.model.Name:find("Egg") and not pet.model.Name:find("egg") then
                targetPet = pet
                print("üéØ –í—ã–±—Ä–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3):", pet.model.Name)
                break
            end
        end
    end
    
    -- 4. –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π: –õ—é–±–æ–π –æ–±—ä–µ–∫—Ç
    if not targetPet then
        targetPet = foundPets[1]
        print("üéØ –í—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4):", targetPet.model.Name)
    end
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –®–∞–≥ 3: –°–ù–ê–ß–ê–õ–ê –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï ===")
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.TARGET_SCALE, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –®–∞–≥ 4: –ü–û–°–õ–ï –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
    wait(CONFIG.TWEEN_TIME + 1) -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    
    -- üéØ –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –¢–û–ß–ù–û–ô –û–†–ò–ï–ù–¢–ê–¶–ò–ò –û–†–ò–ì–ò–ù–ê–õ–ê
    print("\nüéØ === –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –û–†–ò–ï–ù–¢–ê–¶–ò–ò –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    print("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–∫–∞–∑–∞–ª: UpVector –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ = (0, 0, -1)")
    print("üìä –ö–æ–ø–∏—Ä—É–µ–º –¢–û–ß–ù–£–Æ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!")
    
    if petCopy.PrimaryPart and petModel and petModel.PrimaryPart then
        local copyRootPart = petCopy.PrimaryPart
        local originalRootPart = petModel.PrimaryPart
        
        local currentPos = copyRootPart.Position
        local originalCFrame = originalRootPart.CFrame
        
        print("üìä –î–û –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:")
        print("   –ö–æ–ø–∏—è –ø–æ–∑–∏—Ü–∏—è:", currentPos)
        print("   –ö–æ–ø–∏—è UpVector:", copyRootPart.CFrame.UpVector)
        print("üìä –û–†–ò–ì–ò–ù–ê–õ (—ç—Ç–∞–ª–æ–Ω):")
        print("   –û—Ä–∏–≥–∏–Ω–∞–ª –ø–æ–∑–∏—Ü–∏—è:", originalCFrame.Position)
        print("   –û—Ä–∏–≥–∏–Ω–∞–ª UpVector:", originalCFrame.UpVector)
        print("   –û—Ä–∏–≥–∏–Ω–∞–ª LookVector:", originalCFrame.LookVector)
        
        -- –≠–¢–ê–ü 1: –ü–û–î–ù–ò–ú–ê–ï–ú –ù–ê –ü–†–ê–í–ò–õ–¨–ù–£–Æ –í–´–°–û–¢–£
        local correctedPosition = Vector3.new(
            currentPos.X,
            currentPos.Y + 1.33,  -- –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–∞–∫ Roblox
            currentPos.Z
        )
        
        -- –≠–¢–ê–ü 2: –ö–û–ü–ò–†–£–ï–ú –¢–û–ß–ù–£–Æ –û–†–ò–ï–ù–¢–ê–¶–ò–Æ –û–†–ò–ì–ò–ù–ê–õ–ê
        -- –ë–µ—Ä–µ–º UpVector –∏ LookVector –ø—Ä—è–º–æ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!
        local exactCFrame = CFrame.lookAt(
            correctedPosition,
            correctedPosition + originalCFrame.LookVector,  -- –¢–æ—á–Ω—ã–π LookVector
            originalCFrame.UpVector  -- –¢–æ—á–Ω—ã–π UpVector (0, 0, -1)
        )
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        copyRootPart.CFrame = exactCFrame
        
        print("\n‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–û –¢–û–ß–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï CFrame!")
        print("üìä –ü–æ–¥–Ω—è—Ç–æ –Ω–∞ +1.33 —Å—Ç–∞–¥–∞")
        print("ü¶¥ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        
        -- üîç –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
        wait(0.1)  -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        local immediateCheck = copyRootPart.CFrame
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –°–†–ê–ó–£ –ü–û–°–õ–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø:")
        print("   –ö–æ–ø–∏—è UpVector:", immediateCheck.UpVector)
        print("   –ö–æ–ø–∏—è LookVector:", immediateCheck.LookVector)
        print("   –ö–æ–ø–∏—è –ø–æ–∑–∏—Ü–∏—è:", immediateCheck.Position)
        
        -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        local currentOriginal = originalRootPart.CFrame
        print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–û–ú:")
        print("   –û—Ä–∏–≥–∏–Ω–∞–ª UpVector:", currentOriginal.UpVector)
        print("   –ö–æ–ø–∏—è UpVector:   ", immediateCheck.UpVector)
        print("   –°–û–í–ü–ê–î–ê–Æ–¢?", 
            math.abs(currentOriginal.UpVector.X - immediateCheck.UpVector.X) < 0.01 and
            math.abs(currentOriginal.UpVector.Y - immediateCheck.UpVector.Y) < 0.01 and
            math.abs(currentOriginal.UpVector.Z - immediateCheck.UpVector.Z) < 0.01)
        
        -- üïê –û–¢–õ–û–ñ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (—á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã)
        spawn(function()
            wait(2)
            if copyRootPart and copyRootPart.Parent then
                local delayedCheck = copyRootPart.CFrame
                print("\n‚è∞ –ü–†–û–í–ï–†–ö–ê –ß–ï–†–ï–ó 2 –°–ï–ö–£–ù–î–´:")
                print("   –ö–æ–ø–∏—è UpVector:", delayedCheck.UpVector)
                print("   –ö–æ–ø–∏—è LookVector:", delayedCheck.LookVector)
                print("   –ö–æ–ø–∏—è –ø–æ–∑–∏—Ü–∏—è:", delayedCheck.Position)
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏
                local upVectorChanged = 
                    math.abs(immediateCheck.UpVector.X - delayedCheck.UpVector.X) > 0.01 or
                    math.abs(immediateCheck.UpVector.Y - delayedCheck.UpVector.Y) > 0.01 or
                    math.abs(immediateCheck.UpVector.Z - delayedCheck.UpVector.Z) > 0.01
                
                if upVectorChanged then
                    print("‚ö†Ô∏è –û–†–ò–ï–ù–¢–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ò–õ–ê–°–¨! –ß—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç CFrame!")
                    print("üé≠ –í–æ–∑–º–æ–∂–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–ø—Ç")
                else
                    print("‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º")
                    print("ü§î –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                end
            end
        end)
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        local newPos = copyRootPart.Position
        local newUpVector = copyRootPart.CFrame.UpVector
        local newLookVector = copyRootPart.CFrame.LookVector
        
        print("\nüìä –ü–û–°–õ–ï –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏:")
        print("   –ü–æ–∑–∏—Ü–∏—è:", newPos)
        print("   UpVector:", newUpVector)
        print("   LookVector:", newLookVector)
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        local heightDifference = newPos.Y - currentPos.Y
        local isUpright = math.abs(newUpVector.Y - 1.0) < 0.1
        
        if math.abs(heightDifference - 1.33) < 0.1 and isUpright then
            print("\nüéâ –ò–î–ï–ê–õ–¨–ù–û! –ü–∏—Ç–æ–º–µ—Ü –ø–æ–¥–Ω—è—Ç –∏ —Å—Ç–æ–∏—Ç –Ω–∞ –ª–∞–ø–∞—Ö!")
            print("‚úÖ –í—ã—Å–æ—Ç–∞: +", string.format("%.2f", heightDifference), "—Å—Ç–∞–¥–æ–≤")
            print("‚úÖ UpVector.Y =", string.format("%.2f", newUpVector.Y), "(–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1.0)")
            print("üêï –ü–∏—Ç–æ–º–µ—Ü —Ç–µ–ø–µ—Ä—å —Å—Ç–æ–∏—Ç –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª!")
        else
            print("\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
            print("üìä –í—ã—Å–æ—Ç–∞: +", heightDifference, "—Å—Ç–∞–¥–æ–≤")
            print("üìä UpVector.Y =", newUpVector.Y, "(–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~1.0)")
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ UpVector –æ—Å—Ç–∞–ª—Å—è –∫–∞–∫ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        if math.abs(newUpVector.Y) < 0.1 and math.abs(newUpVector.Z + 1) < 0.1 then
            print("‚úÖ UpVector –æ—Å—Ç–∞–ª—Å—è –∫–∞–∫ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (-0.00,-0.00,-1.00)")
        else
            print("‚ö†Ô∏è UpVector –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        end
        
        print("üöÄ –ù–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è Roblox –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!")
        print("üéØ –ü–∏—Ç–æ–º–µ—Ü —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –Ω–∞ –∑–µ–º–ª–µ –ö–ê–ö –û–†–ò–ì–ò–ù–ê–õ!")
    else
        print("‚ùå –ù–µ—Ç PrimaryPart —É –∫–æ–ø–∏–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏!")
    end
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- üëÅÔ∏è –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–û–ü–ò–Æ –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ê–ù–ò–ú–ê–¶–ò–ò
    print("üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—É—é –∫–æ–ø–∏—é...")
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Transparency = 0  -- –î–µ–ª–∞–µ–º –≤–∏–¥–∏–º–æ–π
        end
    end
    
    -- –®–∞–≥ 5: –ó–ê–ü–£–°–ö –ë–ï–°–ö–û–ù–ï–ß–ù–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ë–ï–°–ö–û–ù–ï–ß–ù–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===")
    local endlessConnection = startEndlessIdleLoop(petModel, petCopy)
    
    if endlessConnection then
        print("üéâ === –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è idle –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        print("üìç –ö–æ–ø–∏—è –ë–ï–°–ö–û–ù–ï–ß–ù–û –∏–≥—Ä–∞–µ—Ç idle –∞–Ω–∏–º–∞—Ü–∏—é")
        print("üöÄ –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–º–∏—Ä–∞–µ—Ç - –ø–ª–∞–≤–Ω—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª!")
        print("üî• –ö–æ–ø–∏—è –≤—Å–µ–≥–¥–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ - –∫–∞–∫ –∂–∏–≤–∞—è!")
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ idle –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Motor6D –∏–ª–∏ Humanoid")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
