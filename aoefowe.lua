-- üé≠ PET ANIMATION RESTORER - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∫–æ–ø–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

print("üé≠ === PET ANIMATION RESTORER ===")
print("=" .. string.rep("=", 50))

-- –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
local function restoreAnimationOnCopy(originalModel, copyModel)
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –∫–æ–ø–∏–∏...")
    print("  –û—Ä–∏–≥–∏–Ω–∞–ª:", originalModel.Name)
    print("  –ö–æ–ø–∏—è:", copyModel.Name)
    
    -- 1. –ù–∞—Ö–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    local originalAnimator = nil
    local originalAnimController = nil
    local activeAnimations = {}
    
    for _, obj in pairs(originalModel:GetDescendants()) do
        if obj:IsA("Animator") then
            originalAnimator = obj
            -- –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in ipairs(tracks) do
                if track.IsPlaying then
                    table.insert(activeAnimations, {
                        animationId = track.Animation.AnimationId,
                        speed = track.Speed,
                        weight = track.WeightCurrent,
                        looped = track.Looped,
                        priority = track.Priority
                    })
                    print("  üìπ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.AnimationId)
                end
            end
        elseif obj:IsA("AnimationController") then
            originalAnimController = obj
        end
    end
    
    -- 2. –ù–∞—Ö–æ–¥–∏–º –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –∫–æ–ø–∏–∏
    local copyAnimator = nil
    local copyAnimController = nil
    
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("Animator") then
            copyAnimator = obj
        elseif obj:IsA("AnimationController") then
            copyAnimController = obj
        end
    end
    
    if not copyAnimator or not copyAnimController then
        print("‚ùå –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–ø–∏–∏!")
        return false
    end
    
    -- 3. –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∏–º–∞–µ–º Anchored —Å –í–°–ï–• —á–∞—Å—Ç–µ–π –∫–æ–ø–∏–∏ —á—Ç–æ–±—ã Motor6D —Ä–∞–±–æ—Ç–∞–ª–∏
    print("üîì –°–Ω–∏–º–∞—é Anchored —Å–æ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∫–æ–ø–∏–∏...")
    local unanchoredCount = 0
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("BasePart") then
            obj.Anchored = false
            unanchoredCount = unanchoredCount + 1
        end
    end
    print("  ‚úÖ –°–Ω—è—Ç Anchored —Å", unanchoredCount, "—á–∞—Å—Ç–µ–π")
    
    -- 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏
    print("üé¨ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –∫–æ–ø–∏–∏...")
    for i, animData in ipairs(activeAnimations) do
        -- –°–æ–∑–¥–∞–µ–º Animation –æ–±—ä–µ–∫—Ç
        local animation = Instance.new("Animation")
        animation.AnimationId = animData.animationId
        
        -- –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ Animator –∫–æ–ø–∏–∏
        local animTrack = copyAnimator:LoadAnimation(animation)
        
        -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ —É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        animTrack.Looped = animData.looped
        animTrack.Priority = animData.priority
        
        -- –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animTrack:Play()
        animTrack:AdjustSpeed(animData.speed)
        animTrack:AdjustWeight(animData.weight)
        
        print("  ‚úÖ [" .. i .. "] –ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è:", animData.animationId)
        print("    Speed:", animData.speed)
        print("    Weight:", animData.weight)
        print("    Looped:", animData.looped)
    end
    
    -- 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Motor6D —Ä–∞–±–æ—Ç–∞—é—Ç
    print("üîß –ü—Ä–æ–≤–µ—Ä—è—é Motor6D –≤ –∫–æ–ø–∏–∏...")
    local motor6DCount = 0
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            motor6DCount = motor6DCount + 1
            if obj.Part0 and obj.Part1 then
                print("  ‚úÖ Motor6D:", obj.Name, "(" .. obj.Part0.Name .. " -> " .. obj.Part1.Name .. ")")
            end
        end
    end
    print("  üìä –í—Å–µ–≥–æ Motor6D:", motor6DCount)
    
    print("üéâ –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–ø–∏–∏!")
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –∫–æ–ø–∏–∏
local function findOriginalAndCopy()
    local original = nil
    local copy = nil
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            if obj.Name:find("_SCALED_COPY") then
                copy = obj
                print("üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ø–∏—è:", obj.Name)
            else
                original = obj
                print("üéØ –ù–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª:", obj.Name)
            end
        end
    end
    
    return original, copy
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local original, copy = findOriginalAndCopy()
    
    if not original then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    if not copy then
        print("‚ùå –ö–æ–ø–∏—è –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ø–∏—é —á–µ—Ä–µ–∑ PetScaler")
        return
    end
    
    -- –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    local success = restoreAnimationOnCopy(original, copy)
    
    if success then
        print("‚úÖ –ê–ù–ò–ú–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!")
        print("üé≠ –ö–æ–ø–∏—è –ø–∏—Ç–æ–º—Ü–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
    else
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é")
    end
    
    print("=" .. string.rep("=", 50))
end

-- –ó–∞–ø—É—Å–∫
main()
