-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–£–õ–£–ß–®–ï–ù–ù–ê–Ø: —Ä–æ—Å—Ç —Å 0.3 –¥–æ 1.0)
local CONFIG = {
    SEARCH_RADIUS = 100,
    INITIAL_SCALE = 0.3,  -- üî• –ù–æ–≤–æ–µ: –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–∞–ª–µ–Ω—å–∫–∏–π)
    FINAL_SCALE = 1.0,    -- üî• –ù–æ–≤–æ–µ: —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
    TWEEN_TIME = 3.0,
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üå± –ü–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç: —Å", CONFIG.INITIAL_SCALE, "–¥–æ", CONFIG.FINAL_SCALE)
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–õ–Ø DRAGONFLY!)
local function hasPetVisuals(model)
    local meshCount = 0
    local basepartCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("BasePart") and obj.Name ~= "Handle" then
            -- üî• –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ DRAGONFLY —Å BasePart (–Ω–µ Handle)
            basepartCount = basepartCount + 1
            
            -- –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ Dragonfly —á–∞—Å—Ç—è–º
            local isDragonflyPart = string.find(obj.Name:lower(), "wing") or 
                                  string.find(obj.Name:lower(), "tail") or 
                                  string.find(obj.Name:lower(), "leg") or 
                                  string.find(obj.Name:lower(), "body") or 
                                  string.find(obj.Name:lower(), "head") or 
                                  string.find(obj.Name:lower(), "bug")
            
            if isDragonflyPart then
                local partData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    type = "DragonflyPart"
                }
                table.insert(petMeshes, partData)
            end
        end
    end
    
    -- üî• –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ —Å MeshPart –ò–õ–ò BasePart!
    local hasVisuals = meshCount > 0 or basepartCount > 0
    
    if basepartCount > 0 and meshCount == 0 then
        print("üêâ –ù–∞–π–¥–µ–Ω Dragonfly-—Ç–∏–ø –ø–∏—Ç–æ–º–µ—Ü —Å BasePart (–±–µ–∑ MeshPart): " .. basepartCount .. " —á–∞—Å—Ç–µ–π")
    end
    
    return hasVisuals, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
-- –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–æ–ø–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ eggPetModel, scale –±–µ—Ä–µ—Ç—Å—è –∏–∑ eggPetModel, offset –∏ tween —É–±—Ä–∞–Ω—ã
local function deepCopyModel(originalModel, eggPetModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace

    -- –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –∏–∑ eggPetModel
    if eggPetModel and eggPetModel.PrimaryPart and copy.PrimaryPart then
        local eggCFrame = eggPetModel.PrimaryPart.CFrame
        copy:SetPrimaryPartCFrame(eggCFrame)
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ —è–π—Ü–∞")
    elseif eggPetModel and eggPetModel:FindFirstChild("RootPart") and copy:FindFirstChild("RootPart") then
        copy.RootPart.CFrame = eggPetModel.RootPart.CFrame
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –ø–æ RootPart —è–π—Ü–∞")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é, fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É")
        if originalModel.PrimaryPart and copy.PrimaryPart then
            copy:SetPrimaryPartCFrame(originalModel.PrimaryPart.CFrame)
        end
    end

    -- –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ eggPetModel
    if eggPetModel and copy then
        for _, part in ipairs(copy:GetDescendants()) do
            if part:IsA("BasePart") then
                local eggPart = eggPetModel:FindFirstChild(part.Name)
                if eggPart and eggPart:IsA("BasePart") then
                    part.Size = eggPart.Size
                    if part:FindFirstChild("SpecialMesh") and eggPart:FindFirstChild("SpecialMesh") then
                        part.SpecialMesh.Scale = eggPart.SpecialMesh.Scale
                    end
                end
            end
        end
        print("üìè –ú–∞—Å—à—Ç–∞–± –∫–æ–ø–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —É —è–π—Ü–∞")
    end

    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end
-- –ó–∞–¥–µ–ª: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ (–±–µ–∑ idle)

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø: —Ä–æ—Å—Ç —Å 0.3 –¥–æ 1.0)
local function scaleModelSmoothly(model)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω—ã–π —Ä–æ—Å—Ç –º–æ–¥–µ–ª–∏:", model.Name)
    print("üìä –†–æ—Å—Ç —Å", CONFIG.INITIAL_SCALE, "–¥–æ", CONFIG.FINAL_SCALE, "–∑–∞", CONFIG.TWEEN_TIME, "—Å–µ–∫")
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            originalSize = part.Size,  -- üî• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (1.0)
            originalCFrame = part.CFrame -- üî• –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (1.0)
        }
    end
    
    -- üî• –®–ê–ì 1: –°–ù–ê–ß–ê–õ–ê –£–ú–ï–ù–¨–®–ê–ï–ú –î–û 0.3 (–ú–ì–ù–û–í–ï–ù–ù–û!)
    print("üîΩ –®–∞–≥ 1: –£–º–µ–Ω—å—à–∞—é –¥–æ", CONFIG.INITIAL_SCALE, "(–º–≥–Ω–æ–≤–µ–Ω–Ω–æ)")
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].originalSize
        local originalCFrame = originalData[part].originalCFrame
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
        local smallSize = originalSize * CONFIG.INITIAL_SCALE
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * CONFIG.INITIAL_SCALE) * (relativeCFrame - relativeCFrame.Position)
        local smallCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º
        part.Size = smallSize
        part.CFrame = smallCFrame
    end
    
    -- üî• –®–ê–ì 2: –ü–õ–ê–í–ù–û –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –î–û 1.0 (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†!)
    print("üöÄ –®–∞–≥ 2: –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é –¥–æ", CONFIG.FINAL_SCALE, "(–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)")
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        CONFIG.TWEEN_TIME,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local targetSize = originalData[part].originalSize * CONFIG.FINAL_SCALE -- üî• –¶–µ–ª—å: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä!
        local targetCFrame = originalData[part].originalCFrame -- üî• –¶–µ–ª—å: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è!
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
        local tween = TweenService:Create(part, tweenInfo, {
            Size = targetSize,
            CFrame = targetCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –†–æ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print("üéâ –ü–∏—Ç–æ–º–µ—Ü –≤—ã—Ä–æ—Å —Å " .. CONFIG.INITIAL_SCALE .. " –¥–æ " .. CONFIG.FINAL_SCALE .. " (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)!")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞")
    return true
end

-- === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
-- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞: –∏—â–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ eggPetModel (–º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —è–π—Ü–µ)
local function findOriginalAndEggPet()
    print("üîç –ü–æ–∏—Å–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —è–π—Ü–µ...")
    local foundPets = {}
    local foundEggPets = {}

    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") then
            -- –û—Ä–∏–≥–∏–Ω–∞–ª: –∏–º—è –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –∏ UUID
            if obj.Name:find("%{") and obj.Name:find("%}") then
                local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                if success then
                    local distance = (modelCFrame.Position - playerPos).Magnitude
                    if distance <= CONFIG.SEARCH_RADIUS then
                        local hasVisuals, meshes = hasPetVisuals(obj)
                        if hasVisuals then
                            table.insert(foundPets, {
                                model = obj,
                                distance = distance,
                                meshes = meshes
                            })
                        end
                    end
                end
            end
            -- –ü–∏—Ç–æ–º–µ—Ü –≤ —è–π—Ü–µ: –∏—â–µ–º –ø–æ workspace.visuals, –∏–º–µ–Ω–∏ –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫, –∏–ª–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
            if obj.Parent and obj.Parent.Name == "visuals" then
                table.insert(foundEggPets, obj)
            end
        end
    end

    if #foundPets == 0 then
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil, nil
    end
    if #foundEggPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –≤ —è–π—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (workspace.visuals)!")
        return foundPets[1].model, nil
    end

    print("üéØ –í—ã–±—Ä–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª:", foundPets[1].model.Name)
    print("ü•ö –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ —è–π—Ü–µ:", foundEggPets[1].Name)
    return foundPets[1].model, foundEggPets[1]
end


-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ eggPetModel
    local petModel, eggPetModel = findOriginalAndEggPet()
    if not petModel then
        return
    end
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –≤ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å –º–∞—Å—à—Ç–∞–±–æ–º –∫–∞–∫ —É —è–π—Ü–∞
    local petCopy = deepCopyModel(petModel, eggPetModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    -- –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–º–Ω—ã–π Anchored
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED ===")
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    -- –®–∞–≥ 4: –£–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ workspace.visuals, –µ—Å–ª–∏ eggPetModel —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if eggPetModel and eggPetModel.Parent then
        print("üóëÔ∏è –£–¥–∞–ª—è—é –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ workspace.visuals:", eggPetModel.Name)
        eggPetModel:Destroy()
    end
    -- –®–∞–≥ 5: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π (–∫—Ä–æ–º–µ idle)
    print("\nüé≠ === –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ê–ù–ò–ú–ê–¶–ò–ô ===")
    copyPetAnimations(petModel, petCopy)
    print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã (–∫—Ä–æ–º–µ idle)")

-- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –∫—Ä–æ–º–µ idle
function copyPetAnimations(original, copy)
    if not original or not copy then
        print("‚ö†Ô∏è –ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏–ª–∏ –∫–æ–ø–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–π")
        return
    end
    -- –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ AnimationController/Animator –∏ AnimationTrack –∫—Ä–æ–º–µ idle
    local function isIdleAnimation(anim)
        return anim.Name:lower():find("idle") ~= nil
    end
    -- –ù–∞–π—Ç–∏ Animator –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –∏ –∫–æ–ø–∏–∏
    local origAnimator = nil
    local copyAnimator = nil
    for _, obj in ipairs(original:GetDescendants()) do
        if obj:IsA("Animator") then origAnimator = obj break end
    end
    for _, obj in ipairs(copy:GetDescendants()) do
        if obj:IsA("Animator") then copyAnimator = obj break end
    end
    if not origAnimator or not copyAnimator then
        print("‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    -- –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ AnimationTrack –∫—Ä–æ–º–µ idle
    for _, track in ipairs(origAnimator:GetPlayingAnimationTracks()) do
        if not isIdleAnimation(track.Animation) then
            local newTrack = copyAnimator:LoadAnimation(track.Animation)
            newTrack:Play(0, 1, track.Speed)
            print("üé¨ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
        else
            print("‚è∏Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ idle-–∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
        end
    end
    -- –ö–æ–ø–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ Animation)
    for _, effect in ipairs(original:GetDescendants()) do
        if effect:IsA("Animation") and not isIdleAnimation(effect) then
            local newTrack = copyAnimator:LoadAnimation(effect)
            newTrack:Play()
            print("üí• –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —ç—Ñ—Ñ–µ–∫—Ç:", effect.Name)
        end
    end
end

        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        print("üí° –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
