-- üîç –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–ò–ú–ê–¶–ò–ò –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï
-- –ò—â–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: Animator, TweenService, Scripts, CFrame –∏–∑–º–µ–Ω–µ–Ω–∏—è

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

print("üîç === –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–ù–ò–ú–ê–¶–ò–ò –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===")

-- üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
local handPetTool = nil
local animationData = {
    animators = {},
    animationTracks = {},
    tweens = {},
    scripts = {},
    motor6ds = {},
    cframes = {},
    lastUpdate = 0
}

-- üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ (–∏–∑ PetScaler)
local function findHandPetTool()
    if not character then return nil end
    
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name, "%[") and string.find(tool.Name, "KG%]") then
            print("üéí –ù–∞–π–¥–µ–Ω Tool:", tool.Name)
            return tool
        end
    end
    return nil
end

-- üé≠ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ Animator –∏ AnimationTracks
local function analyzeAnimators(model)
    print("\nüé≠ === –ê–ù–ê–õ–ò–ó ANIMATOR –ò ANIMATIONTRACKS ===")
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Animator") then
            table.insert(animationData.animators, obj)
            print("‚úÖ –ù–∞–π–¥–µ–Ω Animator:", obj:GetFullName())
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ AnimationTracks
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                table.insert(animationData.animationTracks, track)
                print(string.format("üé¨ AnimationTrack: %s | Looped=%s | Speed=%.2f | Weight=%.2f", 
                    track.Animation and track.Animation.Name or "Unknown",
                    tostring(track.Looped),
                    track.Speed,
                    track.WeightCurrent))
            end
        elseif obj:IsA("Humanoid") then
            print("üë§ –ù–∞–π–¥–µ–Ω Humanoid:", obj:GetFullName())
            print("   WalkSpeed:", obj.WalkSpeed, "JumpPower:", obj.JumpPower)
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º Animator –≤ Humanoid
            local animator = obj:FindFirstChild("Animator")
            if animator then
                print("   üìΩÔ∏è Animator –≤ Humanoid –Ω–∞–π–¥–µ–Ω")
                local tracks = animator:GetPlayingAnimationTracks()
                for _, track in pairs(tracks) do
                    print(string.format("   üé¨ Track: %s | Looped=%s", 
                        track.Animation and track.Animation.Name or "Unknown",
                        tostring(track.Looped)))
                end
            end
        end
    end
end

-- üîß –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –º–æ–¥–µ–ª–∏
local function analyzeScripts(model)
    print("\nüîß === –ê–ù–ê–õ–ò–ó –°–ö–†–ò–ü–¢–û–í ===")
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("LocalScript") or obj:IsA("Script") or obj:IsA("ModuleScript") then
            table.insert(animationData.scripts, obj)
            print(string.format("üìú %s: %s | Enabled=%s", 
                obj.ClassName, obj:GetFullName(), tostring(obj.Enabled or "N/A")))
        end
    end
end

-- ‚öôÔ∏è –ê–Ω–∞–ª–∏–∑ Motor6D –∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
local function analyzeMotor6Ds(model)
    print("\n‚öôÔ∏è === –ê–ù–ê–õ–ò–ó MOTOR6D ===")
    
    animationData.motor6ds = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            animationData.motor6ds[obj.Name] = {
                motor = obj,
                lastC0 = obj.C0,
                lastC1 = obj.C1,
                changeCount = 0
            }
            print(string.format("üîó Motor6D: %s | Part0=%s | Part1=%s", 
                obj.Name,
                obj.Part0 and obj.Part0.Name or "NIL",
                obj.Part1 and obj.Part1.Name or "NIL"))
        end
    end
end

-- üìê –ê–Ω–∞–ª–∏–∑ CFrame –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–∞—Å—Ç–µ–π
local function analyzeCFrames(model)
    print("\nüìê === –ê–ù–ê–õ–ò–ó CFRAME –ò–ó–ú–ï–ù–ï–ù–ò–ô ===")
    
    animationData.cframes = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            animationData.cframes[obj.Name] = {
                part = obj,
                lastCFrame = obj.CFrame,
                changeCount = 0
            }
        end
    end
    print("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º CFrame –¥–ª—è", #animationData.cframes, "—á–∞—Å—Ç–µ–π")
end

-- üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
local function monitorChanges()
    local currentTime = tick()
    local changesDetected = {
        motor6d = 0,
        cframe = 0,
        total = 0
    }
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º Motor6D –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for name, data in pairs(animationData.motor6ds) do
        if data.motor and data.motor.Parent then
            local currentC0 = data.motor.C0
            local currentC1 = data.motor.C1
            
            local c0Diff = (currentC0.Position - data.lastC0.Position).Magnitude
            local c1Diff = (currentC1.Position - data.lastC1.Position).Magnitude
            
            if c0Diff > 0.001 or c1Diff > 0.001 then
                data.changeCount = data.changeCount + 1
                data.lastC0 = currentC0
                data.lastC1 = currentC1
                changesDetected.motor6d = changesDetected.motor6d + 1
            end
        end
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º CFrame –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for name, data in pairs(animationData.cframes) do
        if data.part and data.part.Parent then
            local currentCFrame = data.part.CFrame
            local positionDiff = (currentCFrame.Position - data.lastCFrame.Position).Magnitude
            local rotationDiff = math.abs(currentCFrame.LookVector:Dot(data.lastCFrame.LookVector) - 1)
            
            if positionDiff > 0.001 or rotationDiff > 0.001 then
                data.changeCount = data.changeCount + 1
                data.lastCFrame = currentCFrame
                changesDetected.cframe = changesDetected.cframe + 1
            end
        end
    end
    
    changesDetected.total = changesDetected.motor6d + changesDetected.cframe
    
    -- –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    if math.floor(currentTime) % 3 == 0 and math.floor(currentTime * 10) % 10 == 0 then
        print(string.format("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò–ó–ú–ï–ù–ï–ù–ò–ô (%.1f —Å–µ–∫):", currentTime - animationData.lastUpdate))
        print(string.format("   ‚öôÔ∏è Motor6D –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d", changesDetected.motor6d))
        print(string.format("   üìê CFrame –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d", changesDetected.cframe))
        print(string.format("   üéØ –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d", changesDetected.total))
        
        if changesDetected.total > 0 then
            print("‚úÖ –ê–ù–ò–ú–ê–¶–ò–Ø –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
        else
            print("‚ö†Ô∏è –ê–ù–ò–ú–ê–¶–ò–Ø –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ê")
        end
        
        animationData.lastUpdate = currentTime
    end
end

-- üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
local function startDiagnostic()
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        -- –ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
        local currentTool = findHandPetTool()
        
        if currentTool and currentTool ~= handPetTool then
            handPetTool = currentTool
            print("\nüéí === –ù–û–í–´–ô –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï –û–ë–ù–ê–†–£–ñ–ï–ù ===")
            print("Tool:", handPetTool.Name)
            
            -- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏
            analyzeAnimators(handPetTool)
            analyzeScripts(handPetTool)
            analyzeMotor6Ds(handPetTool)
            analyzeCFrames(handPetTool)
            
            print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        end
        
        if handPetTool then
            monitorChanges()
        end
    end)
    
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –í–æ–∑—å–º–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–≤–µ–¥–∏: connection:Disconnect()")
    
    return connection
end

-- –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
local diagnosticConnection = startDiagnostic()

-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º connection –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
return diagnosticConnection
