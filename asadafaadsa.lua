-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π + –ê–í–¢–û–ó–ê–ú–ï–ù–ê
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier + EggPetReplacer
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
-- –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ workspace.visuals –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–û–°–ù–û–í–ê–ù–ê –ù–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ò–ì–†–´)
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 1.184,   -- –¢–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!
    TWEEN_TIME = 3.2,       -- –í—Ä–µ–º—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (3.22 —Å–µ–∫)
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

-- –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ Handle —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏, –∫—Ä–æ–º–µ —Å–≤–∞—Ä–∫–∏ —Å –∫–æ–ø–∏–µ–π
local function cleanHandleConstraintsExceptCopy(handle, copyPrimaryPart)
    if not handle then return end
    for _, obj in ipairs(handle:GetDescendants()) do
        if obj:IsA("Constraint") or obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") then
            local p0 = obj.Part0 or obj.Attachment0 and obj.Attachment0.Parent
            local p1 = obj.Part1 or obj.Attachment1 and obj.Attachment1.Parent
            local keep = (copyPrimaryPart and (p0 == copyPrimaryPart or p1 == copyPrimaryPart))
            if not keep then
                obj:Destroy()
            end
        end
    end
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:", CONFIG.SCALE_FACTOR .. "x (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function hasPetVisuals(model)
    local visualCount = 0
    local petVisuals = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        local visualData = nil
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º MeshPart (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if obj:IsA("MeshPart") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                type = "MeshPart"
            }
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º SpecialMesh (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        elseif obj:IsA("SpecialMesh") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or "",
                type = "SpecialMesh"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ Part —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏/–¥–µ–∫–∞–ª—è–º–∏
        elseif obj:IsA("Part") then
            -- –ò—â–µ–º Decal –∏–ª–∏ Texture –Ω–∞ Part
            local hasDecal = obj:FindFirstChildOfClass("Decal")
            local hasTexture = obj:FindFirstChildOfClass("Texture")
            
            if hasDecal or hasTexture or obj.Material ~= Enum.Material.Plastic then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    material = obj.Material.Name,
                    hasDecal = hasDecal ~= nil,
                    hasTexture = hasTexture ~= nil,
                    type = "Part"
                }
            end
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º UnionOperation (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
        elseif obj:IsA("UnionOperation") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                type = "UnionOperation"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Attachment —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        elseif obj:IsA("Attachment") then
            local hasEffect = #obj:GetChildren() > 0
            if hasEffect then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    effectCount = #obj:GetChildren(),
                    type = "Attachment"
                }
            end
        end
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if visualData then
            table.insert(petVisuals, visualData)
        end
    end
    
    -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç BasePart'—ã, —Å—á–∏—Ç–∞–µ–º –µ—ë –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º
    if visualCount == 0 then
        local partCount = 0
        for _, obj in pairs(model:GetDescendants()) do
            if obj:IsA("BasePart") then
                partCount = partCount + 1
            end
        end
        
        -- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü
        if partCount >= 2 then
            visualCount = partCount
            table.insert(petVisuals, {
                name = "BaseParts",
                className = "Multiple",
                partCount = partCount,
                type = "BasePart"
            })
            print("  üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å " .. partCount .. " —á–∞—Å—Ç—è–º–∏: " .. model.Name)
        end
    end
    
    return visualCount > 0, petVisuals
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø + –ó–ê–©–ò–¢–ê)
local function deepCopyModel(originalModel)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not originalModel then
        print("‚ùå deepCopyModel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å = nil!")
        return nil
    end
    
    if not originalModel.Parent then
        print("‚ùå deepCopyModel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤ Workspace!")
        return nil
    end
    
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = nil
    local success, errorMsg = pcall(function()
        copy = originalModel:Clone()
    end)
    
    if not success or not copy then
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:", errorMsg or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        return nil
    end
    
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            local newCFrame = CFrame.new(finalPosition, originalCFrame.LookVector)
            copy:PivotTo(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ")
        else
            local newCFrame = originalCFrame + offset
            copy:PivotTo(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    if not model then
        print("‚ö†Ô∏è getAllParts: –º–æ–¥–µ–ª—å = nil")
        return parts
    end
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    if not copyParts or #copyParts == 0 then
        print("‚ö†Ô∏è smartAnchoredManagement: –Ω–µ—Ç —á–∞—Å—Ç–µ–π")
        return nil
    end
    
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored (–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ü–ê–î–ï–ù–ò–Ø!)
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω - —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ!
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    if not model then
        print("‚ö†Ô∏è getMotor6Ds: –º–æ–¥–µ–ª—å = nil")
        return motors
    end
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
local function startLiveMotorCopying(original, copy)
    if not original or not copy then
        print("‚ö†Ô∏è startLiveMotorCopying: –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π = nil")
        return nil
    end
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ò–ó –†–ê–ë–û–ß–ï–ì–û –°–ö–†–ò–ü–¢–ê)
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetPivot() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CFrame (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        local newSize = originalSize * scaleFactor
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π CFrame –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleFactor) * (relativeCFrame - relativeCFrame.Position)
        local newCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏ CFrame
        local tween = TweenService:Create(part, tweenInfo, {
            Size = newSize,
            CFrame = newCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("üéâ –í—Å–µ", #parts, "—á–∞—Å—Ç–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞", scaleFactor .. "x")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    return true
end

-- === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetPivot() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0 (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–º–Ω—ã–π Anchored (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    print("üß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED ===")
    local copyParts = getAllParts(petCopy)
    if copyParts and #copyParts > 0 then
        local rootPart = smartAnchoredManagement(copyParts)
        print("‚úÖ –£–º–Ω—ã–π Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∫–æ—Ä–µ–Ω—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏ –∫–æ–ø–∏–∏")
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Workspace
    if not petCopy or not petCopy.Parent then
        print("‚ùå –ö–æ–ø–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    end
    
    -- –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D –°–†–ê–ó–£ (–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!)
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ê–ù–ò–ú–ê–¶–ò–ò –°–†–ê–ó–£ ===")
    local animationConnection = startLiveMotorCopying(petModel, petCopy)
    
    if animationConnection then
        print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ö–æ–ø–∏—è —É–∂–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è!")
    else
        print("‚ö†Ô∏è –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    end
    
    -- –®–∞–≥ 4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –∫–æ–ø–∏–∏
    task.wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\nüéâ === –£–°–ü–ï–•! ===")
    print("‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞")
    print("‚úÖ –ö–æ–ø–∏—è –¥–≤–∏–≥–∞–µ—Ç—Å—è –° –°–ê–ú–û–ì–û –ù–ê–ß–ê–õ–ê")
    print("üí° –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ–ø–∏–π - —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è!")
end

-- === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–í–¢–û–ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ï–í –ò–ó WORKSPACE.VISUALS ===

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
local function createAnimatedCopyAtPosition(originalPet, targetPosition)
    print("\nüîÑ === –°–û–ó–î–ê–ù–ò–ï –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –ö–û–ü–ò–ò –ù–ê –ú–ï–°–¢–ï –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    print("üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü:", originalPet.Name)
    print("üìç –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:", targetPosition)
    
    -- –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é
    local petCopy = deepCopyModel(originalPet)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return nil
    end
    
    -- –®–∞–≥ 2: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é —Ç–æ—á–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if petCopy.PrimaryPart then
        petCopy:PivotTo(CFrame.new(targetPosition))
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (PrimaryPart)")
    elseif petCopy:FindFirstChild("RootPart") then
        petCopy.RootPart.Position = targetPosition
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (RootPart)")
    else
        -- –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é BasePart –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –µ—ë
        local firstPart = petCopy:FindFirstChildOfClass("BasePart")
        if firstPart then
            firstPart.Position = targetPosition
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å)")
        end
    end
    
    -- –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–º–Ω—ã–π Anchored
    local copyParts = getAllParts(petCopy)
    if copyParts and #copyParts > 0 then
        local rootPart = smartAnchoredManagement(copyParts)
        print("‚úÖ –£–º–Ω—ã–π Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–π –∫–æ–ø–∏–∏")
    end
    
    -- –®–∞–≥ 4: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –°–†–ê–ó–£
    local animationConnection = startLiveMotorCopying(originalPet, petCopy)
    if animationConnection then
        print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–π –∫–æ–ø–∏–∏!")
    else
        print("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –Ω–æ –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    end
    
    -- –®–∞–≥ 5: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
    task.wait(0.2)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if scaleSuccess then
        print("‚úÖ –ó–∞–º–µ—â–∞—é—â–∞—è –∫–æ–ø–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞!")
        return petCopy
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return petCopy
    end
end

-- Forward declarations for helpers used below (they are defined later in file)
local removePriorCopies
local findModelBoundToHandle
local pickOriginalHandPet
local waitStableRel
local detachModelFromHandle

-- === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï (–¢–û–ß–ù–û –ö–ê–ö PetScaler_v3.226.lua) ===
local function replaceHandPetWithAnimation()
    print("\n‚úã === –ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï –ù–ê –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–£–Æ –ö–û–ü–ò–Æ ===")
    print("üîç –ò—â—É –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ –∏ —Å–æ–∑–¥–∞—é –∫–æ–ø–∏—é –í –†–£–ö–ï...")
    
    -- –®–∞–≥ 1: –ù–ê–ô–¢–ò TOOL –í –†–£–ö–ï
    local playerChar = Players.LocalPlayer.Character
    if not playerChar then
        print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    local handTool = playerChar:FindFirstChildOfClass("Tool")
    if not handTool then
        print("‚ùå Tool –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    print("üéØ –ù–∞–π–¥–µ–Ω Tool –≤ —Ä—É–∫–µ:", handTool.Name)
    -- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–ø–∏–∏ –∏–∑ Tool, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å weld –∏ –º–∞—Å—Å—ã
    removePriorCopies(handTool)
    
    -- –®–∞–≥ 2: –ù–ê–ô–¢–ò UUID –ü–ò–¢–û–ú–¶–ê –ù–ê –ó–ï–ú–õ–ï –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ô
    local petModel = findAndScalePet()
    if not petModel then
        print("‚ùå UUID –ø–∏—Ç–æ–º–µ—Ü –Ω–∞ –∑–µ–º–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω UUID –ø–∏—Ç–æ–º–µ—Ü –Ω–∞ –∑–µ–º–ª–µ:", petModel.Name)
    
    -- –®–∞–≥ 3: –°–û–ó–î–ê–¢–¨ –ö–û–ü–ò–Æ UUID –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï (–ù–ï —É–¥–∞–ª—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!)
    print("üìã –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é UUID –ø–∏—Ç–æ–º—Ü–∞ –í –†–£–ö–ï...")
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤ Workspace
    local petCopy = petModel:Clone()
    petCopy.Name = petModel.Name .. "_HAND_COPY"
    
    -- –†–ê–ó–ú–ï–©–ê–ï–ú –ö–û–ü–ò–Æ –í –†–£–ö–ï (–≤ Tool) –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ñ—Ñ—Å–µ—Ç –∫ Handle
    petCopy.Parent = handTool
    print("‚úÖ –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –í –†–£–ö–ï (–≤ Tool)!")
    -- –ü–æ–º–µ—á–∞–µ–º –∫–æ–ø–∏—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ç–µ–≥–æ–º, —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã—Ç—å –µ—ë –ø–æ –æ—à–∏–±–∫–µ
    local copyTag = Instance.new("BoolValue")
    copyTag.Name = "HandPetCopyTag"
    copyTag.Value = true
    copyTag.Parent = petCopy
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–∑–∏–∫–∏ –∫–æ–ø–∏–∏ (–±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π, –±–µ–∑ –º–∞—Å—Å—ã)
    for _, p in ipairs(petCopy:GetDescendants()) do
        if p:IsA("BasePart") then
            p.CanCollide = false
            p.Massless = true
        end
    end
    
    -- –ò—â–µ–º Handle
    local handle = handTool:FindFirstChild("Handle")
    -- –û—Ä–∏–≥–∏–Ω–∞–ª –≤ —Ä—É–∫–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∂–µ (–æ–±—ä—è–≤–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏)
    local originalHandPet = nil
    if not handle or not handle:IsA("BasePart") then
        print("‚ö†Ô∏è Handle –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ BasePart ‚Äî –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É—é –ø–æ PrimaryPart –∫–æ–ø–∏–∏ –∫–∞–∫ fallback")
        if petCopy.PrimaryPart then
            petCopy:PivotTo(petCopy.PrimaryPart.CFrame)
        end
    else
        -- –ò—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ Tool, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å Handle (–Ω–∞–¥—ë–∂–Ω–æ), –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ñ—Ñ—Å–µ—Ç–∞
        print("üîç –ò—â—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å Handle...")
        originalHandPet = findModelBoundToHandle(handTool, handle, petCopy)
        if originalHandPet then
            print("‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü (—Å–≤—è–∑–∞–Ω —Å Handle):", originalHandPet.Name)
        else
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ —Å–≤—è–∑—è–º ‚Äî –ø–æ–ø—Ä–æ–±—É—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
            originalHandPet = pickOriginalHandPet(handTool, petCopy)
            if originalHandPet then
                print("‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:", originalHandPet.Name)
            end
        end

        -- –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –∫–æ–ø–∏–∏ –µ—Å—Ç—å PrimaryPart
        if not petCopy.PrimaryPart then
            local firstPart = petCopy:FindFirstChildOfClass("BasePart")
            if firstPart then
                pcall(function()
                    petCopy.PrimaryPart = firstPart
                end)
            end
        end

        -- –í—ã—á–∏—Å–ª—è–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ñ—Ñ—Å–µ—Ç rel –∫ Handle
        local DEFAULT_HAND_REL = CFrame.new(0, 0.2, -0.6) * CFrame.Angles(0, math.rad(10), 0)
        local rel = DEFAULT_HAND_REL
        if originalHandPet and originalHandPet.PrimaryPart and petCopy.PrimaryPart then
            local computed = waitStableRel(handle, originalHandPet, 0.6)
            if computed and typeof(computed) == "CFrame" then
                rel = computed
            else
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π rel ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ñ—Ñ—Å–µ—Ç")
            end
        else
            print("‚ö†Ô∏è –ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞/PrimaryPart ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ñ—Ñ—Å–µ—Ç")
        end

        -- –°—Ç–∞–≤–∏–º –∫–æ–ø–∏—é –≤ —Ç–æ—á–Ω—É—é –ø–æ–∑—É –≤ —Ä—É–∫–µ –∏ –ø—Ä–∏–≤–∞—Ä–∏–≤–∞–µ–º –∫ Handle
        if petCopy.PrimaryPart then
            petCopy:PivotTo(handle.CFrame * rel)
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = handle
            weld.Part1 = petCopy.PrimaryPart
            weld.Parent = petCopy.PrimaryPart
            print("üß≤ –ö–æ–ø–∏—è –ø—Ä–∏–≤–∞—Ä–µ–Ω–∞ –∫ Handle –ø–æ —Å–Ω—è—Ç–æ–º—É –æ—Ñ—Ñ—Å–µ—Ç—É")

            -- –°–±—Ä–æ—Å —Å–∫–æ—Ä–æ—Å—Ç–µ–π —É –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∏–º–ø—É–ª—å—Å—ã
            for _, p in ipairs(petCopy:GetDescendants()) do
                if p:IsA("BasePart") then
                    p.AssemblyLinearVelocity = Vector3.new()
                    p.AssemblyAngularVelocity = Vector3.new()
                    p.Velocity = Vector3.new()
                    p.RotVelocity = Vector3.new()
                end
            end

            -- –ö—Ä–∏—Ç–∏—á–Ω–æ: –æ—Ç—Å—Ç—ã–∫–æ–≤—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –æ—Ç Handle –∏ —á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ —Å–≤—è–∑–∏ —É Handle,
            -- —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ —Å–∏–ª—ã –∏ —Ä—ã–≤–∫–∏ –∏–≥—Ä–æ–∫–∞
            if originalHandPet then
                detachModelFromHandle(originalHandPet, handle)
            end
            cleanHandleConstraintsExceptCopy(handle, petCopy.PrimaryPart)
        else
            print("‚ö†Ô∏è –ù–µ—Ç PrimaryPart —É –∫–æ–ø–∏–∏ ‚Äî –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ")
        end
    end
    
    -- –ü–†–û–°–¢–û–ï –°–ö–†–´–¢–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê (–ù–ï –¢–†–û–ì–ê–Ø –ö–û–ü–ò–Æ!)
    -- –ù–∞–¥—ë–∂–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ Tool (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω originalHandPet ‚Äî –æ–∫; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –∫–æ–ø–∏–∏ –∏ Handle)
    print("üëª –°–∫—Ä—ã–≤–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ...")
    local function isDescendantOfCopy(inst)
        return inst:IsDescendantOf(petCopy)
    end
    for _, obj in pairs(handTool:GetDescendants()) do
        if isDescendantOfCopy(obj) then
            -- –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –∫–æ–ø–∏—é
        else
            if obj.Name == "Handle" and obj:IsA("BasePart") then
                -- Handle –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            elseif obj:IsA("BasePart") then
                obj.Transparency = 1
                obj.CanCollide = false
            elseif obj:IsA("Decal") then
                obj.Transparency = 1
            elseif obj:IsA("Beam") or obj:IsA("ParticleEmitter") or obj:IsA("Trail") then
                obj.Enabled = false
            end
        end
    end
    print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—ã —Å–∫—Ä—ã—Ç—ã! –í–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—è!")
    
    -- –®–∞–≥ 4: –ò–°–ü–†–ê–í–õ–Ø–ï–ú ATTACHMENT –°–í–Ø–ó–ò –î–õ–Ø –ö–û–ü–ò–ò –í –†–£–ö–ï
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é Attachment —Å–≤—è–∑–∏ –¥–ª—è –∫–æ–ø–∏–∏ –≤ —Ä—É–∫–µ...")
    local attachments = {}
    local fixedCount = 0
    
    for _, obj in pairs(petCopy:GetDescendants()) do
        if obj:IsA("Attachment") then
            table.insert(attachments, obj)
        end
    end
    
    for _, attachment in pairs(attachments) do
        if attachment.Parent and not attachment.Parent:IsA("BasePart") then
            local parent = attachment.Parent
            while parent and not parent:IsA("BasePart") do
                parent = parent.Parent
            end
            
            if parent and parent:IsA("BasePart") then
                attachment.Parent = parent
                fixedCount = fixedCount + 1
            else
                print("‚ö†Ô∏è –£–¥–∞–ª—è—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment:", attachment.Name)
                attachment:Destroy()
            end
        end
    end
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Attachment —Å–≤—è–∑–µ–π:", fixedCount)
    
    -- –®–∞–≥ 5: –£–ú–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï ANCHORED
    -- –í–ê–ñ–ù–û: –µ—Å–ª–∏ –∫–æ–ø–∏—è –≤–Ω—É—Ç—Ä–∏ Tool (–≤ —Ä—É–∫–µ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—É—é –ª–æ–≥–∏–∫—É Anchored –¥–ª—è –Ω–µ—ë,
    -- —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –∑–∞ Handle —á–µ—Ä–µ–∑ WeldConstraint –∏ –∏–∑–±–µ–∂–∞—Ç—å —Ñ–∏–∑.–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    if not petCopy:IsDescendantOf(handTool) then
        print("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anchored –¥–ª—è –∫–æ–ø–∏–∏ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º...")
        local copyParts = getAllParts(petCopy)
    
    -- –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é —á–∞—Å—Ç—å –¥–ª—è —è–∫–æ—Ä–µ–Ω–∏—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ PetScaler_v3.226.lua)
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart and rootPart.Name or "nil")
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ö–†–ò–¢–ò–ß–ù–û: –í—Å–µ —á–∞—Å—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ò —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ä—É–∫–æ–π
        for _, part in ipairs(copyParts) do
            part.Anchored = false
        end
        print("‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ–ø–∏–∏ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º")
    else
        print("üß† –ü—Ä–æ–ø—É—Å–∫–∞—é Anchored: –∫–æ–ø–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Tool –∏ —Å–≤–∞—Ä–µ–Ω–∞ –∫ Handle")
    end
    
    -- –®–∞–≥ 6: –ü–ï–†–ï–î–ê–ß–ê MOTOR6D –ê–ù–ò–ú–ê–¶–ò–ô –û–¢ –û–†–ò–ì–ò–ù–ê–õ–ê –ù–ê –ó–ï–ú–õ–ï –ö –ö–û–ü–ò–ò –í –†–£–ö–ï
    print("\nüé≠ === –ü–ï–†–ï–î–ê–ß–ê MOTOR6D –ê–ù–ò–ú–ê–¶–ò–ô ===")
    print("üîÑ –ü–µ—Ä–µ–¥–∞—é Motor6D –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ –∑–µ–º–ª–µ –∫ –∫–æ–ø–∏–∏ –≤ —Ä—É–∫–µ...")
    
    -- –ù–∞—Ö–æ–¥–∏–º Motor6D –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –∏ –∫–æ–ø–∏–∏
    local originalMotors = {}
    local copyMotors = {}
    
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            originalMotors[obj.Name] = obj
        end
    end
    
    for _, obj in pairs(petCopy:GetDescendants()) do
        if obj:IsA("Motor6D") then
            copyMotors[obj.Name] = obj
        end
    end
    
    print("üîß Motor6D –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:", table.getn and table.getn(originalMotors) or "–º–Ω–æ–≥–æ")
    print("üîß Motor6D –≤ –∫–æ–ø–∏–∏:", table.getn and table.getn(copyMotors) or "–º–Ω–æ–≥–æ")
    
    -- –ü–†–Ø–ú–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï MOTOR6D TRANSFORM –û–¢ –û–†–ò–ì–ò–ù–ê–õ–ê –ö –ö–û–ü–ò–ò + –°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê –†–£–ö–û–ô
    if next(originalMotors) and next(copyMotors) then
        local directConnection = RunService.Heartbeat:Connect(function()
            -- 1. –ü–ï–†–ï–î–ê–ß–ê MOTOR6D –ê–ù–ò–ú–ê–¶–ò–ô
            for motorName, originalMotor in pairs(originalMotors) do
                local copyMotor = copyMotors[motorName]
                if copyMotor and originalMotor.Parent and copyMotor.Parent then
                    -- –ü—Ä—è–º–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Transform –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ –∑–µ–º–ª–µ –∫ –∫–æ–ø–∏–∏ –≤ —Ä—É–∫–µ
                    copyMotor.Transform = originalMotor.Transform
                end
            end
            
            -- 2. –ü–û–°–¢–û–Ø–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ö–û–ü–ò–ò –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï
            if originalHandPet and originalHandPet.PrimaryPart and petCopy.PrimaryPart then
                -- –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
                local currentOriginalCFrame = originalHandPet.PrimaryPart.CFrame
                petCopy:PivotTo(currentOriginalCFrame)
            end
        end)
        
        print("‚úÖ Motor6D –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ –∑–µ–º–ª–µ –∫ –∫–æ–ø–∏–∏ –≤ —Ä—É–∫–µ!")
        print("‚úÖ –ö–æ–ø–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –ø–æ–∑–∏—Ü–∏–µ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ!")
        print("üé≠ –ö–æ–ø–∏—è –≤ —Ä—É–∫–µ –ø–æ–ª—É—á–∞–µ—Ç –∂–∏–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        print("üî• –î–≤–∞ –ø–∏—Ç–æ–º—Ü–∞: –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ –∑–µ–º–ª–µ + –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è –≤ —Ä—É–∫–µ!")
        
        return true
    else
        print("‚ö†Ô∏è Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–Ω–∏–º–∞—Ü–∏–π")
        return false
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
local function isPetModel(model)
    -- 1. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å Model
    if not model:IsA("Model") then return false end
    
    -- 2. –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï –ö–û–ü–ò–ò (—Å _COPY, _SCALED, UUID, —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏)
    local modelName = model.Name
    if modelName:find("_COPY") or modelName:find("_SCALED") or modelName:find("SCALED_COPY") or 
       modelName:find("ANIMATED_COPY") or modelName:find("{") or modelName:find("}") or
       modelName:find("-") and #modelName > 10 then -- UUID –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ —Å —Ç–∏—Ä–µ
        return false
    end
    
    -- 3. –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –º–µ–Ω—è)
    for _, p in pairs(Players:GetPlayers()) do
        if modelName == p.Name or modelName:find(p.Name) then
            return false
        end
    end
    
    -- 4. –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    local EXCLUDED_NAMES = {
        "EggExplode", "CraftingTables", "EventCraftingWorkBench", "Fruit", "Tree", 
        "Bush", "Platform", "Stand", "Bench", "Table", "Chair", "Decoration",
        "Egg", "Tool", "Handle", "Part", "Union", "Accessory", "Hat"
    }
    
    for _, excluded in pairs(EXCLUDED_NAMES) do
        if modelName:find(excluded) then return false end
    end
    
    -- 5. –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–æ–≤
    if modelName:find("%[") and modelName:find("KG") and modelName:find("Age") then
        return false
    end
    
    -- 6. –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô –ø–∏—Ç–æ–º–µ—Ü (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞)
    if #modelName > 15 then return false end -- –ü–∏—Ç–æ–º—Ü—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞
    
    -- 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—à–µ–π
    local meshCount = 0
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") or obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
        end
    end
    
    if meshCount < 1 then return false end
    
    -- 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
    if #model:GetChildren() < 5 then return false end
    
    -- 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞
    local playerChar = player.Character
    if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
        local success, modelCFrame = pcall(function() return model:GetPivot() end)
        if success then
            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
            if distance > CONFIG.SEARCH_RADIUS then return false end
        end
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –ø–∏—Ç–æ–º—Ü–µ–≤ (–°–û–ë–´–¢–ò–ô–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - –ë–ï–ó –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê!)
local function startWorkspaceScanning()
    print("\nüîç === –ó–ê–ü–£–°–ö –°–û–ë–´–¢–ò–ô–ù–û–ô –ê–í–¢–û–ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ï–í ===")
    print("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º ChildAdded —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
    print("üí° –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –í –§–ò–ì–£–†–ù–´–• –°–ö–û–ë–ö–ê–•, –∫–∞–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏!")
    
    local processedModels = {}
    local foundPetModels = {}
    local createdCopiesCount = 0 -- –°—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
    local MAX_COPIES = 3 -- –ú–∞–∫—Å–∏–º—É–º –∫–æ–ø–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    local processedPetNames = {} -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∞–º
    local scanStartTime = tick()
    
    -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ —è–∏—Ü
    local eggPets = {
        -- Anti Bee Egg
        "wasp", "tarantula hawk", "moth", "butterfly", "disco bee (divine)",
        -- Bee Egg  
        "bee", "honey bee", "bear bee", "petal bee", "queen bee",
        -- Bug Egg
        "snail", "giant ant", "caterpillar", "praying mantis", "dragonfly (divine)",
        -- Common Egg
        "dog", "bunny", "golden lab",
        -- Common Summer Egg
        "starfish", "seagull", "crab",
        -- Dinosaur Egg
        "raptor", "triceratops", "stegosaurus", "pterodactyl", "brontosaurus", "t-rex (divine)",
        -- Legendary Egg
        "cow", "silver monkey", "sea otter", "turtle", "polar bear",
        -- Mythical Egg
        "grey mouse", "brown mouse", "squirrel", "red giant ant", "red fox",
        -- Night Egg
        "hedgehog", "mole", "frog", "echo frog", "night owl", "raccoon",
        -- Oasis Egg
        "meerkat", "sand snake", "axolotl", "hyacinth macaw", "fennec fox",
        -- Paradise Egg
        "ostrich", "peacock", "capybara", "scarlet macaw", "mimic octopus",
        -- Primal Egg
        "parasaurolophus", "iguanodon", "pachycephalosaurus", "dilophosaurus", "ankylosaurus", "spinosaurus (divine)",
        -- Rare Egg
        "orange tabby", "spotted deer", "pig", "rooster", "monkey",
        -- Rare Summer Egg
        "flamingo", "toucan", "sea turtle", "orangutan", "seal",
        -- Uncommon Egg
        "black bunny", "chicken", "cat", "deer",
        -- Zen Egg
        "shiba inu", "nihonzaru", "tanuki", "tanchozuru", "kappa", "kitsune"
    }
    
    -- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–µ–º –∏–∑ —è–π—Ü–∞
    local function isPetFromEgg(model)
        if not model:IsA("Model") then return false end
        local modelName = model.Name:lower()
        
        for _, petName in pairs(eggPets) do
            if modelName == petName then
                return true
            end
        end
        return false
    end
    
    -- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    local function processPetFromEgg(newPet)
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–ø–∏–π
        if createdCopiesCount >= MAX_COPIES then
            print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ø–∏–π (" .. MAX_COPIES .. "). –ò–≥–Ω–æ—Ä–∏—Ä—É—é –ø–∏—Ç–æ–º—Ü–∞:", newPet.Name)
            return
        end
        
        -- –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        local petId = tostring(newPet)  -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞
        if processedModels[petId] then
            return
        end
        
        print("üé≠ –°–û–ë–´–¢–ò–ï: –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –ø–æ—è–≤–∏–ª—Å—è –≤ Visuals:", newPet.Name)
        processedModels[petId] = true
        
        -- –ò—â–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º —Å –Ω–æ–≤—ã–º –ø–∏—Ç–æ–º—Ü–µ–º
        print("üîç –ò—â–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º —Å –Ω–æ–≤—ã–º –ø–∏—Ç–æ–º—Ü–µ–º:", newPet.Name)
        
        local foundPet = nil
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
                local success, modelCFrame = pcall(function() return obj:GetPivot() end)
                if success then
                    local playerChar = player.Character
                    if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
                        local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
                        if distance <= CONFIG.SEARCH_RADIUS then
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—à–∏ (–∫–∞–∫ –≤ —Ä—É—á–Ω–æ–π –∫–æ–ø–∏–∏)
                            local meshes = 0
                            for _, part in pairs(obj:GetDescendants()) do
                                if part:IsA("MeshPart") or part:IsA("SpecialMesh") then
                                    meshes = meshes + 1
                                end
                            end
                            
                            foundPet = obj
                            print("üîë –ù–ê–ô–î–ï–ù UUID –ø–∏—Ç–æ–º–µ—Ü –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:", obj.Name, "(–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", math.floor(distance), ", –ú–µ—à–µ–π:", meshes, ")")
                            break
                        end
                    end
                end
            end
        end
        
        -- –®–∞–≥ 2: –ò–©–ï–ú UUID –ü–ò–¢–û–ú–¶–ê –ü–û –†–ê–°–°–¢–û–Ø–ù–ò–Æ (–ö–ê–ö –í –†–£–ß–ù–û–ô –ö–û–ü–ò–ò!)
        if foundVisualsPet then
            print("üîç –ò—â–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–∫–∞–∫ –≤ findAndScalePet)...")
            
            -- –¢–û–ß–ù–û –ö–û–ü–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó findAndScalePet()!
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
                    local success, modelCFrame = pcall(function() return obj:GetPivot() end)
                    if success then
                        local playerChar = player.Character
                        if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
                            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
                            if distance <= CONFIG.SEARCH_RADIUS then
                                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—à–∏ (–∫–∞–∫ –≤ —Ä—É—á–Ω–æ–π –∫–æ–ø–∏–∏)
                                local meshes = 0
                                for _, part in pairs(obj:GetDescendants()) do
                                    if part:IsA("MeshPart") or part:IsA("SpecialMesh") then
                                        meshes = meshes + 1
                                    end
                                end
                                
                                foundPet = obj
                                print("üîë –ù–ê–ô–î–ï–ù UUID –ø–∏—Ç–æ–º–µ—Ü –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:", obj.Name, "(–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", math.floor(distance), ", –ú–µ—à–µ–π:", meshes, ")")
                                break
                            end
                        end
                    end
                end
            end
        end
        
        -- –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω UUID –ø–∏—Ç–æ–º–µ—Ü, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—É
        if foundPet then
            print("\nüéâ === –ù–ê–ô–î–ï–ù–ê –ü–ê–†–ê –ü–ò–¢–û–ú–¶–ï–í –î–õ–Ø –ê–í–¢–û–ó–ê–ú–ï–ù–´ ===")
            print("üîë UUID –ø–∏—Ç–æ–º–µ—Ü:", foundPet.Name)
            print("üé≠ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü:", newPet.Name)
            
            -- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
            local visualPosition = nil
            local success, visualCFrame = pcall(function() return newPet:GetPivot() end)
            if success then
                visualPosition = visualCFrame.Position
            elseif newPet.PrimaryPart then
                visualPosition = newPet.PrimaryPart.Position
            end
            
            if visualPosition then
                print("üìç –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã:", visualPosition)
                
                -- –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å–∫—Ä—ã—Ç –≤ —Å–æ–±—ã—Ç–∏–∏ ChildAdded, –Ω–µ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ —Å–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
                
                -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é UUID –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –º–µ—Å—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ
                local animatedCopy = createAnimatedCopyAtPosition(foundPet, visualPosition)
                    
                if animatedCopy then
                    -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ø–∏–π
                    createdCopiesCount = createdCopiesCount + 1
                    
                    -- –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –í–†–ï–ú–Ø –ñ–ò–ó–ù–ò –ö–û–ü–ò–ò –° –û–†–ò–ì–ò–ù–ê–õ–û–ú
                    print("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏...")
                    
                    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ handle
                    task.spawn(function()
                        while newPet and newPet.Parent do
                            task.wait(0.2) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
                        end
                        
                        -- –ö–æ–≥–¥–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑, —É–¥–∞–ª—è–µ–º –∫–æ–ø–∏—é
                        if animatedCopy and animatedCopy.Parent then
                            print("‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª –∏—Å—á–µ–∑ - —É–¥–∞–ª—è—é –∫–æ–ø–∏—é")
                            animatedCopy:Destroy()
                        end
                        
                        -- –ù–û–í–û–ï: –ó–∞–º–µ–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ handle –Ω–∞ Dragonfly –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                        task.wait(2) -- –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                        print("üîÑ –ò—â—É –ø–∏—Ç–æ–º—Ü–∞ –≤ handle –¥–ª—è –∑–∞–º–µ–Ω—ã...")
                        
                        local playerChar = player.Character
                        if playerChar then
                            local handle = playerChar:FindFirstChild("Handle")
                            if handle then
                                print("üìç Handle –Ω–∞–π–¥–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç:")
                                for _, obj in pairs(handle:GetChildren()) do
                                    print("  - " .. obj.Name .. " (" .. obj.ClassName .. ")")
                                end
                                
                                -- –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ handle (–ù–ï Dragonfly)
                                for _, obj in pairs(handle:GetChildren()) do
                                    if obj:IsA("Model") and obj.Name:lower() ~= "dragonfly" then
                                        print("üóëÔ∏è –£–±–∏—Ä–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ handle:", obj.Name)
                                        obj:Destroy() -- –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                                        break
                                    end
                                end
                                
                                -- –ò—â–µ–º Dragonfly –≤ WORKSPACE (–≥–¥–µ –æ–±—ã—á–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–∏—Ç–æ–º—Ü—ã)
                                print("üîç –ò—â—É Dragonfly –≤ Workspace...")
                                
                                for _, obj in pairs(Workspace:GetDescendants()) do
                                    if obj:IsA("Model") and obj.Name:lower():find("dragonfly") and obj ~= playerChar then
                                        print("üêâ –ù–∞–π–¥–µ–Ω Dragonfly –≤ Workspace - –ø–µ—Ä–µ–º–µ—â–∞—é –≤ handle")
                                        
                                        -- –ü–µ—Ä–µ–º–µ—â–∞–µ–º (–Ω–µ –∫–ª–æ–Ω–∏—Ä—É–µ–º) Dragonfly –≤ handle
                                        obj.Parent = handle
                                        
                                        -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ —Ä—É–∫–µ
                                        if obj.PrimaryPart then
                                            obj.PrimaryPart.CFrame = handle.CFrame
                                        elseif obj:FindFirstChild("RootPart") then
                                            obj.RootPart.CFrame = handle.CFrame
                                        end
                                        
                                        print("‚úÖ Dragonfly —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ handle!")
                                        return
                                    end
                                end
                                
                                -- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Workspace, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                                print("üîç –ò—â—É Dragonfly –≤ –¥—Ä—É–≥–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö...")
                                local searchLocations = {
                                    player,
                                    playerChar,
                                    game.ReplicatedStorage
                                }
                                
                                for _, location in pairs(searchLocations) do
                                    if location then
                                        for _, item in pairs(location:GetDescendants()) do
                                            if item:IsA("Model") and item.Name:lower():find("dragonfly") then
                                                print("üêâ –ù–∞–π–¥–µ–Ω Dragonfly –≤", location.Name, "- –∫–ª–æ–Ω–∏—Ä—É—é –≤ handle")
                                                
                                                local dragonflyClone = item:Clone()
                                                dragonflyClone.Parent = handle
                                                
                                                if dragonflyClone.PrimaryPart then
                                                    dragonflyClone.PrimaryPart.CFrame = handle.CFrame
                                                end
                                                
                                                print("‚úÖ Dragonfly —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ handle!")
                                                return
                                            end
                                        end
                                    end
                                end
                                
                                print("‚ö†Ô∏è Dragonfly –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ")
                            else
                                print("‚ö†Ô∏è Handle –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∏–≥—Ä–æ–∫–∞")
                            end
                        end
                    end)
                        
                        -- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ–¥ –∑–µ–º–ª—é
                        if foundVisualsPet.PrimaryPart then
                            foundVisualsPet:PivotTo(foundVisualsPet.PrimaryPart.CFrame - Vector3.new(0, 1000, 0))
                        end
                        
                        print("‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å–∫—Ä—ã—Ç!")
                        print("üéâ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - UUID –ø–∏—Ç–æ–º–µ—Ü —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Å—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ!")
                        print("üìä –°–æ–∑–¥–∞–Ω–æ –∫–æ–ø–∏–π: " .. createdCopiesCount .. "/" .. MAX_COPIES)
                        
                        -- –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                        table.insert(foundPetModels, {
                            name = foundPet.Name .. " -> " .. newPet.Name,
                            foundTime = tick() - scanStartTime,
                            animatedCopy = animatedCopy
                        })
                    else
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é UUID –ø–∏—Ç–æ–º—Ü–∞")
                    end
                else
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
                end
            else
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π UUID –ø–∏—Ç–æ–º–µ—Ü –¥–ª—è –∑–∞–º–µ–Ω—ã")
            end
    end
    
    -- –°–û–ë–´–¢–ò–ô–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Workspace.Visuals
    local visualsFolder = Workspace:FindFirstChild("Visuals")
    if visualsFolder then
        print("‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ Visuals - –ø–æ–¥–∫–ª—é—á–∞—é —Å–æ–±—ã—Ç–∏–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        
        local childAddedConnection = visualsFolder.ChildAdded:Connect(function(child)
            if child:IsA("Model") and isPetFromEgg(child) then
                print("‚ö° –°–û–ë–´–¢–ò–ï: –ù–æ–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü –ø–æ—è–≤–∏–ª—Å—è –≤ Visuals:", child.Name)
                
                -- –ú–ì–ù–û–í–ï–ù–ù–û —Å–∫—Ä—ã–≤–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏!
                print("‚ö° –ú–ì–ù–û–í–ï–ù–ù–û —Å–∫—Ä—ã–≤–∞—é –ø–∏—Ç–æ–º—Ü–∞:", child.Name)
                for _, part in pairs(child:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Transparency = 1
                        part.CanCollide = false
                    elseif part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    end
                end
                
                -- –ò—Å–ø–æ–ª—å–∑—É–µ–º task.spawn, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
                task.spawn(function()
                    task.wait(0.05) -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
                    processPetFromEgg(child)
                end)
            end
        end)
        
        -- –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Visuals
        for _, child in pairs(visualsFolder:GetChildren()) do
            if child:IsA("Model") and isPetFromEgg(child) then
                local petId = tostring(child)
                if not processedModels[petId] then
                    print("üîç –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ Visuals:", child.Name)
                    processPetFromEgg(child)
                end
            end
        end
        
        print("üîÑ –°–æ–±—ã—Ç–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
        print("üí° –í—Å–µ –Ω–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã –≤ Visuals –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã")
        print("üéØ –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–º–µ–Ω—ã!")
        
        return childAddedConnection
    else
        print("‚ùå –ü–∞–ø–∫–∞ Workspace.Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return nil
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI (–° –ó–ê–©–ò–¢–û–ô –û–¢ –û–®–ò–ë–û–ö)
local function createGUI()
    local success, errorMsg = pcall(function()
        local playerGui = player:WaitForChild("PlayerGui")
        
        local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
        if oldGui then
            oldGui:Destroy()
            task.wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        end
        
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "PetScalerV2GUI"
        screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 120) -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–Ω–æ–ø–∫–∏
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    -- –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏
    local manualButton = Instance.new("TextButton")
    manualButton.Name = "ManualScaleButton"
    manualButton.Size = UDim2.new(0, 230, 0, 30)
    manualButton.Position = UDim2.new(0, 10, 0, 10)
    manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    manualButton.BorderSizePixel = 0
    manualButton.Text = "üî• –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏"
    manualButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    manualButton.TextSize = 12
    manualButton.Font = Enum.Font.SourceSansBold
    manualButton.Parent = frame
    
    -- –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    local autoButton = Instance.new("TextButton")
    autoButton.Name = "AutoReplaceButton"
    autoButton.Size = UDim2.new(0, 230, 0, 30)
    autoButton.Position = UDim2.new(0, 10, 0, 45)
    autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
    autoButton.BorderSizePixel = 0
    autoButton.Text = "ü•ö –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–§–§)"
    autoButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    autoButton.TextSize = 12
    autoButton.Font = Enum.Font.SourceSansBold
    autoButton.Parent = frame
    
    -- –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê: –ó–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ (–∫–∞–∫ PetScaler_v3.226.lua)
    local handButton = Instance.new("TextButton")
    handButton.Name = "HandReplaceButton"
    handButton.Size = UDim2.new(0, 230, 0, 30)
    handButton.Position = UDim2.new(0, 10, 0, 80) -- –¢—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞
    handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 255) -- –§–∏–æ–ª–µ—Ç–æ–≤–∞—è
    handButton.BorderSizePixel = 0
    handButton.Text = "‚úã –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ"
    handButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    handButton.TextSize = 12
    handButton.Font = Enum.Font.SourceSansBold
    handButton.Parent = frame
    
    -- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    local autoReplaceActive = false
    local visualsConnection = nil
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    manualButton.MouseButton1Click:Connect(function()
        manualButton.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        manualButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        task.spawn(function()
            local success, errorMsg = pcall(function()
                main()
            end)
            
            if success then
                task.wait(3)
                manualButton.Text = "üî• –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏"
                manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            else
                print("‚ùå –û—à–∏–±–∫–∞ –≤ main():", errorMsg)
                manualButton.Text = "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                manualButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
        end)
    end)
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–û–í–û–ô –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω—ã –≤ —Ä—É–∫–µ
    handButton.MouseButton1Click:Connect(function()
        handButton.Text = "‚è≥ –ó–∞–º–µ–Ω—è—é –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ..."
        handButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
        
        task.spawn(function()
            local success = replaceHandPetWithAnimation()
            
            if success then
                handButton.Text = "‚úÖ –ü–∏—Ç–æ–º–µ—Ü –∑–∞–º–µ–Ω–µ–Ω!"
                handButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                task.wait(2)
                handButton.Text = "‚úã –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
            else
                handButton.Text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã!"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                task.wait(2)
                handButton.Text = "‚úã –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
            end
        end)
    end)
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    autoButton.MouseButton1Click:Connect(function()
        if not autoReplaceActive then
            -- –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É
            autoButton.Text = "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..."
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
            
            task.spawn(function()
                visualsConnection = startWorkspaceScanning()
                autoReplaceActive = true
                
                autoButton.Text = "üîÑ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–ù)"
                autoButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            end)
        else
            -- –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É
            if visualsConnection then
                visualsConnection:Disconnect()
                visualsConnection = nil
            end
            
            autoReplaceActive = false
            autoButton.Text = "ü•ö –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–§–§)"
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
            
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workspace.visuals –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        end
    end)
    
    -- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    manualButton.MouseEnter:Connect(function()
        if manualButton.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            manualButton.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    manualButton.MouseLeave:Connect(function()
        if manualButton.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    -- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    autoButton.MouseEnter:Connect(function()
        if autoButton.BackgroundColor3 == Color3.fromRGB(255, 165, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
        elseif autoButton.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    autoButton.MouseLeave:Connect(function()
        if autoButton.BackgroundColor3 == Color3.fromRGB(255, 140, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        elseif autoButton.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
        print("üíª PetScaler v2.0 GUI —Å –∞–≤—Ç–æ–∑–∞–º–µ–Ω–æ–π —Å–æ–∑–¥–∞–Ω!")
    end)
    
    if not success then
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ GUI:", errorMsg)
        print("üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
        return false
    end
    
    return true
end

-- –°–æ–±—ã—Ç–∏–π–Ω–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ (–±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞)
local processedTools = {}
local autoConns = {}

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ Tool (–µ—Å—Ç—å –º–æ–¥–µ–ª—å —Å —á–∞—Å—Ç—è–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Pivot)
local function isPetReady(tool)
    if not tool or not tool.Parent then return false end
    if not tool:IsA("Tool") then return false end

    local foundModel = nil
    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("Model") then
            local hasPart = false
            for _, d in pairs(obj:GetDescendants()) do
                if d:IsA("BasePart") then
                    hasPart = true
                    break
                end
            end
            if hasPart then
                foundModel = obj
                break
            end
        end
    end

    if not foundModel then return false end

    local ok = pcall(function()
        return foundModel:GetPivot()
    end)
    return ok == true
end

-- –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—É—é –∏—Å—Ö–æ–¥–Ω—É—é –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤–Ω—É—Ç—Ä–∏ Tool (–∏—Å–∫–ª—é—á–∞—è –∫–æ–ø–∏—é)
pickOriginalHandPet = function(handTool, excludeModel)
    if not handTool then return nil end
    local best, bestScore = nil, -math.huge
    local handle = handTool:FindFirstChild("Handle")
    local handlePos = handle and handle:IsA("BasePart") and handle.Position or nil
    for _, obj in pairs(handTool:GetDescendants()) do
        if obj:IsA("Model") and obj ~= excludeModel and not (excludeModel and obj:IsDescendantOf(excludeModel)) then
            local parts = 0
            local firstPart = nil
            for _, d in pairs(obj:GetDescendants()) do
                if d:IsA("BasePart") then
                    parts = parts + 1
                    if not firstPart then firstPart = d end
                end
            end
            if parts > 0 then
                if not obj.PrimaryPart and firstPart then pcall(function() obj.PrimaryPart = firstPart end) end
                local score = parts
                if handlePos and obj.PrimaryPart then
                    local dist = (obj.PrimaryPart.Position - handlePos).Magnitude
                    score = score - dist * 0.1
                end
                if score > bestScore then
                    best, bestScore = obj, score
                end
            end
        end
    end
    return best
end

-- –ñ–¥—ë—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ñ—Ñ—Å–µ—Ç–∞ –º–µ–∂–¥—É Handle –∏ –º–æ–¥–µ–ª—å—é –ø–∏—Ç–æ–º—Ü–∞
waitStableRel = function(handle, model, maxTime)
    if not handle or not model or not model.PrimaryPart then return nil end
    maxTime = maxTime or 0.6
    local t0 = os.clock()
    local prevRel, stableCount = nil, 0
    while os.clock() - t0 < maxTime do
        local ok, rel = pcall(function()
            return handle.CFrame:ToObjectSpace(model.PrimaryPart.CFrame)
        end)
        if not ok then break end
        if prevRel then
            local dp = (rel.Position - prevRel.Position).Magnitude
            local dot = math.clamp(rel.LookVector:Dot(prevRel.LookVector), -1, 1)
            local angle = math.deg(math.acos(dot))
            if dp < 0.003 and angle < 0.6 then
                stableCount = stableCount + 1
                if stableCount >= 3 then
                    return rel
                end
            else
                stableCount = 0
            end
        end
        prevRel = rel
        task.wait(0.05)
    end
    return prevRel
end

-- –ù–∞—Ö–æ–¥–∏—Ç –º–æ–¥–µ–ª—å, —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–Ω—É—é —Å Handle (—á–µ—Ä–µ–∑ Weld/Motor/Constraint)
findModelBoundToHandle = function(handTool, handle, excludeModel)
    if not handTool or not handle then return nil end
    local function getModel(part)
        return part and part:FindFirstAncestorOfClass("Model") or nil
    end
    for _, obj in ipairs(handTool:GetDescendants()) do
        if obj:IsA("Constraint") or obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") then
            local p0 = obj.Part0 or obj.Attachment0 and obj.Attachment0.Parent
            local p1 = obj.Part1 or obj.Attachment1 and obj.Attachment1.Parent
            if p0 == handle or p1 == handle then
                local other = (p0 == handle) and p1 or p0
                local mdl = getModel(other)
                if mdl and mdl ~= excludeModel and not (excludeModel and mdl:IsDescendantOf(excludeModel)) then
                    return mdl
                end
            end
        end
    end
    return nil
end

-- –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å–æ–µ–¥–∏–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –æ—Ç Handle –∏ –≥–∞—Å–∏—Ç —Ñ–∏–∑–∏–∫—É, —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞–ª–∞ –∏–≥—Ä–æ–∫–∞
detachModelFromHandle = function(model, handle)
    if not model then return end
    for _, obj in ipairs(model:GetDescendants()) do
        if obj:IsA("Constraint") or obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") then
            local p0 = obj.Part0 or obj.Attachment0 and obj.Attachment0.Parent
            local p1 = obj.Part1 or obj.Attachment1 and obj.Attachment1.Parent
            if p0 == handle or p1 == handle then
                obj:Destroy()
            end
        end
    end
    for _, p in ipairs(model:GetDescendants()) do
        if p:IsA("BasePart") then
            p.Anchored = true
            p.CanCollide = false
            p.Massless = true
            p.AssemblyLinearVelocity = Vector3.new()
            p.AssemblyAngularVelocity = Vector3.new()
            p.Velocity = Vector3.new()
            p.RotVelocity = Vector3.new()
        elseif p:IsA("Decal") then
            p.Transparency = 1
        elseif p:IsA("Beam") or p:IsA("ParticleEmitter") or p:IsA("Trail") then
            p.Enabled = false
        end
    end
end

-- –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–ø–∏–∏ –≤ Tool, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–∞—Ä–æ–∫
removePriorCopies = function(handTool)
    if not handTool then return end
    for _, m in ipairs(handTool:GetChildren()) do
        if m:IsA("Model") and m:FindFirstChild("HandPetCopyTag") then
            m:Destroy()
        end
    end
end

local function disconnectAll()
    for _, c in ipairs(autoConns) do
        if c and c.Disconnect then c:Disconnect() end
    end
    table.clear(autoConns)
end

local function onEquipped(tool)
    if processedTools[tool] then return end
    task.spawn(function()
        -- –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (–¥–æ 2 —Å–µ–∫, —à–∞–≥ 0.05)
        local ready = false
        local t0 = os.clock()
        while os.clock() - t0 < 2 do
            if isPetReady(tool) then
                ready = true
                break
            end
            task.wait(0.05)
        end
        if not ready then return end

        print("\n‚úã –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ! –ó–∞–ø—É—Å–∫–∞—é –∑–∞–º–µ–Ω—É –ø–æ —Å–æ–±—ã—Ç–∏—é...")
        processedTools[tool] = true

        -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –∏ –∑–∞–ø—É—Å–∫ –∑–∞–º–µ–Ω—ã
        local playerGui = player:WaitForChild("PlayerGui")
        local gui = playerGui:FindFirstChild("PetScalerV2GUI")
        local handButton = gui and gui:FindFirstChild("HandButton")
        if handButton then
            handButton.Text = "‚è≥ –ó–∞–º–µ–Ω—è—é –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ..."
            handButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
        end

        local success = replaceHandPetWithAnimation()

        if handButton then
            if success then
                handButton.Text = "‚úÖ –ü–∏—Ç–æ–º–µ—Ü –∑–∞–º–µ–Ω–µ–Ω!"
                handButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                task.wait(2)
                handButton.Text = "‚úã –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
            else
                handButton.Text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã!"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                task.wait(2)
                handButton.Text = "‚úã –ó–∞–º–µ–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ"
                handButton.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
            end
        end

        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å–æ–±—ã—Ç–∏–µ)!")
    end)
end

local function hookTool(tool)
    table.insert(autoConns, tool.Equipped:Connect(function()
        onEquipped(tool)
    end))
    table.insert(autoConns, tool.Unequipped:Connect(function()
        processedTools[tool] = nil
    end))
    table.insert(autoConns, tool.Destroying:Connect(function()
        processedTools[tool] = nil
    end))
end

local function bindCharacter(char)
    -- –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —É–∂–µ –Ω–∞–¥–µ—Ç—ã–π Tool
    local currentTool = char:FindFirstChildOfClass("Tool")
    if currentTool then hookTool(currentTool) end
    -- –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    table.insert(autoConns, char.ChildAdded:Connect(function(obj)
        if obj:IsA("Tool") then
            hookTool(obj)
        end
    end))
end

if player and player.Character then
    bindCharacter(player.Character)
end
table.insert(autoConns, player.CharacterAdded:Connect(function(char)
    disconnectAll()
    bindCharacter(char)
end))

-- –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ GUI
if screenGui then
    table.insert(autoConns, screenGui.Destroying:Connect(function()
        disconnectAll()
    end))
end

print("‚úÖ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
print("üí° –í–æ–∑—å–º–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫—É ‚Äî –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

-- –ó–∞–ø—É—Å–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
local initSuccess, initError = pcall(function()
    local guiSuccess = createGUI()
    if not guiSuccess then
        error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GUI")
    end
end)

if initSuccess then
    print("=" .. string.rep("=", 70))
    print("üí° PETSCALER v2.0 + –ê–í–¢–û–ó–ê–ú–ï–ù–ê - –ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
    print("   üî• –†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï:")
    print("     1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
    print("     2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("     3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
    print("")
    print("   ü•ö –ù–û–í–û–ï! –ê–í–¢–û–ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ï–í:")
    print("     1. –ò—â–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –í –§–ò–ì–£–†–ù–´–• –°–ö–û–ë–ö–ê–• (–∫–∞–∫ —Ä—É—á–Ω–∞—è –∫–æ–ø–∏—è)")
    print("     2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
    print("     3. –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ")
    print("     4. –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ–ø–∏–π - —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è!")
    print("")
    print("üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print("   üî• –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏")
    print("   ü•ö –û—Ä–∞–Ω–∂–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –í–∫–ª/–û—Ç–∫–ª –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –ø–∏—Ç–æ–º—Ü–µ–≤")
    print("=" .. string.rep("=", 70))
    print("‚úÖ PetScaler v2.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
else
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PetScaler v2.0:")
    print("üìù –û—à–∏–±–∫–∞:", initError)
    print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
    print("üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GUI")
end
