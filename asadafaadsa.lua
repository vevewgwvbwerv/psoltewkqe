-- CompleteEggToHandAnalyzer.lua
-- –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†: –Ø–π—Ü–æ ‚Üí workspace.visuals ‚Üí Handle
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ü–û–õ–ù–´–ô –ø—É—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –æ—Ç –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞ –¥–æ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî¨ === COMPLETE EGG TO HAND ANALYZER ===")
print("üéØ –ê–Ω–∞–ª–∏–∑: –Ø–π—Ü–æ ‚Üí workspace.visuals ‚Üí Handle")
print("=" .. string.rep("=", 60))

-- üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
local CONFIG = {
    SEARCH_RADIUS = 250,
    MONITOR_DURATION = 60,
    CHECK_INTERVAL = 0.05,
    DEEP_ANALYSIS = true,
    TRACK_ALL_CHANGES = true
}

-- üéØ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –ü–ò–¢–û–ú–¶–ï–í
local PET_KEYWORDS = {
    "dog", "bunny", "golden lab", "dragonfly", "cat", "rabbit", "pet", "animal"
}

-- üìã –°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø
local TrackingData = {
    -- –§–∞–∑–∞ 1: –í–∑—Ä—ã–≤ —è–π—Ü–∞
    eggExplosion = {
        detected = false,
        location = nil,
        timestamp = 0
    },
    
    -- –§–∞–∑–∞ 2: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ workspace.visuals
    visualsAppearance = {
        detected = false,
        model = nil,
        timestamp = 0,
        structure = {}
    },
    
    -- –§–∞–∑–∞ 3: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Ä—É–∫–µ/handle
    handAppearance = {
        detected = false,
        tool = nil,
        timestamp = 0,
        structure = {}
    },
    
    -- –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    timeline = {},
    allModels = {},
    allTools = {}
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
local ConsoleGUI = nil
local ConsoleLines = {}
local MaxLines = 50

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createAnalysisConsole()
    if ConsoleGUI then ConsoleGUI:Destroy() end
    
    ConsoleGUI = Instance.new("ScreenGui")
    ConsoleGUI.Name = "CompleteEggAnalyzerConsole"
    ConsoleGUI.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 400)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.05, 0.05, 0.15)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.new(0.2, 0.4, 0.8)
    frame.Parent = ConsoleGUI
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(0.1, 0.2, 0.6)
    title.BorderSizePixel = 0
    title.Text = "üî¨ COMPLETE EGG TO HAND ANALYZER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -40)
    scrollFrame.Position = UDim2.new(0, 5, 0, 35)
    scrollFrame.BackgroundColor3 = Color3.new(0.02, 0.02, 0.08)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤. –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞..."
    textLabel.TextColor3 = Color3.new(0.9, 0.9, 1)
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
local function logToConsole(level, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local prefixes = {
        EGG = "ü•ö", VISUALS = "üåç", HANDLE = "üéÆ", STRUCTURE = "üèóÔ∏è",
        TIMELINE = "‚è±Ô∏è", CRITICAL = "üî•", FOUND = "üéØ", ERROR = "‚ùå"
    }
    
    local logLine = string.format("[%s] %s %s", timestamp, prefixes[level] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n    %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if ConsoleGUI then
        local textLabel = ConsoleGUI:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
        end
    end
    
    -- –¢–∞–∫–∂–µ –≤ –æ–±—ã—á–Ω—É—é –∫–æ–Ω—Å–æ–ª—å
    print(logLine)
end

-- ü•ö –§–ê–ó–ê 1: –î–µ—Ç–µ–∫—Ü–∏—è –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞
local function detectEggExplosion()
    local playerPos = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not playerPos then return false end
    
    -- –ü–æ–∏—Å–∫ EggExplode –≤ workspace
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj.Name == "EggExplode" and obj:IsA("Model") then
            local distance = (obj:GetModelCFrame().Position - playerPos.Position).Magnitude
            if distance <= CONFIG.SEARCH_RADIUS then
                TrackingData.eggExplosion.detected = true
                TrackingData.eggExplosion.location = obj:GetModelCFrame().Position
                TrackingData.eggExplosion.timestamp = tick()
                
                logToConsole("EGG", "üí• –í–ó–†–´–í –Ø–ô–¶–ê –û–ë–ù–ê–†–£–ñ–ï–ù!", {
                    Position = tostring(obj:GetModelCFrame().Position),
                    Distance = string.format("%.1f", distance),
                    Children = #obj:GetChildren()
                })
                
                -- –î–æ–±–∞–≤–ª—è–µ–º –≤ timeline
                table.insert(TrackingData.timeline, {
                    phase = "EGG_EXPLOSION",
                    timestamp = tick(),
                    data = obj
                })
                
                return true, obj
            end
        end
    end
    
    return false
end

-- üåç –§–ê–ó–ê 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workspace.visuals
local function monitorWorkspaceVisuals()
    local visuals = Workspace:FindFirstChild("visuals")
    if not visuals then
        logToConsole("ERROR", "‚ùå workspace.visuals –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    logToConsole("VISUALS", "üåç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workspace.visuals –∞–∫—Ç–∏–≤–µ–Ω")
    
    -- –°–Ω–∏–º–æ–∫ –î–û –≤–∑—Ä—ã–≤–∞
    local beforeModels = {}
    for _, child in pairs(visuals:GetChildren()) do
        if child:IsA("Model") then
            beforeModels[child.Name] = child
        end
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    local connection
    connection = visuals.ChildAdded:Connect(function(child)
        if child:IsA("Model") then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∏—Ç–æ–º—Ü–µ–º
            local isPet = false
            local petName = child.Name:lower()
            for _, keyword in ipairs(PET_KEYWORDS) do
                if petName:find(keyword) then
                    isPet = true
                    break
                end
            end
            
            if isPet then
                TrackingData.visualsAppearance.detected = true
                TrackingData.visualsAppearance.model = child
                TrackingData.visualsAppearance.timestamp = tick()
                
                logToConsole("VISUALS", "üéØ –ü–ò–¢–û–ú–ï–¶ –ü–û–Ø–í–ò–õ–°–Ø –í VISUALS!", {
                    Name = child.Name,
                    ClassName = child.ClassName,
                    Children = #child:GetChildren(),
                    Position = tostring(child:GetModelCFrame().Position)
                })
                
                -- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                analyzeModelStructure(child, "VISUALS")
                
                -- –î–æ–±–∞–≤–ª—è–µ–º –≤ timeline
                table.insert(TrackingData.timeline, {
                    phase = "VISUALS_APPEARANCE",
                    timestamp = tick(),
                    data = child
                })
                
                -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
                trackModelLifecycle(child, "VISUALS")
            end
        end
    end)
    
    return connection
end

-- üéÆ –§–ê–ó–ê 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Ä—É–∫–µ/handle
local function monitorHandAppearance()
    logToConsole("HANDLE", "üéÆ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ —Ä—É–∫–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    local character = player.Character
    if not character then
        logToConsole("ERROR", "‚ùå Character –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Tool –≤ character
    local connection
    connection = character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∏—Ç–æ–º—Ü–µ–º
            local isPet = false
            local toolName = child.Name:lower()
            for _, keyword in ipairs(PET_KEYWORDS) do
                if toolName:find(keyword) then
                    isPet = true
                    break
                end
            end
            
            if isPet then
                TrackingData.handAppearance.detected = true
                TrackingData.handAppearance.tool = child
                TrackingData.handAppearance.timestamp = tick()
                
                logToConsole("HANDLE", "üéØ –ü–ò–¢–û–ú–ï–¶ –ü–û–Ø–í–ò–õ–°–Ø –í –†–£–ö–ï!", {
                    Name = child.Name,
                    ClassName = child.ClassName,
                    Children = #child:GetChildren(),
                    Handle = child:FindFirstChild("Handle") and "‚úÖ" or "‚ùå"
                })
                
                -- –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Tool
                analyzeModelStructure(child, "HANDLE")
                
                -- –î–æ–±–∞–≤–ª—è–µ–º –≤ timeline
                table.insert(TrackingData.timeline, {
                    phase = "HANDLE_APPEARANCE",
                    timestamp = tick(),
                    data = child
                })
                
                -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
                trackModelLifecycle(child, "HANDLE")
            end
        end
    end)
    
    return connection
end

-- üèóÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò
local function analyzeModelStructure(model, phase)
    logToConsole("STRUCTURE", string.format("üèóÔ∏è –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ [%s]", phase), {
        Name = model.Name,
        ClassName = model.ClassName,
        Parent = model.Parent and model.Parent.Name or "NIL"
    })
    
    -- –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    local structure = {
        baseParts = 0,
        meshParts = 0,
        specialMeshes = 0,
        motor6ds = 0,
        welds = 0,
        attachments = 0,
        scripts = 0,
        animators = 0
    }
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            structure.baseParts = structure.baseParts + 1
        elseif obj:IsA("MeshPart") then
            structure.meshParts = structure.meshParts + 1
        elseif obj:IsA("SpecialMesh") then
            structure.specialMeshes = structure.specialMeshes + 1
        elseif obj:IsA("Motor6D") then
            structure.motor6ds = structure.motor6ds + 1
        elseif obj:IsA("Weld") then
            structure.welds = structure.welds + 1
        elseif obj:IsA("Attachment") then
            structure.attachments = structure.attachments + 1
        elseif obj:IsA("Script") or obj:IsA("LocalScript") then
            structure.scripts = structure.scripts + 1
            logToConsole("STRUCTURE", "üìú –ù–∞–π–¥–µ–Ω —Å–∫—Ä–∏–ø—Ç: " .. obj.Name)
        elseif obj:IsA("Animator") then
            structure.animators = structure.animators + 1
        end
    end
    
    logToConsole("STRUCTURE", string.format("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ [%s]:", phase), structure)
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if phase == "VISUALS" then
        TrackingData.visualsAppearance.structure = structure
    elseif phase == "HANDLE" then
        TrackingData.handAppearance.structure = structure
    end
end

-- ‚è±Ô∏è –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
local function trackModelLifecycle(model, phase)
    local startTime = tick()
    local modelName = model.Name
    
    logToConsole("TIMELINE", string.format("‚è±Ô∏è –ù–ê–ß–ê–õ–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø [%s]: %s", phase, modelName))
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            connection:Disconnect()
            local lifetime = tick() - startTime
            
            logToConsole("TIMELINE", string.format("üíÄ –ú–û–î–ï–õ–¨ –£–î–ê–õ–ï–ù–ê [%s]: %s", phase, modelName), {
                Lifetime = string.format("%.2f —Å–µ–∫", lifetime)
            })
            
            return
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        if math.floor((tick() - startTime) * 10) % 20 == 0 then
            local currentPos = model:GetModelCFrame().Position
            logToConsole("TIMELINE", string.format("üìç –ü–û–ó–ò–¶–ò–Ø [%s]: %s", phase, modelName), {
                Position = tostring(currentPos),
                Alive = string.format("%.1f —Å–µ–∫", tick() - startTime)
            })
        end
    end)
end

-- üîç –ü–û–ò–°–ö –ò–°–¢–û–ß–ù–ò–ö–û–í –°–û–ó–î–ê–ù–ò–Ø –ú–û–î–ï–õ–ò
local function analyzeModelSources()
    logToConsole("CRITICAL", "üîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–ß–ù–ò–ö–û–í –°–û–ó–î–ê–ù–ò–Ø –ú–û–î–ï–õ–ò")
    
    -- –ê–Ω–∞–ª–∏–∑ ReplicatedStorage
    logToConsole("CRITICAL", "üì¶ –ê–Ω–∞–ª–∏–∑ ReplicatedStorage...")
    local petModelsFound = 0
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            for _, keyword in ipairs(PET_KEYWORDS) do
                if name:find(keyword) then
                    petModelsFound = petModelsFound + 1
                    logToConsole("FOUND", "üéØ –ù–ê–ô–î–ï–ù–ê –ú–û–î–ï–õ–¨ –í REPLICATEDSTORAGE!", {
                        Name = obj.Name,
                        Path = obj:GetFullName(),
                        Children = #obj:GetChildren()
                    })
                end
            end
        end
    end
    
    logToConsole("CRITICAL", string.format("üìä –ù–∞–π–¥–µ–Ω–æ %d –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ ReplicatedStorage", petModelsFound))
end

-- üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê
local function startCompleteAnalysis()
    logToConsole("CRITICAL", "üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    logToConsole("CRITICAL", "üéØ –¶–µ–ª—å: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –Ø–π—Ü–æ ‚Üí workspace.visuals ‚Üí Handle")
    
    -- –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    TrackingData = {
        eggExplosion = {detected = false, location = nil, timestamp = 0},
        visualsAppearance = {detected = false, model = nil, timestamp = 0, structure = {}},
        handAppearance = {detected = false, tool = nil, timestamp = 0, structure = {}},
        timeline = {},
        allModels = {},
        allTools = {}
    }
    
    -- –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    analyzeModelSources()
    
    -- –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    local visualsConnection = monitorWorkspaceVisuals()
    local handConnection = monitorHandAppearance()
    
    -- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
    local startTime = tick()
    local mainConnection
    mainConnection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        -- –§–∞–∑–∞ 1: –ü–æ–∏—Å–∫ –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞
        if not TrackingData.eggExplosion.detected then
            local found, eggObj = detectEggExplosion()
            if found then
                logToConsole("EGG", "üí• –ü–ï–†–ï–•–û–î –ö –§–ê–ó–ï 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workspace.visuals")
            end
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        if elapsed > CONFIG.MONITOR_DURATION then
            logToConsole("CRITICAL", "‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            mainConnection:Disconnect()
            if visualsConnection then visualsConnection:Disconnect() end
            if handConnection then handConnection:Disconnect() end
            generateCompleteReport()
        end
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–∑
        if TrackingData.eggExplosion.detected and 
           TrackingData.visualsAppearance.detected and 
           TrackingData.handAppearance.detected then
            logToConsole("CRITICAL", "‚úÖ –í–°–ï –§–ê–ó–´ –ó–ê–í–ï–†–®–ï–ù–´! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            mainConnection:Disconnect()
            if visualsConnection then visualsConnection:Disconnect() end
            if handConnection then handConnection:Disconnect() end
            generateCompleteReport()
        end
    end)
    
    logToConsole("CRITICAL", "üî¨ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù!")
    logToConsole("CRITICAL", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ù–ê–ß–ê–õ–ê –ê–ù–ê–õ–ò–ó–ê!")
end

-- üìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –û–¢–ß–ï–¢–ê
local function generateCompleteReport()
    logToConsole("CRITICAL", "üìä === –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê ===")
    
    -- –§–∞–∑–∞ 1: –í–∑—Ä—ã–≤ —è–π—Ü–∞
    if TrackingData.eggExplosion.detected then
        logToConsole("EGG", "‚úÖ –§–ê–ó–ê 1: –í–∑—Ä—ã–≤ —è–π—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω", {
            Timestamp = string.format("%.2f —Å–µ–∫", TrackingData.eggExplosion.timestamp),
            Location = tostring(TrackingData.eggExplosion.location)
        })
    else
        logToConsole("EGG", "‚ùå –§–ê–ó–ê 1: –í–∑—Ä—ã–≤ —è–π—Ü–∞ –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
    end
    
    -- –§–∞–∑–∞ 2: workspace.visuals
    if TrackingData.visualsAppearance.detected then
        local delay = TrackingData.visualsAppearance.timestamp - TrackingData.eggExplosion.timestamp
        logToConsole("VISUALS", "‚úÖ –§–ê–ó–ê 2: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ workspace.visuals", {
            Model = TrackingData.visualsAppearance.model.Name,
            Delay = string.format("%.3f —Å–µ–∫ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞", delay),
            BaseParts = TrackingData.visualsAppearance.structure.baseParts,
            Motor6Ds = TrackingData.visualsAppearance.structure.motor6ds
        })
    else
        logToConsole("VISUALS", "‚ùå –§–ê–ó–ê 2: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ workspace.visuals –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    end
    
    -- –§–∞–∑–∞ 3: Handle/—Ä—É–∫–∞
    if TrackingData.handAppearance.detected then
        local delay = TrackingData.handAppearance.timestamp - TrackingData.eggExplosion.timestamp
        logToConsole("HANDLE", "‚úÖ –§–ê–ó–ê 3: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Ä—É–∫–µ/handle", {
            Tool = TrackingData.handAppearance.tool.Name,
            Delay = string.format("%.3f —Å–µ–∫ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞", delay),
            BaseParts = TrackingData.handAppearance.structure.baseParts,
            Motor6Ds = TrackingData.handAppearance.structure.motor6ds
        })
    else
        logToConsole("HANDLE", "‚ùå –§–ê–ó–ê 3: –ü–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Ä—É–∫–µ/handle –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    end
    
    -- Timeline
    logToConsole("TIMELINE", "‚è±Ô∏è –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–ò–ù–ò–Ø:")
    for i, event in ipairs(TrackingData.timeline) do
        logToConsole("TIMELINE", string.format("  %d. %s (%.3f —Å–µ–∫)", i, event.phase, event.timestamp))
    end
    
    logToConsole("CRITICAL", "üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.")
end

-- –°–æ–∑–¥–∞–µ–º GUI —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞
local function createMainGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CompleteEggAnalyzerGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 150)
    frame.Position = UDim2.new(1, -320, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.3)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 40)
    title.BackgroundColor3 = Color3.new(0.2, 0.2, 0.6)
    title.BorderSizePixel = 0
    title.Text = "üî¨ EGG TO HAND ANALYZER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 50)
    startBtn.Position = UDim2.new(0, 10, 0, 50)
    startBtn.BackgroundColor3 = Color3.new(0, 0.8, 0)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üöÄ –ù–ê–ß–ê–¢–¨ –ê–ù–ê–õ–ò–ó"
    startBtn.TextColor3 = Color3.new(1, 1, 1)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 40)
    status.Position = UDim2.new(0, 10, 0, 110)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.\n–û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞."
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.TextWrapped = true
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üî¨ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω!\n–û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ —Å–µ–π—á–∞—Å!"
        status.TextColor3 = Color3.new(0, 1, 0)
        startBtn.Text = "‚úÖ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startCompleteAnalysis()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createAnalysisConsole()
createMainGUI()

logToConsole("CRITICAL", "‚úÖ CompleteEggToHandAnalyzer –≥–æ—Ç–æ–≤!")
logToConsole("CRITICAL", "üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: –Ø–π—Ü–æ ‚Üí workspace.visuals ‚Üí Handle")
logToConsole("CRITICAL", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ù–ê–ß–ê–¢–¨ –ê–ù–ê–õ–ò–ó' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ!")
