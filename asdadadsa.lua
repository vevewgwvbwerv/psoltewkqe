-- üé≠ PetScaler CFrame Animation System - FINAL VERSION
-- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π CFrame —Å–∏—Å—Ç–µ–º—ã –≤ PetScaler –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

print("üé≠ === PetScaler CFrame Animation System - FINAL ===")
print("üîÑ –°–∏—Å—Ç–µ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è CFrame –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ –Ω–∞ –∫–æ–ø–∏—é")

-- üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SCALE_FACTOR = 0.3,  -- –ú–∞—Å—à—Ç–∞–± –∫–æ–ø–∏–∏
    INTERPOLATION_SPEED = 0.8,  -- –°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ CFrame
    HAND_PET_CHECK_INTERVAL = 1.0,  -- –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
    DEBUG_INTERVAL = 3.0,  -- –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    POSITION_THRESHOLD = 0.001,  -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    ROTATION_THRESHOLD = 0.001   -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
}

-- üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
local function findHandHeldPet()
    if not character then return nil end
    
    for _, tool in pairs(character:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name, "%[") and string.find(tool.Name, "KG%]") then
            return tool
        end
    end
    return nil
end

-- üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π –∏–∑ Tool (–≤–∫–ª—é—á–∞—è –ø–æ–¥–º–æ–¥–µ–ª–∏)
local function getAnimatedParts(tool)
    local parts = {}
    
    if not tool then return parts end
    
    -- –ò—â–µ–º –≤—Å–µ BasePart –≤ Tool, –≤–∫–ª—é—á–∞—è –ø–æ–¥–º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è Handle)
    for _, obj in pairs(tool:GetDescendants()) do
        if obj:IsA("BasePart") and obj.Name ~= "Handle" then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- üéØ –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏ –≤ –∫–æ–ø–∏–∏ –ø–æ –∏–º–µ–Ω–∏
local function findCorrespondingPart(copyModel, partName)
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("BasePart") and obj.Name == partName then
            return obj
        end
    end
    return nil
end

-- üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ CFrame —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–≤–æ—Ä–æ—Ç–∞
local function scaleCFrame(originalCFrame, scaleFactor)
    local originalPosition = originalCFrame.Position
    local scaledPosition = originalPosition * scaleFactor
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç, –Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
    return CFrame.new(scaledPosition) * (originalCFrame - originalCFrame.Position)
end

-- üé≠ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ CFrame –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è PetScaler
local function startPetScalerCFrameSystem(originalModel, copyModel)
    print("üé≠ –ó–∞–ø—É—Å–∫ PetScaler CFrame Animation System")
    print("üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª:", originalModel.Name)
    print("üì¶ –ö–æ–ø–∏—è:", copyModel.Name)
    
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –∫–æ–ø–∏–∏ –∑–∞—è–∫–æ—Ä–µ–Ω–∞
    local copyRootPart = copyModel.PrimaryPart or copyModel:FindFirstChild("Torso") or copyModel:FindFirstChild("HumanoidRootPart") or copyModel:FindFirstChild("RootPart")
    if copyRootPart then
        copyRootPart.Anchored = true
        print("‚öì –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –∫–æ–ø–∏–∏ –∑–∞—è–∫–æ—Ä–µ–Ω–∞:", copyRootPart.Name)
        
        -- –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º–∏
        for _, part in pairs(copyModel:GetDescendants()) do
            if part:IsA("BasePart") and part ~= copyRootPart then
                part.Anchored = false
            end
        end
        print("üîì –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–æ–ø–∏–∏ —Ä–∞–∑—ä—è–∫–æ—Ä–µ–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏")
    end
    
    -- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
    local handPetModel = nil
    local handPetParts = {}
    local lastHandPetCheck = 0
    local previousCFrameStates = {}
    local cframeChangeCount = 0
    local lastChangeTime = 0
    
    local connection = RunService.Heartbeat:Connect(function()
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not originalModel.Parent or not copyModel.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º—É")
            connection:Disconnect()
            return
        end
        
        local currentTime = tick()
        
        -- === üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===
        if currentTime - lastHandPetCheck >= CONFIG.HAND_PET_CHECK_INTERVAL then
            lastHandPetCheck = currentTime
            
            local foundTool = findHandHeldPet()
            
            if foundTool ~= handPetModel then
                handPetModel = foundTool
                handPetParts = getAnimatedParts(handPetModel)
                
                if handPetModel then
                    print("üéØ –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï –ù–ê–ô–î–ï–ù:", handPetModel.Name)
                    print("üîß –ê–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π:", #handPetParts)
                    
                    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CFrame
                    previousCFrameStates = {}
                    for _, part in ipairs(handPetParts) do
                        if part and part.Parent then
                            previousCFrameStates[part.Name] = part.CFrame
                        end
                    end
                    
                    cframeChangeCount = 0
                    lastChangeTime = currentTime
                else
                    print("‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    handPetParts = {}
                end
            end
        end
        
        -- === üìê LIVE –ö–û–ü–ò–†–û–í–ê–ù–ò–ï CFrame –°–û–°–¢–û–Ø–ù–ò–ô ===
        if handPetModel and #handPetParts > 0 then
            local appliedCount = 0
            local changesDetected = 0
            local debugInfo = {}
            
            -- üîç –ü–†–û–í–ï–†–ö–ê ANCHORED –°–û–°–¢–û–Ø–ù–ò–ô –ö–û–ü–ò–ò (—Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥)
            if math.floor(currentTime) % 10 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                local anchoredParts = 0
                local totalParts = 0
                for _, part in pairs(copyModel:GetDescendants()) do
                    if part:IsA("BasePart") then
                        totalParts = totalParts + 1
                        if part.Anchored then
                            anchoredParts = anchoredParts + 1
                        end
                    end
                end
                print(string.format("‚öì ANCHORED –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: %d/%d —á–∞—Å—Ç–µ–π –∑–∞—è–∫–æ—Ä–µ–Ω–æ", anchoredParts, totalParts))
            end
            
            -- üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò –ö–û–ü–ò–†–û–í–ê–ù–ò–ï CFrame –ò–ó–ú–ï–ù–ï–ù–ò–ô
            for _, handPart in ipairs(handPetParts) do
                if handPart and handPart.Parent then
                    local partName = handPart.Name
                    local currentCFrame = handPart.CFrame
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    local hasChanged = false
                    if previousCFrameStates[partName] then
                        local prevCFrame = previousCFrameStates[partName]
                        local positionDiff = (currentCFrame.Position - prevCFrame.Position).Magnitude
                        local rotationDiff = math.abs(currentCFrame.LookVector:Dot(prevCFrame.LookVector) - 1)
                        
                        if positionDiff > CONFIG.POSITION_THRESHOLD or rotationDiff > CONFIG.ROTATION_THRESHOLD then
                            hasChanged = true
                            changesDetected = changesDetected + 1
                        end
                    end
                    
                    -- –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    previousCFrameStates[partName] = currentCFrame
                    
                    -- –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å –≤ –∫–æ–ø–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º CFrame
                    local copyPart = findCorrespondingPart(copyModel, partName)
                    if copyPart then
                        local success, errorMsg = pcall(function()
                            -- üìê –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–ò–ú–ï–ù–ï–ù–ò–ï CFrame
                            local scaledCFrame = scaleCFrame(currentCFrame, CONFIG.SCALE_FACTOR)
                            
                            -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∫ –Ω–µ–∑–∞—è–∫–æ—Ä–µ–Ω–Ω—ã–º —á–∞—Å—Ç—è–º)
                            if not copyPart.Anchored then
                                copyPart.CFrame = copyPart.CFrame:Lerp(scaledCFrame, CONFIG.INTERPOLATION_SPEED)
                            end
                            
                            -- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            table.insert(debugInfo, {
                                name = partName,
                                changed = hasChanged,
                                anchored = copyPart.Anchored,
                                applied = not copyPart.Anchored
                            })
                        end)
                        
                        if success then
                            appliedCount = appliedCount + 1
                        else
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ CFrame", partName, ":", errorMsg)
                        end
                    end
                end
            end
            
            -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if changesDetected > 0 then
                cframeChangeCount = cframeChangeCount + changesDetected
                lastChangeTime = currentTime
            end
            
            -- üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            if math.floor(currentTime) % CONFIG.DEBUG_INTERVAL == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("üìê LIVE CFrame –ö–û–ü–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–∏–º–µ–Ω–µ–Ω–æ", appliedCount, "/", #handPetParts, "CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                
                -- üéØ –û–¢–ß–ï–¢ –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–• –í –ü–ò–¢–û–ú–¶–ï –í –†–£–ö–ï
                local timeSinceLastChange = currentTime - lastChangeTime
                print(string.format("üé≠ –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï: %d –∏–∑–º–µ–Ω–µ–Ω–∏–π CFrame, –ø–æ—Å–ª–µ–¥–Ω–µ–µ %.1f —Å–µ–∫ –Ω–∞–∑–∞–¥", 
                    cframeChangeCount, timeSinceLastChange))
                
                if changesDetected > 0 then
                    print(string.format("‚úÖ CFrame –ê–ù–ò–ú–ê–¶–ò–Ø –ö–û–ü–ò–†–£–ï–¢–°–Ø: %d —á–∞—Å—Ç–µ–π –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!", changesDetected))
                else
                    print("‚ö†Ô∏è –ü–ò–¢–û–ú–ï–¶ –°–¢–ê–¢–ò–ß–ï–ù: CFrame –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è")
                end
                
                -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                for i = 1, math.min(3, #debugInfo) do
                    local info = debugInfo[i]
                    print(string.format("üìê %s: Changed=%s Anchored=%s Applied=%s", 
                        info.name, tostring(info.changed), tostring(info.anchored), tostring(info.applied)))
                end
            end
        else
            -- –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∫–æ–ø–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–µ
            if math.floor(currentTime) % 10 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("‚è∏Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—è –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –ø–æ–∑–µ")
            end
        end
    end)
    
    return connection
end

-- üöÄ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã
local function autoStartPetScaler()
    print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    -- –ò—â–µ–º –º–æ–¥–µ–ª–∏ –≤ Workspace
    local pets = {}
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") then
            local hasHead = obj:FindFirstChild("Head")
            local hasTorso = obj:FindFirstChild("Torso") or obj:FindFirstChild("UpperTorso") or obj:FindFirstChild("RootPart")
            
            if (hasHead or hasTorso) and obj.Name ~= character.Name then
                table.insert(pets, obj)
                print("üêï –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name)
            end
        end
    end
    
    if #pets >= 2 then
        local originalPet = pets[1]
        local copyPet = pets[2]
        
        print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä:")
        print("üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª:", originalPet.Name)
        print("üì¶ –ö–æ–ø–∏—è:", copyPet.Name)
        
        return startPetScalerCFrameSystem(originalPet, copyPet)
    else
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞")
        print("üí° –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π:", #pets, "| –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2")
        return nil
    end
end

-- üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ —É–∫–∞–∂–∏ –º–æ–¥–µ–ª–∏)
local function manualStartPetScaler(originalName, copyName)
    local originalPet = Workspace:FindFirstChild(originalName)
    local copyPet = Workspace:FindFirstChild(copyName)
    
    if originalPet and copyPet then
        print("üéØ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:")
        print("üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª:", originalPet.Name)
        print("üì¶ –ö–æ–ø–∏—è:", copyPet.Name)
        
        return startPetScalerCFrameSystem(originalPet, copyPet)
    else
        print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
        print("üì¶ –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞–π–¥–µ–Ω:", originalPet and "‚úÖ" or "‚ùå")
        print("üì¶ –ö–æ–ø–∏—è –Ω–∞–π–¥–µ–Ω–∞:", copyPet and "‚úÖ" or "‚ùå")
        return nil
    end
end

-- üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö
print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
local petScalerConnection = autoStartPetScaler()

if petScalerConnection then
    print("‚úÖ PetScaler CFrame System –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üéí –í–æ–∑—å–º–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: petScalerConnection:Disconnect()")
else
    print("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è")
    print("üí° –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π: manualStartPetScaler('OriginalName', 'CopyName')")
end

-- –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
return {
    startPetScalerCFrameSystem = startPetScalerCFrameSystem,
    autoStartPetScaler = autoStartPetScaler,
    manualStartPetScaler = manualStartPetScaler,
    CONFIG = CONFIG
}

-- üß™ –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –∏–∑–º–µ–Ω–∏ –∏–º–µ–Ω–∞):
--[[
local connection = manualStartPetScaler("OriginalPetName", "CopyPetName")
if connection then
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é!")
end
--]]
