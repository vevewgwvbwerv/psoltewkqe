-- DragonflyFinder.lua
-- –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Dragonfly –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ

local Players = game:GetService("Players")
local player = Players.LocalPlayer

print("=== –ü–û–ò–°–ö DRAGONFLY ===")

local playerGui = player:FindFirstChild("PlayerGui")
if not playerGui then
    print("ERROR: PlayerGui –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local backpackGui = playerGui:FindFirstChild("BackpackGui")
if not backpackGui then
    print("ERROR: BackpackGui –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

print("SUCCESS: BackpackGui –Ω–∞–π–¥–µ–Ω!")

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º "dragonfly"
local function findAllDragonfly()
    print("üîç –ò—â—É –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º 'dragonfly'...")
    
    local found = {}
    
    for _, desc in pairs(backpackGui:GetDescendants()) do
        if desc:IsA("TextLabel") and desc.Text:lower():find("dragonfly") then
            -- –ù–∞–π–¥–µ–º –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            local path = desc.Name
            local parent = desc.Parent
            local fullPath = {}
            
            while parent and parent ~= backpackGui do
                table.insert(fullPath, 1, parent.Name .. "(" .. parent.ClassName .. ")")
                parent = parent.Parent
            end
            
            local pathString = "BackpackGui/" .. table.concat(fullPath, "/") .. "/" .. desc.Name
            
            print("‚úÖ –ù–ê–ô–î–ï–ù: " .. desc.Text)
            print("   üìç –ü—É—Ç—å: " .. pathString)
            print("   üîß –†–æ–¥–∏—Ç–µ–ª—å: " .. desc.Parent.Name .. " (" .. desc.Parent.ClassName .. ")")
            
            table.insert(found, {
                element = desc,
                text = desc.Text,
                parent = desc.Parent,
                path = pathString
            })
        end
    end
    
    return found
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö CategoryFrame
local function findAllCategoryFrames()
    print("üîç –ò—â—É –≤—Å–µ CategoryFrame...")
    
    local frames = {}
    
    for _, desc in pairs(backpackGui:GetDescendants()) do
        if desc.Name == "CategoryFrame" and desc:IsA("Frame") then
            -- –ù–∞–π–¥–µ–º –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            local path = desc.Name
            local parent = desc.Parent
            local fullPath = {}
            
            while parent and parent ~= backpackGui do
                table.insert(fullPath, 1, parent.Name .. "(" .. parent.ClassName .. ")")
                parent = parent.Parent
            end
            
            local pathString = "BackpackGui/" .. table.concat(fullPath, "/") .. "/" .. desc.Name
            
            -- –°—á–∏—Ç–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ CategoryFrame
            local buttonCount = 0
            for _, child in pairs(desc:GetChildren()) do
                if child:IsA("TextButton") then
                    buttonCount = buttonCount + 1
                end
            end
            
            print("‚úÖ –ù–ê–ô–î–ï–ù CategoryFrame: " .. pathString)
            print("   üìä –ö–Ω–æ–ø–æ–∫ –≤ CategoryFrame: " .. buttonCount)
            
            table.insert(frames, {
                element = desc,
                path = pathString,
                buttonCount = buttonCount
            })
        end
    end
    
    return frames
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö TextButton —Å –Ω–æ–º–µ—Ä–∞–º–∏
local function findNumberedButtons()
    print("üîç –ò—â—É –≤—Å–µ TextButton —Å –Ω–æ–º–µ—Ä–∞–º–∏...")
    
    local buttons = {}
    
    for _, desc in pairs(backpackGui:GetDescendants()) do
        if desc:IsA("TextButton") and tonumber(desc.Name) then
            -- –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤ –∫–Ω–æ–ø–∫–µ
            local buttonText = "–ø—É—Å—Ç–æ"
            for _, child in pairs(desc:GetDescendants()) do
                if child:IsA("TextLabel") and child.Text ~= "" then
                    buttonText = child.Text
                    break
                end
            end
            
            -- –ù–∞–π–¥–µ–º –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            local parent = desc.Parent
            local parentPath = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if parent then
                parentPath = parent.Name .. "(" .. parent.ClassName .. ")"
            end
            
            print("üî¢ –ö–Ω–æ–ø–∫–∞ " .. desc.Name .. ": " .. buttonText)
            print("   üìç –†–æ–¥–∏—Ç–µ–ª—å: " .. parentPath)
            
            if buttonText:lower():find("dragonfly") then
                print("   üêâ –≠–¢–û DRAGONFLY!")
                table.insert(buttons, {
                    element = desc,
                    name = desc.Name,
                    text = buttonText,
                    parent = parent
                })
            end
        end
    end
    
    return buttons
end

-- –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
print("")
local dragonflyLabels = findAllDragonfly()

print("")
local categoryFrames = findAllCategoryFrames()

print("")
local dragonflyButtons = findNumberedButtons()

print("")
print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
print("–ù–∞–π–¥–µ–Ω–æ Dragonfly —Ç–µ–∫—Å—Ç–æ–≤: " .. #dragonflyLabels)
print("–ù–∞–π–¥–µ–Ω–æ CategoryFrame: " .. #categoryFrames)
print("–ù–∞–π–¥–µ–Ω–æ Dragonfly –∫–Ω–æ–ø–æ–∫: " .. #dragonflyButtons)

if #dragonflyButtons > 0 then
    local button = dragonflyButtons[1]
    print("")
    print("‚úÖ –õ–£–ß–®–ò–ô –ö–ê–ù–î–ò–î–ê–¢:")
    print("–ö–Ω–æ–ø–∫–∞: " .. button.name)
    print("–¢–µ–∫—Å—Ç: " .. button.text)
    print("–†–æ–¥–∏—Ç–µ–ª—å: " .. button.parent.Name .. " (" .. button.parent.ClassName .. ")")
    print("")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DragonflyTransfer!")
end

print("=== –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù ===")
