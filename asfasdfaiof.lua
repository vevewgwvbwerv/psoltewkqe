-- === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –ò –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–Ø –ü–ò–¢–û–ú–¶–ï–í ===
-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ Weld/Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üîó === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–ô –ó–ê–ü–£–©–ï–ù–ê ===")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
local function analyzeConnection(connection)
    local info = {
        name = connection.Name,
        type = connection.ClassName,
        part0 = connection.Part0 and connection.Part0.Name or "nil",
        part1 = connection.Part1 and connection.Part1.Name or "nil",
        part0Parent = nil,
        part1Parent = nil,
        part0Model = nil,
        part1Model = nil
    }
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Part0
    if connection.Part0 then
        info.part0Parent = connection.Part0.Parent and connection.Part0.Parent.Name or "nil"
        
        -- –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è Part0
        local model = connection.Part0.Parent
        while model and not model:IsA("Model") and model ~= game.Workspace do
            model = model.Parent
        end
        if model and model:IsA("Model") then
            info.part0Model = model.Name
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Part1
    if connection.Part1 then
        info.part1Parent = connection.Part1.Parent and connection.Part1.Parent.Name or "nil"
        
        -- –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è Part1
        local model = connection.Part1.Parent
        while model and not model:IsA("Model") and model ~= game.Workspace do
            model = model.Parent
        end
        if model and model:IsA("Model") then
            info.part1Model = model.Name
        end
    end
    
    return info
end

-- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
local lastConnections = {}
local frameCount = 0

local connectionTracker = RunService.Heartbeat:Connect(function()
    frameCount = frameCount + 1
    
    local character = player.Character
    if not character then return end
    
    -- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    local currentConnections = {}
    for _, obj in pairs(character:GetDescendants()) do
        if obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") then
            currentConnections[obj] = true
        end
    end
    
    -- –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for connection, _ in pairs(currentConnections) do
        if not lastConnections[connection] then
            local info = analyzeConnection(connection)
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å Handle –∏–ª–∏ –ø–∏—Ç–æ–º—Ü–µ–º
            local isHandleConnection = (info.part0 == "Handle" or info.part1 == "Handle")
            local isPetConnection = (info.part0Model and (info.part0Model:find("Golden") or info.part0Model:find("Dog") or info.part0Model:find("Bunny") or info.part0Model:find("%{"))) or
                                   (info.part1Model and (info.part1Model:find("Golden") or info.part1Model:find("Dog") or info.part1Model:find("Bunny") or info.part1Model:find("%{")))
            
            if isHandleConnection or isPetConnection then
                print("\nüîó === –ù–û–í–û–ï –í–ê–ñ–ù–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï ===")
                print("‚è∞ –í—Ä–µ–º—è:", os.date("%H:%M:%S"))
                print("üìõ –ò–º—è:", info.name)
                print("üîß –¢–∏–ø:", info.type)
                print("üîó " .. info.part0 .. " ‚Üî " .. info.part1)
                print("üìç –†–æ–¥–∏—Ç–µ–ª–∏: " .. info.part0Parent .. " ‚Üî " .. info.part1Parent)
                
                if info.part0Model or info.part1Model then
                    print("üè† –ú–æ–¥–µ–ª–∏: " .. (info.part0Model or "nil") .. " ‚Üî " .. (info.part1Model or "nil"))
                end
                
                if isHandleConnection then
                    print("ü§è *** –≠–¢–û –°–û–ï–î–ò–ù–ï–ù–ò–ï –° HANDLE! ***")
                    
                    -- –ù–∞—Ö–æ–¥–∏–º –ø–∏—Ç–æ–º—Ü–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å Handle
                    local petPart = info.part0 == "Handle" and connection.Part1 or connection.Part0
                    if petPart then
                        print("üêæ –ü–∏—Ç–æ–º–µ—Ü —Å–æ–µ–¥–∏–Ω–µ–Ω —Å Handle —á–µ—Ä–µ–∑:", petPart.Name)
                        
                        -- –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞
                        local petModel = petPart.Parent
                        while petModel and not petModel:IsA("Model") and petModel ~= character do
                            petModel = petModel.Parent
                        end
                        
                        if petModel and petModel:IsA("Model") then
                            print("üè† –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï:", petModel.Name)
                            print("üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏:", petModel.Parent and petModel.Parent.Name or "nil")
                            
                            -- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                            print("\nüîç === –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===")
                            print("üì¶ –ò–º—è –º–æ–¥–µ–ª–∏:", petModel.Name)
                            print("üî¢ –î–µ—Ç–∏ –º–æ–¥–µ–ª–∏:", #petModel:GetChildren())
                            
                            -- –°—á–∏—Ç–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                            local meshCount = 0
                            local motorCount = 0
                            local partCount = 0
                            
                            for _, desc in pairs(petModel:GetDescendants()) do
                                if desc:IsA("MeshPart") then
                                    meshCount = meshCount + 1
                                elseif desc:IsA("Motor6D") then
                                    motorCount = motorCount + 1
                                elseif desc:IsA("BasePart") then
                                    partCount = partCount + 1
                                end
                            end
                            
                            print("üß© MeshParts:", meshCount)
                            print("üé≠ Motor6Ds:", motorCount)
                            print("üß± BaseParts:", partCount)
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞
                            if petModel.Name:find("%{") and petModel.Name:find("%}") then
                                print("üîë *** –≠–¢–û –£–ñ–ï UUID –ü–ò–¢–û–ú–ï–¶! ***")
                            else
                                print("ü•ö *** –≠–¢–û –ü–ò–¢–û–ú–ï–¶ –ò–ó –Ø–ô–¶–ê - –ù–£–ñ–ù–ê –ó–ê–ú–ï–ù–ê! ***")
                            end
                        end
                    end
                end
                
                print(string.rep("=", 50))
            end
        end
    end
    
    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    for connection, _ in pairs(lastConnections) do
        if not currentConnections[connection] then
            local info = analyzeConnection(connection)
            if info.part0 == "Handle" or info.part1 == "Handle" then
                print("\nüóëÔ∏è === –°–û–ï–î–ò–ù–ï–ù–ò–ï –° HANDLE –£–î–ê–õ–ï–ù–û ===")
                print("üìõ –ë—ã–ª–æ:", info.name, "(" .. info.type .. ")")
                print("üîó –°–æ–µ–¥–∏–Ω—è–ª–æ:", info.part0, "‚Üî", info.part1)
            end
        end
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lastConnections = currentConnections
    if activeTool then
        lastToolState = {name = activeTool.Name, tool = activeTool}
    else
        lastToolState = nil
    end
end)

print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞!")
print("üéØ –í–æ–∑—å–º–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

return connectionTracker
