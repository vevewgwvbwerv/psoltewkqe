-- üî• COMPREHENSIVE EGG PET ANIMATION ANALYZER
-- –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 10 —Å–∫—Ä–∏–ø—Ç–æ–≤: EggAnimationDiagnostic, AdvancedEggDiagnostic, EggExplosionTracker,
-- CorrectEggDiagnostic, RealPetModelFinder, EggExplodeAnalyzer, PrecisePetModelFilter, 
-- AggressiveModelCatcher, UniversalTempModelAnalyzer, PreciseAnimationModelFinder
-- 
-- –¶–ï–õ–¨: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ workspace.visuals –∏ eggexplode
-- –ù–∞—Ö–æ–¥–∏—Ç –º–æ–¥–µ–ª–∏: dog, bunny, golden lab –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
local CONFIG = {
    SEARCH_RADIUS = 200,
    MONITOR_DURATION = 30,
    CHECK_INTERVAL = 0.05,
    ANALYSIS_DEPTH = 8,
    MIN_CHILD_COUNT = 10,
    MIN_MESH_COUNT = 1
}

-- üéØ –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –ü–ò–¢–û–ú–¶–ï–í (–∏–∑ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
local PET_KEYWORDS = {
    "dog", "bunny", "golden lab", "cat", "rabbit", "pet", "animal", "golden", "lab"
}

-- üö´ –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø (–∏–∑ PrecisePetModelFilter –∏ –¥—Ä—É–≥–∏—Ö)
local EXCLUDED_NAMES = {
    "EggExplode", "CraftingTables", "EventCraftingWorkBench", "Fruit", "Tree", 
    "Bush", "Platform", "Stand", "Bench", "Table", "Chair", "Decoration"
}

-- üìã –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
local Logger = {
    log = function(self, level, message, data)
        local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
        local prefixes = {
            EXPLOSION = "üí•", PET = "üêæ", ANIMATION = "üé¨", STRUCTURE = "üèóÔ∏è",
            MESH = "üé®", LIFECYCLE = "‚è±Ô∏è", CRITICAL = "üî•", FOUND = "üéØ"
        }
        
        print(string.format("[%s] %s %s", timestamp, prefixes[level] or "‚ÑπÔ∏è", message))
        
        if data and next(data) then
            for key, value in pairs(data) do
                print(string.format("    %s: %s", key, tostring(value)))
            end
        end
    end
}

-- üîç –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê EGGEXPLODE (–∏–∑ CorrectEggDiagnostic)
local function checkForEggExplode()
    -- –ò—â–µ–º –≤ ReplicatedStorage
    for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
        if obj.Name == "EggExplode" and obj:IsA("Model") then
            return true, obj, "ReplicatedStorage"
        end
    end
    
    -- –ò—â–µ–º –≤ Workspace
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj.Name == "EggExplode" and obj:IsA("Model") then
            return true, obj, "Workspace"
        elseif obj.Name:lower():find("eggexplode") or (obj.Name:lower():find("egg") and obj.Name:lower():find("explode")) then
            return true, obj, "Workspace"
        end
    end
    
    return false, nil, nil
end

-- üéØ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ú–û–î–ï–õ–ò –ü–ò–¢–û–ú–¶–ê (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤)
local function isPetModel(model)
    -- 1. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å Model
    if not model:IsA("Model") then return false end
    
    -- 2. –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    for _, excluded in pairs(EXCLUDED_NAMES) do
        if model.Name:find(excluded) then return false end
    end
    
    -- 3. –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–æ–≤
    if model.Name:find("%[") and model.Name:find("KG") and model.Name:find("Age") then
        return false
    end
    
    -- 4. –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for _, p in pairs(Players:GetPlayers()) do
        if model.Name == p.Name or model.Name:find(p.Name) then
            return false
        end
    end
    
    -- 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—à–µ–π
    local meshCount = 0
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") or obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
        end
    end
    
    if meshCount < CONFIG.MIN_MESH_COUNT then return false end
    
    -- 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
    if #model:GetChildren() < CONFIG.MIN_CHILD_COUNT then return false end
    
    -- 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞
    local playerChar = player.Character
    if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
            if distance > CONFIG.SEARCH_RADIUS then return false end
        end
    end
    
    return true
end

-- üèóÔ∏è –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ (–∏–∑ EggExplodeAnalyzer –∏ UniversalTempModelAnalyzer)
local function deepAnalyzeStructure(obj, depth, parentPath)
    depth = depth or 0
    parentPath = parentPath or ""
    local indent = string.rep("  ", depth)
    
    if depth > CONFIG.ANALYSIS_DEPTH then return end
    
    local currentPath = parentPath .. "/" .. obj.Name
    
    Logger:log("STRUCTURE", indent .. "üì¶ " .. obj.Name .. " (" .. obj.ClassName .. ")", {
        FullPath = currentPath,
        Parent = obj.Parent and obj.Parent.Name or "nil"
    })
    
    -- –ê–Ω–∞–ª–∏–∑ BasePart
    if obj:IsA("BasePart") then
        local partData = {
            Size = tostring(obj.Size),
            Position = tostring(obj.Position),
            Transparency = obj.Transparency,
            Color = tostring(obj.Color),
            Material = obj.Material.Name,
            CanCollide = obj.CanCollide,
            Anchored = obj.Anchored
        }
        Logger:log("STRUCTURE", indent .. "  üß± BasePart Properties", partData)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ MeshPart/SpecialMesh
    if obj:IsA("MeshPart") then
        local meshData = {
            MeshId = obj.MeshId or "EMPTY",
            TextureId = obj.TextureId or "EMPTY",
            MeshSize = tostring(obj.MeshSize or "nil")
        }
        Logger:log("MESH", indent .. "  üé® MeshPart Data", meshData)
    elseif obj:IsA("SpecialMesh") then
        local meshData = {
            MeshId = obj.MeshId or "EMPTY",
            TextureId = obj.TextureId or "EMPTY",
            MeshType = obj.MeshType.Name,
            Scale = tostring(obj.Scale)
        }
        Logger:log("MESH", indent .. "  üé® SpecialMesh Data", meshData)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Motor6D –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if obj:IsA("Motor6D") then
        local motorData = {
            C0 = tostring(obj.C0),
            C1 = tostring(obj.C1),
            Part0 = obj.Part0 and obj.Part0.Name or "nil",
            Part1 = obj.Part1 and obj.Part1.Name or "nil"
        }
        Logger:log("ANIMATION", indent .. "  üé¨ Motor6D Data", motorData)
    end
    
    -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ç–µ–π
    for _, child in pairs(obj:GetChildren()) do
        deepAnalyzeStructure(child, depth + 1, currentPath)
    end
end

-- ‚è±Ô∏è –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê (–∏–∑ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
local function trackLifecycle(model)
    local startTime = tick()
    local modelName = model.Name
    
    Logger:log("LIFECYCLE", "‚è±Ô∏è –ù–ê–ß–ê–õ–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø: " .. modelName)
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏/–∞–Ω–∏–º–∞—Ü–∏–∏
    local lastPosition = nil
    local animationFrames = {}
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not model or not model.Parent then
            connection:Disconnect()
            local lifetime = tick() - startTime
            
            Logger:log("LIFECYCLE", "‚è±Ô∏è –ú–û–î–ï–õ–¨ –ò–°–ß–ï–ó–õ–ê: " .. modelName, {
                lifetime = string.format("%.2f —Å–µ–∫—É–Ω–¥", lifetime),
                animationFrames = #animationFrames
            })
            
            if #animationFrames > 0 then
                Logger:log("ANIMATION", "üé¨ –ó–ê–ü–ò–°–ê–ù–ù–´–ï –ö–ê–î–†–´ –ê–ù–ò–ú–ê–¶–ò–ò: " .. #animationFrames)
            end
            return
        end
        
        -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
        local success, currentCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            if not lastPosition or (currentCFrame.Position - lastPosition).Magnitude > 0.1 then
                table.insert(animationFrames, {
                    time = tick() - startTime,
                    position = currentCFrame.Position,
                    rotation = currentCFrame.Rotation
                })
                lastPosition = currentCFrame.Position
                
                Logger:log("ANIMATION", "üé¨ –ö–ê–î–† –ê–ù–ò–ú–ê–¶–ò–ò", {
                    frame = #animationFrames,
                    time = string.format("%.2f", tick() - startTime),
                    position = tostring(currentCFrame.Position)
                })
            end
        end
    end)
end

-- üéØ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê
local function startComprehensiveAnalysis()
    Logger:log("CRITICAL", "üî• –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ê–ù–ò–ú–ê–¶–ò–ò –ü–ò–¢–û–ú–¶–ï–í –ò–ó –Ø–ò–¶")
    Logger:log("CRITICAL", "üéØ –¶–µ–ª—å: dog, bunny, golden lab –∏ –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
    Logger:log("CRITICAL", "üìã –ê–Ω–∞–ª–∏–∑: workspace.visuals, eggexplode, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∞–Ω–∏–º–∞—Ü–∏—è")
    
    local eggExplodeDetected = false
    local analysisStartTime = 0
    local processedModels = {}
    local foundPetModels = {}
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        -- –§–∞–∑–∞ 1: –ü–æ–∏—Å–∫ EggExplode
        if not eggExplodeDetected then
            local found, eggObj, location = checkForEggExplode()
            if found then
                eggExplodeDetected = true
                analysisStartTime = tick()
                
                Logger:log("EXPLOSION", "üí• EGGEXPLODE –û–ë–ù–ê–†–£–ñ–ï–ù –í " .. location .. "!")
                Logger:log("EXPLOSION", "üí• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
                
                -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∞–º EggExplode
                if eggObj then
                    Logger:log("EXPLOSION", "üí• –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ EGGEXPLODE:")
                    deepAnalyzeStructure(eggObj, 0, "EggExplode")
                end
            end
        else
            -- –§–∞–∑–∞ 2: –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤
            local elapsed = tick() - analysisStartTime
            
            if elapsed > CONFIG.MONITOR_DURATION then
                Logger:log("CRITICAL", "üî• –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–Å–ù –ü–û –¢–ê–ô–ú–ê–£–¢–£")
                connection:Disconnect()
                
                if #foundPetModels > 0 then
                    Logger:log("CRITICAL", "üî• –ù–ê–ô–î–ï–ù–ù–´–ï –ú–û–î–ï–õ–ò –ü–ò–¢–û–ú–¶–ï–í:")
                    for i, petData in pairs(foundPetModels) do
                        Logger:log("PET", string.format("üêæ –ü–∏—Ç–æ–º–µ—Ü %d: %s", i, petData.name), petData.summary)
                    end
                else
                    Logger:log("CRITICAL", "‚ùå –ú–û–î–ï–õ–ò –ü–ò–¢–û–ú–¶–ï–í –ù–ï –ù–ê–ô–î–ï–ù–´!")
                end
                return
            end
            
            -- –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") and obj ~= player.Character and not processedModels[obj] then
                    processedModels[obj] = true
                    
                    if isPetModel(obj) then
                        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
                        local isPotentialPet = false
                        for _, keyword in pairs(PET_KEYWORDS) do
                            if obj.Name:lower():find(keyword) then
                                isPotentialPet = true
                                break
                            end
                        end
                        
                        if isPotentialPet then
                            Logger:log("FOUND", "üéØ –ù–ê–ô–î–ï–ù–ê –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê: " .. obj.Name)
                            
                            local petData = {
                                name = obj.Name,
                                foundTime = elapsed,
                                summary = {
                                    childCount = #obj:GetChildren(),
                                    hasHumanoid = obj:FindFirstChild("Humanoid") ~= nil,
                                    hasPrimaryPart = obj.PrimaryPart ~= nil
                                }
                            }
                            
                            table.insert(foundPetModels, petData)
                            
                            -- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                            Logger:log("PET", "üêæ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´: " .. obj.Name)
                            deepAnalyzeStructure(obj, 0, obj.Name)
                            
                            -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                            trackLifecycle(obj)
                        end
                    end
                end
            end
        end
    end)
    
    Logger:log("CRITICAL", "üî• –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ï–ù. –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê!")
end

-- üñ•Ô∏è GUI
local function createAnalysisGUI()
    local gui = Instance.new("ScreenGui")
    gui.Name = "ComprehensiveEggPetAnalyzerGUI"
    gui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 450, 0, 200)
    frame.Position = UDim2.new(0.5, -225, 0.5, -100)
    frame.BackgroundColor3 = Color3.fromRGB(15, 15, 25)
    frame.BorderSizePixel = 0
    frame.Parent = gui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 10)
    corner.Parent = frame
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 50)
    title.BackgroundTransparency = 1
    title.Text = "üî• COMPREHENSIVE EGG PET ANALYZER"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0.8, 0, 0, 40)
    startButton.Position = UDim2.new(0.1, 0, 0.3, 0)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 255, 100)
    startButton.Text = "üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ê–ù–ê–õ–ò–ó"
    startButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.SourceSansBold
    startButton.Parent = frame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 5)
    buttonCorner.Parent = startButton
    
    local infoLabel = Instance.new("TextLabel")
    infoLabel.Size = UDim2.new(0.9, 0, 0.4, 0)
    infoLabel.Position = UDim2.new(0.05, 0, 0.55, 0)
    infoLabel.BackgroundTransparency = 1
    infoLabel.Text = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç: EggExplode ‚Üí Dog/Bunny/Golden Lab\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞, –∞–Ω–∏–º–∞—Ü–∏—è, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª\n–û—Ç–∫—Ä–æ–π—Ç–µ F9 –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"
    infoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    infoLabel.TextScaled = true
    infoLabel.Font = Enum.Font.SourceSans
    infoLabel.Parent = frame
    
    startButton.MouseButton1Click:Connect(function()
        startButton.Text = "‚è≥ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù..."
        startButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        startComprehensiveAnalysis()
    end)
end

-- üöÄ –ó–ê–ü–£–°–ö
createAnalysisGUI()
Logger:log("CRITICAL", "üî• COMPREHENSIVE EGG PET ANIMATION ANALYZER –ì–û–¢–û–í!")
Logger:log("CRITICAL", "üìã –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ 10 –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤")
Logger:log("CRITICAL", "üéØ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
