-- üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó RBXASSETID –ê–ù–ò–ú–ê–¶–ò–ò - –í–°–ö–†–´–í–ê–ï–ú –í–°–ï!
-- –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ rbxassetid://1073293904134356 –∏ –ø–æ–ø—ã—Ç–∫–∏ —Ö–∞–∫–∏–Ω–≥–∞

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local ContentProvider = game:GetService("ContentProvider")
local MarketplaceService = game:GetService("MarketplaceService")

local player = Players.LocalPlayer

print("üî¨ === –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó RBXASSETID –ê–ù–ò–ú–ê–¶–ò–ò ===")
print("üéØ –¶–µ–ª—å: –í–°–ö–†–´–¢–¨ rbxassetid://1073293904134356 –∏ –ó–ê–•–ê–ö–ê–¢–¨ –µ–≥–æ!")
print("üí° Grow a Garden - –í–°–ï –í–û–ó–ú–û–ñ–ù–û!")

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position

-- üêæ –†–ê–ë–û–ß–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–ò–¢–û–ú–¶–ê
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

local function findPet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    local SEARCH_RADIUS = 100
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó RBXASSETID
local function deepAnalyzeAnimation(animationId)
    print("\nüî¨ === –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó RBXASSETID ===")
    print("üÜî ID:", animationId)
    
    -- –ü–æ–ø—ã—Ç–∫–∞ 1: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ MarketplaceService
    print("\nüí∞ === –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó MARKETPLACESERVICE ===")
    local success1, info1 = pcall(function()
        return MarketplaceService:GetProductInfo(1073293904134356)
    end)
    
    if success1 then
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:")
        for key, value in pairs(info1) do
            print("  " .. key .. ":", value)
        end
    else
        print("‚ùå MarketplaceService –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:", info1)
    end
    
    -- –ü–æ–ø—ã—Ç–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ Animation –æ–±—ä–µ–∫—Ç–∞
    print("\nüé≠ === –°–û–ó–î–ê–ù–ò–ï ANIMATION –û–ë–™–ï–ö–¢–ê ===")
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    
    print("‚úÖ Animation –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:")
    print("  Name:", animation.Name)
    print("  AnimationId:", animation.AnimationId)
    print("  ClassName:", animation.ClassName)
    print("  Parent:", animation.Parent)
    
    -- –ü–æ–ø—ã—Ç–∫–∞ 3: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ Animation
    print("\nüìã === –í–°–ï –°–í–û–ô–°–¢–í–ê ANIMATION ===")
    local properties = {
        "AnimationId", "Name", "ClassName", "Parent", "Archivable"
    }
    
    for _, prop in pairs(properties) do
        local success, value = pcall(function()
            return animation[prop]
        end)
        if success then
            print("  " .. prop .. ":", value)
        else
            print("  " .. prop .. ": ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        end
    end
    
    -- –ü–æ–ø—ã—Ç–∫–∞ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
    print("\nüîß === –í–°–ï –ú–ï–¢–û–î–´ ANIMATION ===")
    local methods = {
        "Clone", "Destroy", "FindFirstChild", "GetChildren", "GetDescendants",
        "IsA", "GetFullName", "WaitForChild"
    }
    
    for _, method in pairs(methods) do
        local success = pcall(function()
            return animation[method]
        end)
        if success then
            print("  ‚úÖ " .. method .. " - –¥–æ—Å—Ç—É–ø–µ–Ω")
        else
            print("  ‚ùå " .. method .. " - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        end
    end
    
    return animation
end

-- üé≠ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –ü–û–ü–´–¢–ö–ò –•–ê–ö–ò–ù–ì–ê –ê–ù–ò–ú–ê–¶–ò–ò
local function extremeAnimationHacking(petModel, animation)
    print("\nüî• === –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –ü–û–ü–´–¢–ö–ò –•–ê–ö–ò–ù–ì–ê ===")
    
    -- –ù–∞—Ö–æ–¥–∏–º AnimationController –∏ Animator
    local animationController = nil
    local animator = nil
    
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("AnimationController") then
            animationController = obj
            animator = obj:FindFirstChildOfClass("Animator")
            break
        end
    end
    
    if not animationController or not animator then
        print("‚ùå AnimationController –∏–ª–∏ Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω AnimationController –∏ Animator")
    
    -- –•–ê–ö–ò–ù–ì 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüî• –•–ê–ö–ò–ù–ì 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏...")
    local success1, clonedAnimation = pcall(function()
        local clone = animation:Clone()
        clone.Name = "HACKED_IDLE"
        clone.Parent = animator
        return clone
    end)
    
    if success1 then
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞:", clonedAnimation.Name)
    else
        print("‚ùå –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:", clonedAnimation)
    end
    
    -- –•–ê–ö–ò–ù–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
    print("\nüî• –•–ê–ö–ò–ù–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤...")
    local tracks = {}
    for i = 1, 5 do
        local success, track = pcall(function()
            local newAnimation = Instance.new("Animation")
            newAnimation.AnimationId = animation.AnimationId
            newAnimation.Name = "IDLE_HACK_" .. i
            
            local animTrack = animator:LoadAnimation(newAnimation)
            animTrack.Looped = true
            animTrack.Priority = Enum.AnimationPriority.Action4
            
            return animTrack
        end)
        
        if success then
            table.insert(tracks, track)
            print("‚úÖ –¢—Ä–µ–∫", i, "—Å–æ–∑–¥–∞–Ω")
        else
            print("‚ùå –¢—Ä–µ–∫", i, "–Ω–µ —Å–æ–∑–¥–∞–Ω:", track)
        end
    end
    
    -- –•–ê–ö–ò–ù–ì 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    print("\nüî• –•–ê–ö–ò–ù–ì 3: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π...")
    local success3 = pcall(function()
        -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –í–°–ï –∞–Ω–∏–º–∞—Ü–∏–∏
        local allTracks = animator:GetPlayingAnimationTracks()
        for _, track in pairs(allTracks) do
            track:Stop()
        end
        
        -- –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à–∏ —Ö–∞–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
        for _, track in pairs(tracks) do
            track:Play()
        end
        
        print("‚úÖ –í—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
    end)
    
    if not success3 then
        print("‚ùå –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    end
    
    -- –•–ê–ö–ò–ù–ì 4: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    print("\nüî• –•–ê–ö–ò–ù–ì 4: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π...")
    local originalLoadAnimation = animator.LoadAnimation
    
    local success4 = pcall(function()
        animator.LoadAnimation = function(self, anim)
            -- –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–∞ idle –∞–Ω–∏–º–∞—Ü–∏—è - –±–ª–æ–∫–∏—Ä—É–µ–º
            if not anim.AnimationId:find("1073293904134356") then
                print("üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ê –∞–Ω–∏–º–∞—Ü–∏—è:", anim.AnimationId)
                return nil
            end
            
            -- –ï—Å–ª–∏ —ç—Ç–æ idle - —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–æ —Å –Ω–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            local track = originalLoadAnimation(self, anim)
            if track then
                track.Looped = true
                track.Priority = Enum.AnimationPriority.Action4
                print("‚úÖ –†–ê–ó–†–ï–®–ï–ù–ê idle –∞–Ω–∏–º–∞—Ü–∏—è —Å —Ö–∞–∫–Ω—É—Ç—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            end
            
            return track
        end
        
        print("‚úÖ LoadAnimation –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω!")
    end)
    
    if not success4 then
        print("‚ùå –ü–µ—Ä–µ—Ö–≤–∞—Ç LoadAnimation –Ω–µ —É–¥–∞–ª—Å—è")
    end
    
    -- –•–ê–ö–ò–ù–ì 5: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    print("\nüî• –•–ê–ö–ò–ù–ì 5: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    
    local hackConnection
    hackConnection = RunService.Heartbeat:Connect(function()
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–∏ —Ç—Ä–µ–∫–∏ –≤—Å–µ –µ—â–µ –∏–≥—Ä–∞—é—Ç
        local ourTracksPlaying = 0
        for _, track in pairs(tracks) do
            if track and track.IsPlaying then
                ourTracksPlaying = ourTracksPlaying + 1
            end
        end
        
        -- –ï—Å–ª–∏ –Ω–∞—à–∏ —Ç—Ä–µ–∫–∏ –Ω–µ –∏–≥—Ä–∞—é—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        if ourTracksPlaying == 0 then
            for _, track in pairs(tracks) do
                if track then
                    pcall(function()
                        track:Play()
                    end)
                end
            end
        end
        
        -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        local allTracks = animator:GetPlayingAnimationTracks()
        for _, track in pairs(allTracks) do
            if not track.Animation.AnimationId:find("1073293904134356") then
                pcall(function()
                    track:Stop()
                end)
            end
        end
    end)
    
    print("‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    
    return tracks, hackConnection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local petModel = findPet()
    if not petModel then
        return
    end
    
    print("\nüî¨ === –ù–ê–ß–ò–ù–ê–ï–ú –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó ===")
    
    local animationId = "rbxassetid://1073293904134356"
    local animation = deepAnalyzeAnimation(animationId)
    
    print("\nüî• === –ù–ê–ß–ò–ù–ê–ï–ú –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –•–ê–ö–ò–ù–ì ===")
    local tracks, connection = extremeAnimationHacking(petModel, animation)
    
    if tracks and #tracks > 0 then
        print("üéâ –•–ê–ö–ò–ù–ì –£–°–ü–ï–®–ï–ù! –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤:", #tracks)
        print("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!")
        print("üí° –ü–∏—Ç–æ–º–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    else
        print("‚ùå –•–∞–∫–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è")
    end
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
    spawn(function()
        wait(300)
        if connection then
            connection:Disconnect()
        end
        print("\n‚èπÔ∏è –•–∞–∫–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
    end)
end

-- üöÄ –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö
print("\nüöÄ === –ó–ê–ü–£–°–ö–ê–Æ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ò –•–ê–ö–ò–ù–ì ===")
print("üî• Grow a Garden - –í–°–ï –í–û–ó–ú–û–ñ–ù–û!")
print("üéØ –¶–µ–ª—å: –ó–ê–•–ê–ö–ê–¢–¨ idle –∞–Ω–∏–º–∞—Ü–∏—é –ª—é–±–æ–π —Ü–µ–Ω–æ–π!")

spawn(function()
    wait(2)
    main()
end)

print("\nüí° === –ú–ï–¢–û–î–´ –•–ê–ö–ò–ù–ì–ê ===")
print("üî• 1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üî• 2. –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤")
print("üî• 3. –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π")
print("üî• 4. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π")
print("üî• 5. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
print("\nüöÄ –•–ê–ö–ò–ù–ì –ó–ê–ü–£–©–ï–ù!")
