-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ü–õ–ê–í–ù–û–ì–û –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –î–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê
local CONFIG = {
    SEARCH_RADIUS = 100,
    START_SCALE = 0.3,      -- –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–ø–∏–∏ (30% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
    TARGET_SCALE = 1.0,     -- –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä (–∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª)
    SCALE_FACTOR = 1.0,     -- –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Motor6D –ª–æ–≥–∏–∫–æ–π
    TWEEN_TIME = 3.0,       -- –í—Ä–µ–º—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 0 MeshParts)
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    local hasBaseParts = false
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("BasePart") then
            hasBaseParts = true
        end
    end
    
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ —Å MeshParts –ò–õ–ò —Å 0 MeshParts (–Ω–æ —Å BaseParts)
    local isValidPet = (meshCount > 0) or (meshCount == 0 and hasBaseParts)
    
    if meshCount == 0 and hasBaseParts then
        print("üîë –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü —Å 0 MeshParts:", model.Name)
    end
    
    return isValidPet, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Attachment —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function fixAttachmentParenting(model)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é Attachment —Å–≤—è–∑–∏...")
    
    local attachments = {}
    local fixedCount = 0
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Attachments
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Attachment") then
            table.insert(attachments, obj)
        end
    end
    
    -- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤—è–∑–∏
    for _, attachment in pairs(attachments) do
        if attachment.Parent and not attachment.Parent:IsA("BasePart") then
            -- –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π BasePart –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            local parent = attachment.Parent
            while parent and not parent:IsA("BasePart") do
                parent = parent.Parent
            end
            
            if parent and parent:IsA("BasePart") then
                attachment.Parent = parent
                fixedCount = fixedCount + 1
            else
                -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ BasePart, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment
                print("‚ö†Ô∏è –£–¥–∞–ª—è—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment:", attachment.Name)
                attachment:Destroy()
            end
        end
    end
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Attachment —Å–≤—è–∑–µ–π:", fixedCount)
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ò–°–ü–†–ê–í–õ–Ø–ï–ú ATTACHMENT –°–í–Ø–ó–ò –°–†–ê–ó–£ –ü–û–°–õ–ï –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø
    fixAttachmentParenting(copy)
    
    -- üö´ –£–ë–†–ê–ù–û: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ø–∏–∏
    print("üö´ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∫–æ–ø–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ")
    print("üìç –ö–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–¥–ª—è —Ä—É–∫–∏)")
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê PETSCALER)
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function copyMotorState(originalMotor, copyMotor, scaleFactor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Motor6D
    -- Transform —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ–≥–æ
    local originalTransform = originalMotor.Transform
    local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
    copyMotor.Transform = scaledTransform
    
    -- C0 –∏ C1 - –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–æ–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    local originalC0 = originalMotor.C0
    local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
    copyMotor.C0 = scaledC0
    
    local originalC1 = originalMotor.C1
    local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
    copyMotor.C1 = scaledC1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:", model.Name)
    print("üìç –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:", CONFIG.START_SCALE .. "x (–º–∞–ª–µ–Ω—å–∫–∏–π)")
    print("üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä:", CONFIG.TARGET_SCALE .. "x (–∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª)")
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–ù–ê–ß–ê–õ–ê –£–ú–ï–ù–¨–®–ê–ï–ú –ö–û–ü–ò–Æ, –ü–û–¢–û–ú –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú
    
    -- –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (—ç—Ç–æ –±—É–¥–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä)
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Ü–µ–ª–µ–≤–æ–π)
            cframe = part.CFrame
        }
    end
    
    -- –®–∞–≥ 2: –°–ù–ê–ß–ê–õ–ê —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ø–∏—é –¥–æ START_SCALE (–ú–ì–ù–û–í–ï–ù–ù–û)
    print("üîç –®–∞–≥ 1: –£–º–µ–Ω—å—à–∞—é –∫–æ–ø–∏—é –¥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (" .. CONFIG.START_SCALE .. "x)")
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ START_SCALE
        local startSize = originalSize * CONFIG.START_SCALE
        
        -- –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * CONFIG.START_SCALE) * (relativeCFrame - relativeCFrame.Position)
        local startCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –ú–ì–ù–û–í–ï–ù–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
        part.Size = startSize
        part.CFrame = startCFrame
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!")
    
    -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ–ø–∏—é
    wait(0.5)
    
    -- –®–∞–≥ 3: –¢–µ–ø–µ—Ä—å –ü–õ–ê–í–ù–û —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    print("üöÄ –®–∞–≥ 2: –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (" .. CONFIG.TARGET_SCALE .. "x)")
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ü–õ–ê–í–ù–û–ï –£–í–ï–õ–ò–ß–ï–ù–ò–ï –î–û –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local targetSize = originalData[part].size * CONFIG.TARGET_SCALE  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        local targetCFrame = originalData[part].cframe  -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        -- üö® –£–ë–ò–†–ê–ï–ú CFrame –ò–ó –¢–í–ò–ù–ê - –ü–£–°–¢–¨ –ê–ù–ò–ú–ê–¶–ò–Ø –£–ü–†–ê–í–õ–Ø–ï–¢ –ü–û–ó–ò–¶–ò–ï–ô!
        local tween = TweenService:Create(part, tweenInfo, {
            Size = targetSize
            -- CFrame = targetCFrame  -- –û–¢–ö–õ–Æ–ß–ï–ù–û! –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ü–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("üéâ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª!")
                
                -- –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–¢–ê–í–ò–ú –ö–û–ü–ò–Æ –í –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ï –ü–û–õ–û–ñ–ï–ù–ò–ï
                print("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å—Ç–∞–≤–ª—é –∫–æ–ø–∏—é –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–µ –ª–µ–∂–∞—á–µ–µ)...")
                
                if model.PrimaryPart then
                    local currentPosition = model.PrimaryPart.Position
                    
                    -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π CFrame
                    -- Y-–æ—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–≤–µ—Ä—Ö (0, 1, 0)
                    -- Z-–æ—Å—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–ø–µ—Ä–µ–¥ (0, 0, -1) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    local uprightCFrame = CFrame.new(
                        currentPosition,  -- –ü–æ–∑–∏—Ü–∏—è
                        currentPosition + Vector3.new(0, 0, -1)  -- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                    )
                    
                    -- –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                    model:SetPrimaryPartCFrame(uprightCFrame)
                    
                    print("‚úÖ –ö–æ–ø–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ!")
                    
                    -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π...")
                    
                    local correctedParts = 0
                    for _, part in pairs(model:GetDescendants()) do
                        if part:IsA("BasePart") and part ~= model.PrimaryPart then
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–æ–≤
                            local partCFrame = part.CFrame
                            local upVector = partCFrame.UpVector
                            
                            -- –ï—Å–ª–∏ —á–∞—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–µ –≤–≤–µ—Ä—Ö)
                            if math.abs(upVector.Y) < 0.7 then -- Y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–ª–∏–∑–æ–∫ –∫ 1
                                -- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —á–∞—Å—Ç–∏
                                local correctedPartCFrame = CFrame.new(
                                    partCFrame.Position,
                                    partCFrame.Position + Vector3.new(0, 0, -1)
                                )
                                part.CFrame = correctedPartCFrame
                                correctedParts = correctedParts + 1
                            end
                        end
                    end
                    
                    print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∞—Å—Ç–µ–π:", correctedParts)
                    print("üöÄ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Å—Ç–æ—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else
                    print("‚ö†Ô∏è –ù–µ—Ç PrimaryPart –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
                end
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
    return true
end

-- === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===
-- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ Motor6DIdleForcer.lua

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —á–∏—Å—Ç—ã—Ö idle –ø–æ–∑
local function recordPureIdlePoses(petModel)
    print("\nüé¨ === –ó–ê–ü–ò–°–¨ –ß–ò–°–¢–´–• IDLE –ü–û–ó ===")
    
    local motor6Ds = {}
    local idlePoses = {}
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Motor6D
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motor6Ds, obj)
        end
    end
    
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D:", #motor6Ds)
    
    if #motor6Ds == 0 then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –ù–∞—Ö–æ–¥–∏–º RootPart –∏ —è–∫–æ—Ä–∏–º –¥–ª—è –∑–∞–ø–∏—Å–∏
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    local originalPosition = nil
    
    if rootPart then
        originalPosition = rootPart.Position
        rootPart.Anchored = true
        print("‚öì RootPart –∑–∞—è–∫–æ—Ä–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
    end
    
    -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Animator") then
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                local name = track.Animation.Name:lower()
                if name:find("walk") or name:find("run") or name:find("move") then
                    track:Stop()
                    print("üíÄ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                end
            end
        end
    end
    
    -- –û–ñ–ò–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–•–û–î–ê –ö IDLE
    print("‚è≥ –û–∂–∏–¥–∞—é 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ idle...")
    wait(3) -- –î–∞–µ–º –≤—Ä–µ–º—è –ø–∏—Ç–æ–º—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ (–£–í–ï–õ–ò–ß–ï–ù–û –î–õ–Ø –ü–û–õ–ù–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò)
    local recordingTime = 8 -- 8 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ idle —Ü–∏–∫–ª–∞
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local totalFrames = recordingTime * frameRate
    
    print("üìπ –ó–∞–ø–∏—Å—ã–≤–∞—é –ü–û–õ–ù–£–Æ idle –∞–Ω–∏–º–∞—Ü–∏—é:", recordingTime, "—Å–µ–∫—É–Ω–¥ (", totalFrames, "–∫–∞–¥—Ä–æ–≤)")
    
    local currentFrame = 0
    local startTime = tick()
    
    local recordConnection
    recordConnection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        if elapsed >= frameInterval * currentFrame then
            currentFrame = currentFrame + 1
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑—ã Motor6D
            local framePoses = {}
            for _, motor in pairs(motor6Ds) do
                framePoses[motor.Name] = {
                    C0 = motor.C0,
                    C1 = motor.C1,
                    Transform = motor.Transform
                }
            end
            
            table.insert(idlePoses, framePoses)
            
            if currentFrame >= totalFrames then
                recordConnection:Disconnect()
                print("üìπ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø–∏—Å–∞–Ω–æ –∫–∞–¥—Ä–æ–≤:", #idlePoses)
            end
        end
    end)
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    while #idlePoses < totalFrames and recordConnection.Connected do
        wait(0.1)
    end
    
    return idlePoses, motor6Ds, originalPosition
end

-- –§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ idle
local function forceOnlyIdleAnimation(idlePoses, motor6Ds, petModel, originalPosition)
    print("\nüî• === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û IDLE ===")
    
    if not idlePoses or #idlePoses == 0 then
        print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö idle –ø–æ–∑!")
        return nil
    end
    
    local humanoid = petModel:FindFirstChild("Humanoid")
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    
    local currentFrame = 1
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local lastFrameTime = tick()
    
    local forceConnection
    forceConnection = RunService.Heartbeat:Connect(function()
        local now = tick()
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid.JumpPower = 0
            humanoid.PlatformStand = true
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        if rootPart and originalPosition then
            if rootPart.Position ~= originalPosition then
                rootPart.Position = originalPosition
                print("üîÑ –ü–∏—Ç–æ–º–µ—Ü —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ")
            end
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º walking –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        for _, obj in pairs(petModel:GetDescendants()) do
            if obj:IsA("Animator") then
                local tracks = obj:GetPlayingAnimationTracks()
                for _, track in pairs(tracks) do
                    local name = track.Animation.Name:lower()
                    if name:find("walk") or name:find("run") or name:find("move") then
                        track:Stop()
                        print("üíÄ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                    end
                end
            end
        end
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã
        if now - lastFrameTime >= frameInterval then
            lastFrameTime = now
            
            local framePoses = idlePoses[currentFrame]
            
            if framePoses then
                -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã –∫–æ –≤—Å–µ–º Motor6D
                for _, motor in pairs(motor6Ds) do
                    local pose = framePoses[motor.Name]
                    if pose then
                        pcall(function()
                            motor.C0 = pose.C0
                            motor.C1 = pose.C1
                            motor.Transform = pose.Transform
                        end)
                    end
                end
            end
            
            -- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É —Å –ü–õ–ê–í–ù–´–ú –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
            currentFrame = currentFrame + 1
            if currentFrame > #idlePoses then
                currentFrame = 1  -- –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º idle
                print("üîÑ –ü–æ–ª–Ω—ã–π idle —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ")
            end
        end
    end)
    
    print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üî• –ü–∏—Ç–æ–º–µ—Ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¢–û–õ–¨–ö–û idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    print("üíÄ –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏ —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä!")
    
    return forceConnection
end

-- –ë–ï–°–ö–û–ù–ï–ß–ù–ê–Ø IDLE –ê–ù–ò–ú–ê–¶–ò–Ø (–ù–ò–ö–û–ì–î–ê –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–¢–°–Ø)
local function startEndlessIdleLoop(originalModel, copyModel)
    print("\nüîÑ === –ë–ï–°–ö–û–ù–ï–ß–ù–ê–Ø IDLE –ê–ù–ò–ú–ê–¶–ò–Ø ===\n")
    
    -- –ù–∞—Ö–æ–¥–∏–º Motor6D –≤ –æ–±–µ–∏—Ö –º–æ–¥–µ–ª—è—Ö
    local originalMotors = {}
    local copyMotors = {}
    
    for _, obj in pairs(originalModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(originalMotors, obj)
        end
    end
    
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(copyMotors, obj)
        end
    end
    
    print("üîß Motor6D –Ω–∞–π–¥–µ–Ω–æ - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D!")
        return nil
    end
    
    -- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö HUMANOID –ò –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´
    local originalHumanoid = originalModel:FindFirstChild("Humanoid")
    local originalRootPart = originalModel:FindFirstChild("RootPart") or originalModel:FindFirstChild("HumanoidRootPart") or originalModel:FindFirstChild("Torso")
    
    print("üîç –ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ idle:")
    print("  - Humanoid:", originalHumanoid and "‚úÖ –ù–∞–π–¥–µ–Ω" or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    print("  - RootPart:", originalRootPart and ("‚úÖ –ù–∞–π–¥–µ–Ω (" .. originalRootPart.Name .. ")") or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
    
    -- –ï—Å–ª–∏ –Ω–µ—Ç Humanoid, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –¥–µ—Ç–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ –ø–æ–∑–∏—Ü–∏—é
    local usePositionDetection = false
    if not originalHumanoid then
        if originalRootPart then
            print("‚ö†Ô∏è Humanoid –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å RootPart - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ø–æ –ø–æ–∑–∏—Ü–∏–∏")
            usePositionDetection = true
        else
            print("‚ùå –ù–∏ Humanoid, –Ω–∏ RootPart –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ù–µ –º–æ–∂–µ–º –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å idle")
            return nil
        end
    else
        print("‚úÖ Humanoid –Ω–∞–π–¥–µ–Ω:", originalHumanoid.Name)
    end
    
    -- === üì° –°–ò–°–¢–ï–ú–ê LIVE –ü–û–¢–û–ö–û–í–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===
    -- üé¨ –†–ï–ê–õ–¨–ù–û–ï –í–†–ï–ú–Ø: –ö–û–ü–ò–†–û–í–ê–ù–ò–ï Motor6D –° –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï
    
    -- üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø QuickDataExporter)
    local function findHandHeldPet()
        local player = Players.LocalPlayer
        if not player then 
            print("‚ùå Player –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return nil, nil 
        end
        
        print("üîç –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ...")
        
        -- –¢–û–ß–ù–û –ö–ê–ö –í QuickDataExporter - –ø–æ–∏—Å–∫ Tool –≤ character
        local character = player.Character
        if not character then
            print("‚ùå Character –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return nil, nil
        end
        
        print("üë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º character...")
        
        -- –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ Tool –≤ —Ä—É–∫–∞—Ö (–∫–∞–∫ –≤ QuickDataExporter)
        local handTool = character:FindFirstChildOfClass("Tool")
        if not handTool then
            print("‚ùå Tool –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return nil, nil
        end
        
        print("üéØ –ù–∞–π–¥–µ–Ω Tool:", handTool.Name)
        
        -- üî• –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –≠–¢–û –ü–ò–¢–û–ú–ï–¶ (DOG –ò–õ–ò DRAGONFLY) - –õ–û–ì–ò–ö–ê –ò–ó v3.242 + DRAGONFLY
        local isPet = false
        local petType = "Unknown"
        
        -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Dog (—Å–æ–¥–µ—Ä–∂–∏—Ç KG) - –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê v3.242
        if handTool.Name:find("KG") then
            isPet = true
            petType = "Dog"
        end
        
        -- üêâ –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–î–î–ï–†–ñ–ö–£ DRAGONFLY (—Å–æ–¥–µ—Ä–∂–∏—Ç Dragonfly –∏–ª–∏ UUID —Ñ–æ—Ä–º–∞—Ç)
        if handTool.Name:find("Dragonfly") then
            isPet = true
            petType = "Dragonfly"
        elseif handTool.Name:find("%{") and handTool.Name:find("%}") then
            -- UUID —Ñ–æ—Ä–º–∞—Ç —Å —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ - –≤–æ–∑–º–æ–∂–Ω—ã–π Dragonfly
            isPet = true
            petType = "Dragonfly (UUID)"
        elseif handTool.Name:find("%[") and handTool.Name:find("%]") and handTool.Name:find("Age") then
            -- UUID —Ñ–æ—Ä–º–∞—Ç —Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏ –∏ Age - –≤–æ–∑–º–æ–∂–Ω—ã–π Dragonfly
            isPet = true
            petType = "Dragonfly (UUID Age)"
        end
        
        if not isPet then
            print("‚ö†Ô∏è Tool –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∏—Ç–æ–º—Ü–µ–º (–Ω–∏ Dog, –Ω–∏ Dragonfly –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            print("üîç –ò–º—è Tool:", handTool.Name)
            return nil, nil
        end
        
        print(string.format("‚úÖ %s –ø–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω –≤ —Ä—É–∫–∞—Ö: %s", petType, handTool.Name))
        
        print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω –≤ —Ä—É–∫–∞—Ö:", handTool.Name)
        
        -- –¢–û–ß–ù–û –ö–ê–ö –í QuickDataExporter - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Tool –∫–∞–∫ –º–æ–¥–µ–ª—å
        return handTool, handTool
    end
    
    -- üì¶ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π –∏–∑ Tool (–≤–∫–ª—é—á–∞—è –ø–æ–¥–º–æ–¥–µ–ª–∏)
    local function getAnimatedPartsFromTool(tool)
        local parts = {}
        
        if not tool then return parts end
        
        -- –ò—â–µ–º –≤—Å–µ BasePart –≤ Tool, –≤–∫–ª—é—á–∞—è –ø–æ–¥–º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è Handle)
        for _, obj in pairs(tool:GetDescendants()) do
            if obj:IsA("BasePart") and obj.Name ~= "Handle" then
                table.insert(parts, obj)
            end
        end
        
        return parts
    end
    
    -- üéØ –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏ –≤ –∫–æ–ø–∏–∏ –ø–æ –∏–º–µ–Ω–∏
    local function findCorrespondingPart(copyModel, partName)
        for _, obj in pairs(copyModel:GetDescendants()) do
            if obj:IsA("BasePart") and obj.Name == partName then
                return obj
            end
        end
        return nil
    end
    
    -- üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ CFrame —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–≤–æ—Ä–æ—Ç–∞
    local function scaleCFrame(originalCFrame, scaleFactor)
        local originalPosition = originalCFrame.Position
        local scaledPosition = originalPosition * scaleFactor
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç, –Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é
        return CFrame.new(scaledPosition) * (originalCFrame - originalCFrame.Position)
    end
    
    -- üé≠ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è CFrame –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    local handPetModel = nil
    local handPetParts = {}  -- –ê–Ω–∏–º–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏ –∏–∑ Tool
    local lastHandPetCheck = 0
    local HAND_PET_CHECK_INTERVAL = 1.0  -- –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
    
    -- üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–ô CFrame –í –ü–ò–¢–û–ú–¶–ï –í –†–£–ö–ï
    local previousCFrameStates = {}
    local cframeChangeCount = 0
    local lastChangeTime = 0
    
    -- üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CFrame —Å–∏—Å—Ç–µ–º—ã
    local INTERPOLATION_SPEED = 0.3  -- –£–º–µ–Ω—å—à–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    local POSITION_THRESHOLD = 0.001  -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    local ROTATION_THRESHOLD = 0.001  -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
    local MAX_DISTANCE_FROM_ROOT = 50  -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–æ—Ä–Ω—è
    
    -- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
    local lastPosition = usePositionDetection and originalRootPart and originalRootPart.Position or Vector3.new(0, 0, 0)
    
    if usePositionDetection then
        print("üí° –ò—Å–ø–æ–ª—å–∑—É—é –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—É—é –¥–µ—Ç–µ–∫—Ü–∏—é idle —á–µ—Ä–µ–∑", originalRootPart.Name)
    else
        print("üí° –ò—Å–ø–æ–ª—å–∑—É—é Humanoid.MoveDirection –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ idle")
    end
    
    print("üì° –ó–ê–ü–£–°–ö–ê–Æ LIVE –ü–û–¢–û–ö–û–í–£–Æ –°–ò–°–¢–ï–ú–£ IDLE –ê–ù–ò–ú–ê–¶–ò–ò!")
    print("üé¨ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ")
    print("üîÑ –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –í–°–ï –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
    
    local connection = RunService.Heartbeat:Connect(function()
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not originalModel.Parent or not copyModel.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º—É")
            connection:Disconnect()
            return
        end
        
        local currentTime = tick()
        
        -- === üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===
        if currentTime - lastHandPetCheck >= HAND_PET_CHECK_INTERVAL then
            local foundPetModel, foundTool = findHandHeldPet()
            
            if foundPetModel ~= handPetModel then
                handPetModel = foundPetModel
                handPetParts = getAnimatedPartsFromTool(handPetModel)
                
                if handPetModel then
                    print("üéØ –ù–ê–®–õ–ò –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï:", foundTool and foundTool.Name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                    print("üì¶ –ê–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π:", #handPetParts)
                    
                    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CFrame
                    previousCFrameStates = {}
                    for _, part in ipairs(handPetParts) do
                        if part and part.Parent then
                            previousCFrameStates[part.Name] = part.CFrame
                        end
                    end
                    
                    cframeChangeCount = 0
                    lastChangeTime = currentTime
                else
                    print("‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    handPetParts = {}
                end
            end
            
            lastHandPetCheck = currentTime
        end
        
        -- === üìê LIVE –ö–û–ü–ò–†–û–í–ê–ù–ò–ï CFrame –°–û–°–¢–û–Ø–ù–ò–ô ===
        if handPetModel and #handPetParts > 0 then
            local appliedCount = 0
            local changesDetected = 0
            local debugInfo = {}
            
            -- üîç –ü–†–û–í–ï–†–ö–ê ANCHORED –°–û–°–¢–û–Ø–ù–ò–ô –ö–û–ü–ò–ò (—Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥)
            if math.floor(currentTime) % 10 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                local anchoredParts = 0
                local totalParts = 0
                for _, part in pairs(copyModel:GetDescendants()) do
                    if part:IsA("BasePart") then
                        totalParts = totalParts + 1
                        if part.Anchored then
                            anchoredParts = anchoredParts + 1
                        end
                    end
                end
                print(string.format("‚öì ANCHORED –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: %d/%d —á–∞—Å—Ç–µ–π –∑–∞—è–∫–æ—Ä–µ–Ω–æ", anchoredParts, totalParts))
            end
            
            -- üìä –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ò –ö–û–ü–ò–†–û–í–ê–ù–ò–ï CFrame –ò–ó–ú–ï–ù–ï–ù–ò–ô
            for _, handPart in ipairs(handPetParts) do
                if handPart and handPart.Parent then
                    local partName = handPart.Name
                    local currentCFrame = handPart.CFrame
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    local hasChanged = false
                    if previousCFrameStates[partName] then
                        local prevCFrame = previousCFrameStates[partName]
                        local positionDiff = (currentCFrame.Position - prevCFrame.Position).Magnitude
                        local rotationDiff = math.abs(currentCFrame.LookVector:Dot(prevCFrame.LookVector) - 1)
                        
                        if positionDiff > POSITION_THRESHOLD or rotationDiff > ROTATION_THRESHOLD then
                            hasChanged = true
                            changesDetected = changesDetected + 1
                        end
                    end
                    
                    -- –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    previousCFrameStates[partName] = currentCFrame
                    
                    -- –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å –≤ –∫–æ–ø–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º CFrame
                    local copyPart = findCorrespondingPart(copyModel, partName)
                    if copyPart then
                        local success, errorMsg = pcall(function()
                            -- üìê –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ò –ü–†–ò–ú–ï–ù–ï–ù–ò–ï CFrame
                            local scaledCFrame = scaleCFrame(currentCFrame, CONFIG.SCALE_FACTOR)
                            
                            -- üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò CFrame
                            local copyRootPart = copyModel.PrimaryPart or copyModel:FindFirstChild("RootPart") or copyModel:FindFirstChild("Torso")
                            if copyRootPart then
                                local distanceFromRoot = (scaledCFrame.Position - copyRootPart.Position).Magnitude
                                if distanceFromRoot > MAX_DISTANCE_FROM_ROOT then
                                    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–æ—Ä–Ω—è
                                    local direction = (scaledCFrame.Position - copyRootPart.Position).Unit
                                    local limitedPosition = copyRootPart.Position + direction * MAX_DISTANCE_FROM_ROOT
                                    scaledCFrame = CFrame.new(limitedPosition) * (scaledCFrame - scaledCFrame.Position)
                                end
                            end
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ CFrame –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é
                            if scaledCFrame.Position.X ~= scaledCFrame.Position.X or 
                               math.abs(scaledCFrame.Position.X) == math.huge or
                               math.abs(scaledCFrame.Position.Y) == math.huge or
                               math.abs(scaledCFrame.Position.Z) == math.huge then
                                return -- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                            end
                            
                            -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∫ –Ω–µ–∑–∞—è–∫–æ—Ä–µ–Ω–Ω—ã–º —á–∞—Å—Ç—è–º)
                            if not copyPart.Anchored and copyPart.Parent then
                                copyPart.CFrame = copyPart.CFrame:Lerp(scaledCFrame, INTERPOLATION_SPEED)
                            end
                            
                            -- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            table.insert(debugInfo, {
                                name = partName,
                                changed = hasChanged,
                                anchored = copyPart.Anchored,
                                applied = not copyPart.Anchored
                            })
                        end)
                        
                        if success then
                            appliedCount = appliedCount + 1
                        else
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ CFrame", partName, ":", errorMsg)
                        end
                    end
                end
            end
            
            -- –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if changesDetected > 0 then
                cframeChangeCount = cframeChangeCount + changesDetected
                lastChangeTime = currentTime
            end
            
            -- üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–ü–ò–ò
            local copyPartsCount = 0
            local validCopyParts = 0
            local anchoredParts = 0
            
            for _, part in ipairs(copyModel:GetDescendants()) do
                if part:IsA("BasePart") then
                    copyPartsCount = copyPartsCount + 1
                    if part.Parent then
                        validCopyParts = validCopyParts + 1
                        if part.Anchored then
                            anchoredParts = anchoredParts + 1
                        end
                    end
                end
            end
            
            -- üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            if math.floor(currentTime) % 3 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("üìê LIVE CFrame –ö–û–ü–ò–†–û–í–ê–ù–ò–ï: –ø—Ä–∏–º–µ–Ω–µ–Ω–æ", appliedCount, "/", #handPetParts, "CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–π")
                print(string.format("üîç –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ü–ò–ò: %d/%d —á–∞—Å—Ç–µ–π –≤–∞–ª–∏–¥–Ω—ã, %d –∑–∞—è–∫–æ—Ä–µ–Ω–æ", validCopyParts, copyPartsCount, anchoredParts))
                
                -- üéØ –û–¢–ß–ï–¢ –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–• –í –ü–ò–¢–û–ú–¶–ï –í –†–£–ö–ï
                local timeSinceLastChange = currentTime - lastChangeTime
                print(string.format("üé≠ –ü–ò–¢–û–ú–ï–¶ –í –†–£–ö–ï: %d –∏–∑–º–µ–Ω–µ–Ω–∏–π CFrame, –ø–æ—Å–ª–µ–¥–Ω–µ–µ %.1f —Å–µ–∫ –Ω–∞–∑–∞–¥", 
                    cframeChangeCount, timeSinceLastChange))
                
                if changesDetected > 0 then
                    print(string.format("‚úÖ CFrame –ê–ù–ò–ú–ê–¶–ò–Ø –ö–û–ü–ò–†–£–ï–¢–°–Ø: %d —á–∞—Å—Ç–µ–π –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!", changesDetected))
                else
                    print("‚ö†Ô∏è –ü–ò–¢–û–ú–ï–¶ –°–¢–ê–¢–ò–ß–ï–ù: CFrame –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è")
                end
                
                -- üö® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –ü–û–¢–ï–†–ï –ß–ê–°–¢–ï–ô
                if validCopyParts < copyPartsCount * 0.8 then
                    print(string.format("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ø–∏—è —Ç–µ—Ä—è–µ—Ç —á–∞—Å—Ç–∏! %d –∏–∑ %d —á–∞—Å—Ç–µ–π –ø–æ—Ç–µ—Ä—è–Ω—ã!", 
                        copyPartsCount - validCopyParts, copyPartsCount))
                end
                
                -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                for i = 1, math.min(3, #debugInfo) do
                    local info = debugInfo[i]
                    print(string.format("üìê %s: Changed=%s Anchored=%s Applied=%s", 
                        info.name, tostring(info.changed), tostring(info.anchored), tostring(info.applied)))
                end
            end
        else
            -- –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é idle –ø–æ–∑—É
            if math.floor(currentTime) % 5 == 0 and math.floor(currentTime * 10) % 10 == 0 then
                print("‚ö†Ô∏è –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∫–æ–ø–∏—è –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –ø–æ–∑–µ")
            end
        end
    end)
    
    -- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("üîç –ü–†–û–í–ï–†–ö–ê ANCHORED –°–û–°–¢–û–Ø–ù–ò–ô –ö–û–ü–ò–ò:")
    local copyParts = getAllParts(copyModel)
    local anchoredCount = 0
    local rootPart = nil
    
    -- –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—É—é —á–∞—Å—Ç—å
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    -- –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        end
        if part.Anchored then
            anchoredCount = anchoredCount + 1
        end
    end
    
    print("‚öôÔ∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart and rootPart.Name or "–ù–µ –Ω–∞–π–¥–µ–Ω–∞")
    print("‚öì Anchored —á–∞—Å—Ç–µ–π:", anchoredCount, "/", #copyParts)
    
    print("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø IDLE –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
    print("üìç –ö–æ–ø–∏—è –±—É–¥–µ—Ç –í–°–ï–ì–î–ê –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ idle –∞–Ω–∏–º–∞—Ü–∏—é!")
    print("üî• –ù–∏–∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ö–æ–¥—å–±–µ!")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- üî• –¢–û–ß–ù–û –¢–ê –ñ–ï –õ–û–ì–ò–ö–ê –ò–ó PetScaler_v3.242 (–ö–û–¢–û–†–ê–Ø –ù–ê–•–û–î–ò–õ–ê DOG!)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
    print("üìä === –ù–ê–ô–î–ï–ù–ù–´–ï –ü–ò–¢–û–ú–¶–´ ===")
    local withMeshParts = 0
    local withoutMeshParts = 0
    
    for i, pet in pairs(foundPets) do
        local meshCount = #pet.meshes
        if meshCount > 0 then
            withMeshParts = withMeshParts + 1
        else
            withoutMeshParts = withoutMeshParts + 1
        end
        
        print("  " .. i .. ". " .. pet.model.Name)
        print("    üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: " .. math.floor(pet.distance))
        print("    üß© MeshParts: " .. meshCount)
    end
    
    print("üìä –ò—Ç–æ–≥–æ: " .. withMeshParts .. " —Å MeshParts, " .. withoutMeshParts .. " —Å 0 MeshParts")
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –±–ª–∏–∂–∞–π—à–∏–π –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    print("    üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è:", math.floor(targetPet.distance))
    print("    üß© MeshParts:", #targetPet.meshes)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –®–∞–≥ 3: –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê (–ë–ï–ó –ü–õ–ê–í–ù–û–ì–û –£–í–ï–õ–ò–ß–ò–í–ê–ù–ò–Ø)
    print("\n‚ö° === –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ===")
    print("üö´ –ü–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–∏–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!")
    
    -- –°—Ä–∞–∑—É –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false -- –°—Ä–∞–∑—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            part.CanCollide = false -- –£–±–∏—Ä–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
        end
    end
    
    -- üéØ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –í –†–£–ö–ï (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
    print("\nüìç === –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –í –†–£–ö–ï ===")
    print("‚úÖ –ö–æ–ø–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–≤ —Ä—É–∫–µ)")
    print("üö´ –£–±—Ä–∞–Ω–æ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏")
    print("‚ö° –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏!")
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –®–∞–≥ 4: –ü–ï–†–ï–î–ê–ß–ê –ê–ù–ò–ú–ê–¶–ò–ô –û–¢ –û–†–ò–ì–ò–ù–ê–õ–ê –ö –ö–û–ü–ò–ò
    print("\nüîÑ === –ü–ï–†–ï–î–ê–ß–ê –ê–ù–ò–ú–ê–¶–ò–ô ===")
    print("üé≠ –ö–æ–ø–∏—Ä—É—é –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∫ –∫–æ–ø–∏–∏...")
    
    -- –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞–Ω–∏–º–∞—Ü–∏–π —á–µ—Ä–µ–∑ Motor6D
    local originalMotors = {}
    local copyMotors = {}
    
    -- –ù–∞—Ö–æ–¥–∏–º Motor6D –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            originalMotors[obj.Name] = obj
        end
    end
    
    -- –ù–∞—Ö–æ–¥–∏–º Motor6D –≤ –∫–æ–ø–∏–∏
    for _, obj in pairs(petCopy:GetDescendants()) do
        if obj:IsA("Motor6D") then
            copyMotors[obj.Name] = obj
        end
    end
    
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:", #originalMotors)
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D –≤ –∫–æ–ø–∏–∏:", #copyMotors)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
    if next(originalMotors) and next(copyMotors) then
        local animationConnection = RunService.Heartbeat:Connect(function()
            for motorName, originalMotor in pairs(originalMotors) do
                local copyMotor = copyMotors[motorName]
                if copyMotor and originalMotor.Parent and copyMotor.Parent then
                    -- –ö–æ–ø–∏—Ä—É–µ–º Transform –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∫ –∫–æ–ø–∏–∏
                    copyMotor.Transform = originalMotor.Transform
                end
            end
        end)
        
        print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üé≠ –ö–æ–ø–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        
        print("üéâ === –£–°–ü–ï–•! ===")
        print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ë–ï–ó –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–Ω–∏—è")
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–ø–∏–∏")
        print("‚ö° –ü–∏—Ç–æ–º–µ—Ü –ø–æ—è–≤–ª—è–µ—Ç—Å—è –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏!")
    else
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã Motor6D –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–Ω–∏–º–∞—Ü–∏–π")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –∏–º–µ–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        
        print("üéâ === –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• ===")
        print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ë–ï–ó –ø–ª–∞–≤–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–Ω–∏—è")
        print("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã (–Ω–µ—Ç Motor6D)")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
