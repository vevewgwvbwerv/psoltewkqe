-- üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ê
-- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ê–ë–û–ß–£–Æ –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∏–∑ RealPetModelFinder.lua –∏ PetTypeAnalyzer.lua
-- –ò—â–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ –Ω–∞–ª–∏—á–∏—é MeshPart/SpecialMesh, –∞ –ù–ï –ø–æ UUID –∏–º–µ–Ω–∞–º!

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

print("üî¨ === –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ê ===")
print("=" .. string.rep("=", 70))
print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ê–ë–û–ß–£–Æ –ª–æ–≥–∏–∫—É –∏–∑ RealPetModelFinder.lua")
print("üîç –ò—â–µ—Ç –º–æ–¥–µ–ª–∏ —Å MeshPart/SpecialMesh (–≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)")
print()

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
local SEARCH_RADIUS = 100 -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å

print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", SEARCH_RADIUS)
print()

-- –†–ê–ë–û–ß–ê–Ø –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ RealPetModelFinder.lua - –ø–æ–∏—Å–∫ –ø–æ MeshPart/SpecialMesh
print("üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ï–í –ü–û –í–ò–ó–£–ê–õ–¨–ù–´–ú –≠–õ–ï–ú–ï–ù–¢–ê–ú (–∫–∞–∫ –≤ RealPetModelFinder.lua)...")
print("-" .. string.rep("-", 50))

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = "" -- MeshPart –Ω–µ –∏–º–µ–µ—Ç TextureId
            }
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or "" -- SpecialMesh –∏–º–µ–µ—Ç TextureId
            }
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ (–¢–ò–•–û - –±–µ–∑ –≤—ã–≤–æ–¥–∞)
local function analyzePotentialPet(model)
    local hasVisuals, meshes = hasPetVisuals(model)
    return hasVisuals, meshes
end

local foundPetModels = {}

-- –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–•–û–î: UUID –∏–º–µ–Ω–∞ (–∏–∑ PetScanDiagnostic.lua) + –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∏–∑ RealPetModelFinder.lua)
print("üéØ –≠–¢–ê–ü 1: –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π —Å UUID –∏–º–µ–Ω–∞–º–∏ (–∫–∞–∫ –≤ PetScanDiagnostic.lua)")
print("-" .. string.rep("-", 40))

-- –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–æ–¥–µ–ª–∏ —Å UUID –∏–º–µ–Ω–∞–º–∏ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö (–∫–∞–∫ –≤ PetScanDiagnostic.lua)
for _, obj in ipairs(Workspace:GetChildren()) do
    if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
        local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
        if success then
            local distance = (modelCFrame.Position - playerPos).Magnitude
            if distance <= SEARCH_RADIUS then
                print("üéØ –ù–ê–ô–î–ï–ù–ê UUID –ú–û–î–ï–õ–¨: " .. obj.Name .. " | –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " .. math.floor(distance))
                
                -- –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —É UUID –º–æ–¥–µ–ª–∏ –Ω–∞–ª–∏—á–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                local isPet, meshes = analyzePotentialPet(obj)
                
                if isPet then
                    print("üî• UUID –ú–û–î–ï–õ–¨ –° –í–ò–ó–£–ê–õ–¨–ù–´–ú–ò –≠–õ–ï–ú–ï–ù–¢–ê–ú–ò - –≠–¢–û –ü–ò–¢–û–ú–ï–¶!")
                    
                    local petData = {
                        model = obj,
                        name = obj.Name,
                        distance = distance,
                        meshes = meshes
                    }
                    
                    table.insert(foundPetModels, petData)
                    
                    print("    üìä –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " .. math.floor(distance) .. " –µ–¥–∏–Ω–∏—Ü")
                    print("    üé® –í–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " .. #meshes)
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º PrimaryPart
                    if obj.PrimaryPart then
                        print("    ‚úÖ PrimaryPart: " .. obj.PrimaryPart.Name)
                    else
                        print("    ‚ùå PrimaryPart –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    end
                    print()
                else
                    print("    ‚ùå UUID –º–æ–¥–µ–ª—å –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞")
                end
            end
        end
    end
end

-- –ù–ò–ö–ê–ö–ò–• FALLBACK –ü–û–ò–°–ö–û–í! –ò–©–ï–ú –¢–û–õ–¨–ö–û UUID –ú–û–î–ï–õ–ò!
print()
print("‚ùå –ù–ò–ö–ê–ö–ò–• –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ü–û–ò–°–ö–û–í - –ò–©–ï–ú –¢–û–õ–¨–ö–û UUID –ú–û–î–ï–õ–ò!")

print()
print("üìà –ù–ê–ô–î–ï–ù–û –ú–û–î–ï–õ–ï–ô –ü–ò–¢–û–ú–¶–ï–í: " .. #foundPetModels)
print()

if #foundPetModels == 0 then
    print("‚ùå –ú–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–µ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("  1. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ä—è–¥–æ–º —Å –ø–∏—Ç–æ–º—Ü–µ–º")
    print("  2. –ü–∏—Ç–æ–º–µ—Ü –∏–º–µ–µ—Ç MeshPart –∏–ª–∏ SpecialMesh")
    print("  3. –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω (" .. SEARCH_RADIUS .. " –µ–¥–∏–Ω–∏—Ü)")
    return
end

-- –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
local targetPet = foundPetModels[1].model
print("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ò–¢–û–ú–¶–ê: " .. targetPet.Name)
print("üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " .. math.floor(foundPetModels[1].distance) .. " –µ–¥–∏–Ω–∏—Ü")
print("üé® –í–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: " .. #foundPetModels[1].meshes)
print("=" .. string.rep("=", 70))
print()

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–∞
local function analyzeObject(obj, depth)
    local indent = string.rep("  ", depth)
    print(indent .. "üì¶ " .. obj.ClassName .. ": " .. obj.Name .. " (Parent: " .. (obj.Parent and obj.Parent.Name or "NIL") .. ")")
    
    -- –ê–Ω–∞–ª–∏–∑ BasePart
    if obj:IsA("BasePart") then
        print(indent .. "  üìè Size: " .. tostring(obj.Size))
        print(indent .. "  üìç Position: " .. tostring(obj.Position))
        print(indent .. "  üîÑ CFrame: " .. tostring(obj.CFrame))
        print(indent .. "  üëª Transparency: " .. obj.Transparency)
        print(indent .. "  üé® Material: " .. tostring(obj.Material))
        print(indent .. "  üåà Color: " .. tostring(obj.Color))
        print(indent .. "  ‚öì Anchored: " .. tostring(obj.Anchored))
        print(indent .. "  üè∑Ô∏è CanCollide: " .. tostring(obj.CanCollide))
        if obj.Shape then
            print(indent .. "  üî∫ Shape: " .. tostring(obj.Shape))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Model
    if obj:IsA("Model") then
        print(indent .. "  üéØ PrimaryPart: " .. (obj.PrimaryPart and obj.PrimaryPart.Name or "NIL"))
        local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
        if success then
            print(indent .. "  üìç ModelCFrame: " .. tostring(modelCFrame))
        end
        local success2, modelSize = pcall(function() return obj:GetExtentsSize() end)
        if success2 then
            print(indent .. "  üìè ModelSize: " .. tostring(modelSize))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Motor6D
    if obj:IsA("Motor6D") then
        print(indent .. "  üîó Part0: " .. (obj.Part0 and obj.Part0.Name or "NIL"))
        print(indent .. "  üîó Part1: " .. (obj.Part1 and obj.Part1.Name or "NIL"))
        print(indent .. "  üìê C0: " .. tostring(obj.C0))
        print(indent .. "  üìê C1: " .. tostring(obj.C1))
        print(indent .. "  üéØ CurrentAngle: " .. obj.CurrentAngle)
        print(indent .. "  üéØ DesiredAngle: " .. obj.DesiredAngle)
        print(indent .. "  ‚ö° MaxVelocity: " .. obj.MaxVelocity)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Weld
    if obj:IsA("Weld") or obj:IsA("WeldConstraint") then
        print(indent .. "  üîó Part0: " .. (obj.Part0 and obj.Part0.Name or "NIL"))
        print(indent .. "  üîó Part1: " .. (obj.Part1 and obj.Part1.Name or "NIL"))
        if obj:IsA("Weld") then
            print(indent .. "  üìê C0: " .. tostring(obj.C0))
            print(indent .. "  üìê C1: " .. tostring(obj.C1))
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Attachment
    if obj:IsA("Attachment") then
        print(indent .. "  üìç Position: " .. tostring(obj.Position))
        print(indent .. "  üîÑ Orientation: " .. tostring(obj.Orientation))
        print(indent .. "  üìê CFrame: " .. tostring(obj.CFrame))
        print(indent .. "  üëÅÔ∏è Visible: " .. tostring(obj.Visible))
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Humanoid
    if obj:IsA("Humanoid") then
        print(indent .. "  ‚ù§Ô∏è Health: " .. obj.Health .. "/" .. obj.MaxHealth)
        print(indent .. "  üèÉ WalkSpeed: " .. obj.WalkSpeed)
        print(indent .. "  ü¶ò JumpPower: " .. obj.JumpPower)
        print(indent .. "  üé≠ DisplayDistanceType: " .. tostring(obj.DisplayDistanceType))
        print(indent .. "  üìä RigType: " .. tostring(obj.RigType))
        
        -- –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        local animator = obj:FindFirstChild("Animator")
        if animator then
            print(indent .. "  üé¨ Animator –Ω–∞–π–¥–µ–Ω!")
            local animTracks = animator:GetPlayingAnimationTracks()
            print(indent .. "  üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #animTracks)
            for i, track in ipairs(animTracks) do
                print(indent .. "    üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è #" .. i .. ":")
                print(indent .. "      üìù Name: " .. (track.Name or "Unnamed"))
                print(indent .. "      üÜî AnimationId: " .. (track.Animation and track.Animation.AnimationId or "NIL"))
                print(indent .. "      ‚è±Ô∏è Length: " .. track.Length)
                print(indent .. "      ‚èØÔ∏è IsPlaying: " .. tostring(track.IsPlaying))
                print(indent .. "      üîÅ Looped: " .. tostring(track.Looped))
                print(indent .. "      üìä Priority: " .. tostring(track.Priority))
                print(indent .. "      üîä Weight: " .. track.WeightCurrent)
                print(indent .. "      ‚è∞ TimePosition: " .. track.TimePosition)
                print(indent .. "      üèÉ Speed: " .. track.Speed)
            end
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ AnimationController
    if obj:IsA("AnimationController") then
        print(indent .. "  üéÆ AnimationController –Ω–∞–π–¥–µ–Ω!")
        local animator = obj:FindFirstChild("Animator")
        if animator then
            print(indent .. "  üé¨ Animator –Ω–∞–π–¥–µ–Ω!")
            local animTracks = animator:GetPlayingAnimationTracks()
            print(indent .. "  üé≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π: " .. #animTracks)
            for i, track in ipairs(animTracks) do
                print(indent .. "    üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è #" .. i .. ":")
                print(indent .. "      üìù Name: " .. (track.Name or "Unnamed"))
                print(indent .. "      üÜî AnimationId: " .. (track.Animation and track.Animation.AnimationId or "NIL"))
                print(indent .. "      ‚è±Ô∏è Length: " .. track.Length)
                print(indent .. "      ‚èØÔ∏è IsPlaying: " .. tostring(track.IsPlaying))
                print(indent .. "      üîÅ Looped: " .. tostring(track.Looped))
                print(indent .. "      üìä Priority: " .. tostring(track.Priority))
                print(indent .. "      üîä Weight: " .. track.WeightCurrent)
                print(indent .. "      ‚è∞ TimePosition: " .. track.TimePosition)
                print(indent .. "      üèÉ Speed: " .. track.Speed)
            end
        end
    end
    
    -- –ê–Ω–∞–ª–∏–∑ Animation –æ–±—ä–µ–∫—Ç–æ–≤
    if obj:IsA("Animation") then
        print(indent .. "  üéûÔ∏è AnimationId: " .. obj.AnimationId)
    end
    
    -- –ê–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤
    if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
        print(indent .. "  üìú –°–∫—Ä–∏–ø—Ç: " .. obj.ClassName)
        print(indent .. "  ‚úÖ Enabled: " .. tostring(obj.Enabled or "N/A"))
    end
    
    -- –ê–Ω–∞–ª–∏–∑ SpecialMesh
    if obj:IsA("SpecialMesh") then
        print(indent .. "  üé≠ MeshType: " .. tostring(obj.MeshType))
        print(indent .. "  üìè Scale: " .. tostring(obj.Scale))
        print(indent .. "  üìç Offset: " .. tostring(obj.Offset))
        if obj.MeshId ~= "" then
            print(indent .. "  üÜî MeshId: " .. obj.MeshId)
        end
        if obj.TextureId ~= "" then
            print(indent .. "  üñºÔ∏è TextureId: " .. obj.TextureId)
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –¥–µ—Ç–µ–π
local function analyzeChildren(obj, depth, maxDepth)
    if depth > maxDepth then
        return
    end
    
    analyzeObject(obj, depth)
    
    local children = obj:GetChildren()
    if #children > 0 then
        for _, child in ipairs(children) do
            analyzeChildren(child, depth + 1, maxDepth)
        end
    end
end

-- –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´
print("üî¨ –ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–ò–¢–û–ú–¶–ê:")
print("-" .. string.rep("-", 50))

analyzeChildren(targetPet, 0, 10) -- –ú–∞–∫—Å–∏–º—É–º 10 —É—Ä–æ–≤–Ω–µ–π –≤–≥–ª—É–±—å

print()
print("üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("-" .. string.rep("-", 30))

-- –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
local stats = {}
for _, obj in ipairs(targetPet:GetDescendants()) do
    local className = obj.ClassName
    stats[className] = (stats[className] or 0) + 1
end

for className, count in pairs(stats) do
    print("  " .. className .. ": " .. count)
end

print()
print("üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
print("=" .. string.rep("=", 70))
