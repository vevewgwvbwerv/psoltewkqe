-- üî¨ PET GROWTH DIAGNOSTIC ANALYZER
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∫ –ø–∏—Ç–æ–º—Ü—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –∏ —Ä–∞—Å—Ç—É—Ç –≤ workspace.visuals
-- –°–æ–∑–¥–∞–µ—Ç GUI —Å –∫–æ–Ω—Å–æ–ª—å—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

print("üî¨ === PET GROWTH DIAGNOSTIC ANALYZER ===")
print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–æ—Å—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ workspace.visuals")
print("–ò—â–µ—Ç: dog, bunny, golden lab –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏")

-- === –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
local gui = nil
local consoleFrame = nil
local consoleText = nil
local scrollingFrame = nil
local logLines = {}
local maxLogLines = 50
local isMonitoring = false
local monitorConnection = nil
local trackedPets = {}

-- === –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

local function addLogLine(message)
    local timestamp = os.date("%H:%M:%S")
    local logMessage = "[" .. timestamp .. "] " .. message
    
    table.insert(logLines, logMessage)
    print(logMessage) -- –î—É–±–ª–∏—Ä—É–µ–º –≤ –æ–±—ã—á–Ω—É—é –∫–æ–Ω—Å–æ–ª—å
    
    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if #logLines > maxLogLines then
        table.remove(logLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º GUI –∫–æ–Ω—Å–æ–ª—å
    if consoleText then
        consoleText.Text = table.concat(logLines, "\n")
        
        -- –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
        if scrollingFrame then
            scrollingFrame.CanvasPosition = Vector2.new(0, scrollingFrame.AbsoluteCanvasSize.Y)
        end
    end
end

local function logPetInfo(pet, action)
    local info = {
        name = pet.Name,
        action = action,
        position = pet:GetModelCFrame().Position,
        parts = {},
        totalParts = 0,
        hasMotor6D = false,
        hasPrimaryPart = pet.PrimaryPart ~= nil
    }
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–∏
    for _, obj in pairs(pet:GetDescendants()) do
        if obj:IsA("BasePart") then
            info.totalParts = info.totalParts + 1
            table.insert(info.parts, {
                name = obj.Name,
                size = obj.Size,
                anchored = obj.Anchored,
                canCollide = obj.CanCollide
            })
        elseif obj:IsA("Motor6D") then
            info.hasMotor6D = true
        end
    end
    
    -- –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    addLogLine("üêæ " .. action .. ": " .. info.name)
    addLogLine("  üìç –ü–æ–∑–∏—Ü–∏—è: " .. tostring(info.position))
    addLogLine("  üß© –ß–∞—Å—Ç–µ–π: " .. info.totalParts)
    addLogLine("  üîó Motor6D: " .. (info.hasMotor6D and "–î–∞" or "–ù–µ—Ç"))
    addLogLine("  üéØ PrimaryPart: " .. (info.hasPrimaryPart and "–î–∞" or "–ù–µ—Ç"))
    
    -- –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–ª—é—á–µ–≤—ã—Ö —á–∞—Å—Ç–µ–π
    for i, part in ipairs(info.parts) do
        if i <= 3 then -- –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏
            addLogLine("    " .. part.name .. ": " .. tostring(part.size))
        end
    end
    
    if #info.parts > 3 then
        addLogLine("    ... –∏ –µ—â–µ " .. (#info.parts - 3) .. " —á–∞—Å—Ç–µ–π")
    end
    
    return info
end

-- === –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–£–ù–ö–¶–ò–ò ===

local function startMonitoring()
    if isMonitoring then
        addLogLine("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    end
    
    isMonitoring = true
    addLogLine("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ workspace.visuals...")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ workspace.visuals
    local visuals = Workspace:FindFirstChild("visuals")
    if not visuals then
        addLogLine("‚ùå workspace.visuals –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    addLogLine("‚úÖ –ù–∞–π–¥–µ–Ω workspace.visuals")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    local function onChildAdded(child)
        if child:IsA("Model") then
            local petNames = {"dog", "bunny", "golden", "lab", "cat", "rabbit", "pet"}
            local isPet = false
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∏—Ç–æ–º—Ü–µ–º
            for _, petName in ipairs(petNames) do
                if string.lower(child.Name):find(petName) then
                    isPet = true
                    break
                end
            end
            
            if isPet then
                addLogLine("üéâ –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –ü–ò–¢–û–ú–ï–¶!")
                local initialInfo = logPetInfo(child, "–ü–û–Ø–í–ò–õ–°–Ø")
                
                -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                trackedPets[child] = {
                    startTime = tick(),
                    initialInfo = initialInfo,
                    sizeHistory = {}
                }
                
                -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                spawn(function()
                    local pet = child
                    local trackData = trackedPets[pet]
                    
                    while pet.Parent and trackData do
                        wait(0.1)
                        
                        if not pet.Parent then break end
                        
                        -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                        local currentSizes = {}
                        for _, obj in pairs(pet:GetDescendants()) do
                            if obj:IsA("BasePart") then
                                currentSizes[obj.Name] = obj.Size
                            end
                        end
                        
                        table.insert(trackData.sizeHistory, {
                            time = tick() - trackData.startTime,
                            sizes = currentSizes
                        })
                    end
                end)
            end
        end
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    local function onChildRemoved(child)
        if trackedPets[child] then
            local trackData = trackedPets[child]
            local lifeTime = tick() - trackData.startTime
            
            addLogLine("üëã –ü–ò–¢–û–ú–ï–¶ –£–î–ê–õ–ï–ù!")
            logPetInfo(child, "–£–î–ê–õ–ï–ù")
            addLogLine("  ‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: " .. string.format("%.1f", lifeTime) .. " —Å–µ–∫")
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if #trackData.sizeHistory > 1 then
                local firstSizes = trackData.sizeHistory[1].sizes
                local lastSizes = trackData.sizeHistory[#trackData.sizeHistory].sizes
                
                addLogLine("üìä –ê–ù–ê–õ–ò–ó –†–û–°–¢–ê:")
                for partName, finalSize in pairs(lastSizes) do
                    local initialSize = firstSizes[partName]
                    if initialSize then
                        local scaleX = finalSize.X / initialSize.X
                        local scaleY = finalSize.Y / initialSize.Y
                        local scaleZ = finalSize.Z / initialSize.Z
                        
                        if math.abs(scaleX - 1) > 0.01 then -- –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1%
                            addLogLine("  " .. partName .. ": " .. 
                                string.format("%.2fx, %.2fx, %.2fx", scaleX, scaleY, scaleZ))
                        end
                    end
                end
            end
            
            trackedPets[child] = nil
        end
    end
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    visuals.ChildAdded:Connect(onChildAdded)
    visuals.ChildRemoved:Connect(onChildRemoved)
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
    for _, child in pairs(visuals:GetChildren()) do
        if child:IsA("Model") then
            onChildAdded(child)
        end
    end
    
    addLogLine("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤...")
end

local function stopMonitoring()
    if not isMonitoring then
        addLogLine("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    end
    
    isMonitoring = false
    if monitorConnection then
        monitorConnection:Disconnect()
        monitorConnection = nil
    end
    
    trackedPets = {}
    addLogLine("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- === –°–û–ó–î–ê–ù–ò–ï GUI ===

local function createGUI()
    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π GUI –µ—Å–ª–∏ –µ—Å—Ç—å
    local existingGui = playerGui:FindFirstChild("PetGrowthDiagnostic")
    if existingGui then
        existingGui:Destroy()
    end
    
    -- –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π GUI
    gui = Instance.new("ScreenGui")
    gui.Name = "PetGrowthDiagnostic"
    gui.Parent = playerGui
    
    -- –ì–ª–∞–≤–Ω–∞—è —Ä–∞–º–∫–∞
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 600, 0, 400)
    mainFrame.Position = UDim2.new(0.5, -300, 0.5, -200)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 2
    mainFrame.BorderColor3 = Color3.fromRGB(0, 255, 255)
    mainFrame.Parent = gui
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(0, 100, 100)
    titleLabel.Text = "üî¨ Pet Growth Diagnostic Analyzer"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    -- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1, 0, 0, 50)
    buttonFrame.Position = UDim2.new(0, 0, 0, 40)
    buttonFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    buttonFrame.Parent = mainFrame
    
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 120, 0, 30)
    startButton.Position = UDim2.new(0, 10, 0, 10)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    startButton.Text = "üöÄ –°—Ç–∞—Ä—Ç"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.Gotham
    startButton.Parent = buttonFrame
    
    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 120, 0, 30)
    stopButton.Position = UDim2.new(0, 140, 0, 10)
    stopButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    stopButton.Text = "üõë –°—Ç–æ–ø"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.TextScaled = true
    stopButton.Font = Enum.Font.Gotham
    stopButton.Parent = buttonFrame
    
    local clearButton = Instance.new("TextButton")
    clearButton.Size = UDim2.new(0, 120, 0, 30)
    clearButton.Position = UDim2.new(0, 270, 0, 10)
    clearButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    clearButton.Text = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"
    clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    clearButton.TextScaled = true
    clearButton.Font = Enum.Font.Gotham
    clearButton.Parent = buttonFrame
    
    -- –ö–æ–Ω—Å–æ–ª—å
    scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Size = UDim2.new(1, -20, 1, -110)
    scrollingFrame.Position = UDim2.new(0, 10, 0, 100)
    scrollingFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    scrollingFrame.BorderSizePixel = 1
    scrollingFrame.BorderColor3 = Color3.fromRGB(100, 100, 100)
    scrollingFrame.ScrollBarThickness = 10
    scrollingFrame.Parent = mainFrame
    
    consoleText = Instance.new("TextLabel")
    consoleText.Size = UDim2.new(1, -10, 1, 0)
    consoleText.Position = UDim2.new(0, 5, 0, 0)
    consoleText.BackgroundTransparency = 1
    consoleText.Text = ""
    consoleText.TextColor3 = Color3.fromRGB(0, 255, 0)
    consoleText.TextSize = 12
    consoleText.Font = Enum.Font.Code
    consoleText.TextXAlignment = Enum.TextXAlignment.Left
    consoleText.TextYAlignment = Enum.TextYAlignment.Top
    consoleText.TextWrapped = true
    consoleText.Parent = scrollingFrame
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    startButton.MouseButton1Click:Connect(function()
        startButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        wait(0.1)
        startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
        startMonitoring()
    end)
    
    stopButton.MouseButton1Click:Connect(function()
        stopButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
        wait(0.1)
        stopButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
        stopMonitoring()
    end)
    
    clearButton.MouseButton1Click:Connect(function()
        clearButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        wait(0.1)
        clearButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        logLines = {}
        if consoleText then
            consoleText.Text = ""
        end
        addLogLine("üóëÔ∏è –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")
    end)
    
    -- –î–µ–ª–∞–µ–º GUI –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–º
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    titleLabel.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    titleLabel.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    addLogLine("üî¨ Pet Growth Diagnostic Analyzer –∑–∞–ø—É—â–µ–Ω!")
    addLogLine("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    addLogLine("  1. –ù–∞–∂–º–∏—Ç–µ 'üöÄ –°—Ç–∞—Ä—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    addLogLine("  2. –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –≤ –∏–≥—Ä–µ")
    addLogLine("  3. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ª–æ–≥–∞–º–∏ —Ä–æ—Å—Ç–∞ –ø–∏—Ç–æ–º—Ü–∞")
    addLogLine("  4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞")
    addLogLine("")
    addLogLine("üéØ –¶–µ–ª—å: –ü–æ–Ω—è—Ç—å –∫–∞–∫ –ø–∏—Ç–æ–º–µ—Ü —Ä–∞—Å—Ç–µ—Ç –∏–∑ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
    addLogLine("üìç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º: workspace.visuals")
    addLogLine("üîç –ò—â–µ–º: dog, bunny, golden lab –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏")
end

-- === –ó–ê–ü–£–°–ö ===

createGUI()

addLogLine("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
addLogLine("üí° –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
