-- üîç UNIVERSAL PET DETECTOR
-- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ Workspace –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–µ–≤
-- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

print("üîç === UNIVERSAL PET DETECTOR ===")
print("–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ Workspace")

-- === –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
local gui = nil
local consoleText = nil
local scrollingFrame = nil
local logLines = {}
local maxLogLines = 100
local isMonitoring = false
local trackedModels = {}
local connections = {}

-- === –§–£–ù–ö–¶–ò–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===

local function addLogLine(message)
    local timestamp = os.date("%H:%M:%S")
    local logMessage = "[" .. timestamp .. "] " .. message
    
    table.insert(logLines, logMessage)
    print(logMessage)
    
    if #logLines > maxLogLines then
        table.remove(logLines, 1)
    end
    
    if consoleText then
        consoleText.Text = table.concat(logLines, "\n")
        if scrollingFrame then
            scrollingFrame.CanvasPosition = Vector2.new(0, scrollingFrame.AbsoluteCanvasSize.Y)
        end
    end
end

local function analyzeModel(model)
    local info = {
        name = model.Name,
        fullName = model:GetFullName(),
        className = model.ClassName,
        parts = {},
        totalParts = 0,
        hasMotor6D = false,
        hasHumanoid = false,
        hasPrimaryPart = model.PrimaryPart ~= nil,
        hasAnimations = false,
        specialObjects = {}
    }
    
    -- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    local success, position = pcall(function()
        return model:GetModelCFrame().Position
    end)
    info.position = success and position or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            info.totalParts = info.totalParts + 1
            if info.totalParts <= 5 then -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —á–∞—Å—Ç–µ–π
                table.insert(info.parts, {
                    name = obj.Name,
                    size = obj.Size,
                    anchored = obj.Anchored,
                    material = obj.Material.Name
                })
            end
        elseif obj:IsA("Motor6D") then
            info.hasMotor6D = true
        elseif obj:IsA("Humanoid") then
            info.hasHumanoid = true
        elseif obj:IsA("Animation") or obj:IsA("AnimationTrack") then
            info.hasAnimations = true
        elseif obj:IsA("SpecialMesh") or obj:IsA("MeshPart") then
            table.insert(info.specialObjects, obj.ClassName .. ":" .. obj.Name)
        end
    end
    
    return info
end

local function logModelInfo(model, action)
    local info = analyzeModel(model)
    
    addLogLine("üÜï " .. action .. " –ú–û–î–ï–õ–¨: " .. info.name)
    addLogLine("  üìç –ü–æ–ª–Ω–æ–µ –∏–º—è: " .. info.fullName)
    addLogLine("  üìç –ü–æ–∑–∏—Ü–∏—è: " .. tostring(info.position))
    addLogLine("  üß© –ß–∞—Å—Ç–µ–π: " .. info.totalParts)
    addLogLine("  üîó Motor6D: " .. (info.hasMotor6D and "‚úÖ" or "‚ùå"))
    addLogLine("  üö∂ Humanoid: " .. (info.hasHumanoid and "‚úÖ" or "‚ùå"))
    addLogLine("  üéØ PrimaryPart: " .. (info.hasPrimaryPart and "‚úÖ" or "‚ùå"))
    addLogLine("  üé¨ –ê–Ω–∏–º–∞—Ü–∏–∏: " .. (info.hasAnimations and "‚úÖ" or "‚ùå"))
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏
    if #info.parts > 0 then
        addLogLine("  üì¶ –ß–∞—Å—Ç–∏:")
        for _, part in ipairs(info.parts) do
            addLogLine("    ‚Ä¢ " .. part.name .. ": " .. tostring(part.size) .. 
                      " (" .. part.material .. ", Anchored:" .. tostring(part.anchored) .. ")")
        end
        if info.totalParts > #info.parts then
            addLogLine("    ... –∏ –µ—â–µ " .. (info.totalParts - #info.parts) .. " —á–∞—Å—Ç–µ–π")
        end
    end
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if #info.specialObjects > 0 then
        addLogLine("  ‚ú® –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: " .. table.concat(info.specialObjects, ", "))
    end
    
    addLogLine("") -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    return info
end

-- === –ú–û–ù–ò–¢–û–†–ò–ù–ì –§–£–ù–ö–¶–ò–ò ===

local function monitorContainer(container, containerName)
    addLogLine("üëÄ –ú–æ–Ω–∏—Ç–æ—Ä—é: " .. containerName)
    
    local function onChildAdded(child)
        if child:IsA("Model") then
            -- –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
            addLogLine("üéâ –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ –í " .. containerName .. "!")
            local info = logModelInfo(child, "–î–û–ë–ê–í–õ–ï–ù–ê –í " .. containerName)
            
            -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —ç—Ç—É –º–æ–¥–µ–ª—å
            trackedModels[child] = {
                startTime = tick(),
                container = containerName,
                initialInfo = info,
                sizeHistory = {}
            }
            
            -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            spawn(function()
                local model = child
                local trackData = trackedModels[model]
                
                while model.Parent and trackData do
                    wait(0.2) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã
                    
                    if not model.Parent then break end
                    
                    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
                    local currentSizes = {}
                    for _, obj in pairs(model:GetDescendants()) do
                        if obj:IsA("BasePart") then
                            currentSizes[obj.Name] = obj.Size
                        end
                    end
                    
                    table.insert(trackData.sizeHistory, {
                        time = tick() - trackData.startTime,
                        sizes = currentSizes
                    })
                end
            end)
        end
    end
    
    local function onChildRemoved(child)
        if trackedModels[child] then
            local trackData = trackedModels[child]
            local lifeTime = tick() - trackData.startTime
            
            addLogLine("üëã –ú–û–î–ï–õ–¨ –£–î–ê–õ–ï–ù–ê –ò–ó " .. trackData.container .. "!")
            addLogLine("  üìõ –ò–º—è: " .. child.Name)
            addLogLine("  ‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: " .. string.format("%.2f", lifeTime) .. " —Å–µ–∫")
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if #trackData.sizeHistory > 1 then
                local firstSizes = trackData.sizeHistory[1].sizes
                local lastSizes = trackData.sizeHistory[#trackData.sizeHistory].sizes
                
                addLogLine("üìä –ê–ù–ê–õ–ò–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô –†–ê–ó–ú–ï–†–ê:")
                local hasChanges = false
                
                for partName, finalSize in pairs(lastSizes) do
                    local initialSize = firstSizes[partName]
                    if initialSize then
                        local scaleX = finalSize.X / initialSize.X
                        local scaleY = finalSize.Y / initialSize.Y
                        local scaleZ = finalSize.Z / initialSize.Z
                        
                        if math.abs(scaleX - 1) > 0.05 or math.abs(scaleY - 1) > 0.05 or math.abs(scaleZ - 1) > 0.05 then
                            hasChanges = true
                            addLogLine("  üîÑ " .. partName .. ": " .. 
                                string.format("%.3fx, %.3fx, %.3fx", scaleX, scaleY, scaleZ))
                        end
                    end
                end
                
                if not hasChanges then
                    addLogLine("  ‚û°Ô∏è –†–∞–∑–º–µ—Ä—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å")
                end
            else
                addLogLine("  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            end
            
            addLogLine("") -- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            trackedModels[child] = nil
        end
    end
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    table.insert(connections, container.ChildAdded:Connect(onChildAdded))
    table.insert(connections, container.ChildRemoved:Connect(onChildRemoved))
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
    for _, child in pairs(container:GetChildren()) do
        if child:IsA("Model") then
            addLogLine("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å: " .. child.Name .. " –≤ " .. containerName)
        end
    end
end

local function startMonitoring()
    if isMonitoring then
        addLogLine("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    end
    
    isMonitoring = true
    addLogLine("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π Workspace
    monitorContainer(Workspace, "Workspace")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º workspace.visuals –µ—Å–ª–∏ –µ—Å—Ç—å
    local visuals = Workspace:FindFirstChild("visuals")
    if visuals then
        monitorContainer(visuals, "workspace.visuals")
    else
        addLogLine("‚ö†Ô∏è workspace.visuals –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    local commonContainers = {"Pets", "Models", "Effects", "Visuals", "Game"}
    for _, containerName in ipairs(commonContainers) do
        local container = Workspace:FindFirstChild(containerName)
        if container then
            monitorContainer(container, "workspace." .. containerName)
        end
    end
    
    addLogLine("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —è–π—Ü–∞!")
end

local function stopMonitoring()
    if not isMonitoring then
        addLogLine("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    end
    
    isMonitoring = false
    
    -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {}
    
    trackedModels = {}
    addLogLine("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- === –°–û–ó–î–ê–ù–ò–ï GUI ===

local function createGUI()
    local existingGui = playerGui:FindFirstChild("UniversalPetDetector")
    if existingGui then
        existingGui:Destroy()
    end
    
    gui = Instance.new("ScreenGui")
    gui.Name = "UniversalPetDetector"
    gui.Parent = playerGui
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 700, 0, 500)
    mainFrame.Position = UDim2.new(0.5, -350, 0.5, -250)
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    mainFrame.BorderSizePixel = 2
    mainFrame.BorderColor3 = Color3.fromRGB(255, 100, 0)
    mainFrame.Parent = gui
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
    titleLabel.Text = "üîç Universal Pet Detector"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    local buttonFrame = Instance.new("Frame")
    buttonFrame.Size = UDim2.new(1, 0, 0, 50)
    buttonFrame.Position = UDim2.new(0, 0, 0, 40)
    buttonFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    buttonFrame.Parent = mainFrame
    
    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 120, 0, 30)
    startButton.Position = UDim2.new(0, 10, 0, 10)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    startButton.Text = "üöÄ –°—Ç–∞—Ä—Ç"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.Gotham
    startButton.Parent = buttonFrame
    
    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 120, 0, 30)
    stopButton.Position = UDim2.new(0, 140, 0, 10)
    stopButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    stopButton.Text = "üõë –°—Ç–æ–ø"
    stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    stopButton.TextScaled = true
    stopButton.Font = Enum.Font.Gotham
    stopButton.Parent = buttonFrame
    
    local clearButton = Instance.new("TextButton")
    clearButton.Size = UDim2.new(0, 120, 0, 30)
    clearButton.Position = UDim2.new(0, 270, 0, 10)
    clearButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    clearButton.Text = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"
    clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    clearButton.TextScaled = true
    clearButton.Font = Enum.Font.Gotham
    clearButton.Parent = buttonFrame
    
    scrollingFrame = Instance.new("ScrollingFrame")
    scrollingFrame.Size = UDim2.new(1, -20, 1, -110)
    scrollingFrame.Position = UDim2.new(0, 10, 0, 100)
    scrollingFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    scrollingFrame.BorderSizePixel = 1
    scrollingFrame.BorderColor3 = Color3.fromRGB(100, 100, 100)
    scrollingFrame.ScrollBarThickness = 12
    scrollingFrame.Parent = mainFrame
    
    consoleText = Instance.new("TextLabel")
    consoleText.Size = UDim2.new(1, -10, 1, 0)
    consoleText.Position = UDim2.new(0, 5, 0, 0)
    consoleText.BackgroundTransparency = 1
    consoleText.Text = ""
    consoleText.TextColor3 = Color3.fromRGB(255, 200, 0)
    consoleText.TextSize = 11
    consoleText.Font = Enum.Font.Code
    consoleText.TextXAlignment = Enum.TextXAlignment.Left
    consoleText.TextYAlignment = Enum.TextYAlignment.Top
    consoleText.TextWrapped = true
    consoleText.Parent = scrollingFrame
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    startButton.MouseButton1Click:Connect(startMonitoring)
    stopButton.MouseButton1Click:Connect(stopMonitoring)
    clearButton.MouseButton1Click:Connect(function()
        logLines = {}
        if consoleText then
            consoleText.Text = ""
        end
        addLogLine("üóëÔ∏è –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")
    end)
    
    addLogLine("üîç Universal Pet Detector –≥–æ—Ç–æ–≤!")
    addLogLine("üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –≤ Workspace")
    addLogLine("üéØ –ù–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ")
    addLogLine("üí° –ü–æ–∫–∞–∂–µ—Ç –õ–Æ–ë–£–Æ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–∏—Ç–æ–º–µ—Ü")
end

-- === –ó–ê–ü–£–°–ö ===

createGUI()

addLogLine("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤!")
addLogLine("üî• –ù–∞–π–¥–µ—Ç –õ–Æ–ë–£–Æ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –≤ Workspace!")
