-- ScriptAssemblyAnalyzer.lua
-- –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–ö–†–ò–ü–¢–û–í –°–ë–û–†–ö–ò: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–±–æ—Ä–∫—É –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞
-- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (3 —á–∞—Å—Ç–∏) –≤ –ø–æ–ª–Ω—É—é (18 —á–∞—Å—Ç–µ–π)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

print("üîß === SCRIPT ASSEMBLY ANALYZER ===")
print("üéØ –¶–µ–ª—å: –û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å–±–æ—Ä–∫—É –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞")
print("=" .. string.rep("=", 60))

-- üìä –î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –°–ë–û–†–ö–ò
local AssemblyData = {
    targetModel = nil,
    baseSnapshot = nil,
    assemblySteps = {},
    scriptCalls = {},
    instanceCreations = {},
    cloneOperations = {},
    isMonitoring = false,
    startTime = 0,
    assemblySequence = {}
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
local AnalyzerConsole = nil
local ConsoleLines = {}
local MaxLines = 150

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createAnalyzerConsole()
    if AnalyzerConsole then AnalyzerConsole:Destroy() end
    
    AnalyzerConsole = Instance.new("ScreenGui")
    AnalyzerConsole.Name = "ScriptAssemblyAnalyzerConsole"
    AnalyzerConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 950, 0, 750)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.02, 0.1, 0.05)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(0.1, 1, 0.5)
    frame.Parent = AnalyzerConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(0.1, 1, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üîß SCRIPT ASSEMBLY ANALYZER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.01, 0.05, 0.02)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üîß –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤..."
    textLabel.TextColor3 = Color3.new(0.8, 1, 0.9)
    textLabel.TextSize = 10
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
local function analyzerLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local relativeTime = AssemblyData.startTime > 0 and string.format("(+%.3f)", tick() - AssemblyData.startTime) or ""
    
    local prefixes = {
        ASSEMBLY = "üîß", SCRIPT = "üìú", INSTANCE = "üÜï", CLONE = "üìã",
        STEP = "üë£", MONITOR = "üëÅÔ∏è", CRITICAL = "üî•", SUCCESS = "‚úÖ", 
        ERROR = "‚ùå", INFO = "‚ÑπÔ∏è", DETAIL = "üìù", SEQUENCE = "üîÑ",
        CREATION = "‚ö°", ADDITION = "‚ûï", STRUCTURE = "üèóÔ∏è", TIMING = "‚è±Ô∏è"
    }
    
    local logLine = string.format("[%s] %s %s %s", timestamp, relativeTime, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if AnalyzerConsole then
        local textLabel = AnalyzerConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üì∏ –°–û–ó–î–ê–ù–ò–ï –°–ù–ò–ú–ö–ê –°–¢–†–£–ö–¢–£–†–´
local function createStructureSnapshot(model, snapshotName)
    local snapshot = {
        name = snapshotName,
        timestamp = tick(),
        relativeTime = AssemblyData.startTime > 0 and (tick() - AssemblyData.startTime) or 0,
        children = #model:GetChildren(),
        descendants = #model:GetDescendants(),
        structure = {}
    }
    
    -- –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
    local typeCounts = {}
    for _, obj in pairs(model:GetDescendants()) do
        local className = obj.ClassName
        typeCounts[className] = (typeCounts[className] or 0) + 1
    end
    
    snapshot.structure = typeCounts
    
    analyzerLog("STRUCTURE", string.format("üì∏ –°–ù–ò–ú–û–ö: %s", snapshotName), {
        Children = snapshot.children,
        Descendants = snapshot.descendants,
        RelativeTime = string.format("%.3f —Å–µ–∫", snapshot.relativeTime)
    })
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for className, count in pairs(typeCounts) do
        analyzerLog("DETAIL", string.format("  %s: %d", className, count))
    end
    
    return snapshot
end

-- ‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –°–ù–ò–ú–ö–û–í
local function compareSnapshots(before, after)
    analyzerLog("SEQUENCE", string.format("‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï: %s VS %s", before.name, after.name))
    
    local childrenDiff = after.children - before.children
    local descendantsDiff = after.descendants - before.descendants
    
    analyzerLog("SEQUENCE", "üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:", {
        ChildrenDiff = string.format("%+d", childrenDiff),
        DescendantsDiff = string.format("%+d", descendantsDiff),
        TimeDiff = string.format("%.3f —Å–µ–∫", after.relativeTime - before.relativeTime)
    })
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    local allTypes = {}
    for className, _ in pairs(before.structure) do allTypes[className] = true end
    for className, _ in pairs(after.structure) do allTypes[className] = true end
    
    analyzerLog("SEQUENCE", "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    for className, _ in pairs(allTypes) do
        local beforeCount = before.structure[className] or 0
        local afterCount = after.structure[className] or 0
        local diff = afterCount - beforeCount
        
        if diff ~= 0 then
            analyzerLog("DETAIL", string.format("  %s: %+d (–±—ã–ª–æ %d, —Å—Ç–∞–ª–æ %d)", 
                className, diff, beforeCount, afterCount))
        end
    end
    
    return {
        childrenDiff = childrenDiff,
        descendantsDiff = descendantsDiff,
        timeDiff = after.relativeTime - before.relativeTime,
        structureChanges = {}
    }
end

-- üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–û–ë–ê–í–õ–ï–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í
local function monitorObjectAddition(model)
    analyzerLog("MONITOR", "üëÅÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì –î–û–ë–ê–í–õ–ï–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í: " .. model.Name)
    
    local stepCounter = 0
    local lastSnapshot = createStructureSnapshot(model, "initial")
    AssemblyData.baseSnapshot = lastSnapshot
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–º–∫–æ–≤
    local connection = model.DescendantAdded:Connect(function(obj)
        stepCounter = stepCounter + 1
        local stepName = string.format("step_%d", stepCounter)
        
        analyzerLog("ADDITION", string.format("‚ûï –®–ê–ì %d: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç %s", stepCounter, obj.Name), {
            ClassName = obj.ClassName,
            Parent = obj.Parent and obj.Parent.Name or "nil",
            RelativeTime = string.format("%.3f —Å–µ–∫", tick() - AssemblyData.startTime)
        })
        
        -- –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        wait(0.01) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        local currentSnapshot = createStructureSnapshot(model, stepName)
        
        -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–Ω–∏–º–∫–æ–º
        local comparison = compareSnapshots(lastSnapshot, currentSnapshot)
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥ —Å–±–æ—Ä–∫–∏
        table.insert(AssemblyData.assemblySteps, {
            step = stepCounter,
            object = obj,
            snapshot = currentSnapshot,
            comparison = comparison,
            timestamp = tick(),
            relativeTime = tick() - AssemblyData.startTime
        })
        
        lastSnapshot = currentSnapshot
        
        -- –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –º–Ω–æ–≥–æ, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        if stepCounter == 1 then
            spawn(function()
                wait(5)
                if model.Parent then
                    local finalSnapshot = createStructureSnapshot(model, "final")
                    local finalComparison = compareSnapshots(AssemblyData.baseSnapshot, finalSnapshot)
                    
                    analyzerLog("CRITICAL", "üî• –ò–¢–û–ì–û–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:", {
                        TotalSteps = stepCounter,
                        ChildrenIncrease = string.format("+%d (—Å %d –¥–æ %d)", 
                            finalComparison.childrenDiff, 
                            AssemblyData.baseSnapshot.children, 
                            finalSnapshot.children),
                        DescendantsIncrease = string.format("+%d (—Å %d –¥–æ %d)", 
                            finalComparison.descendantsDiff, 
                            AssemblyData.baseSnapshot.descendants, 
                            finalSnapshot.descendants),
                        TotalTime = string.format("%.3f —Å–µ–∫", finalSnapshot.relativeTime)
                    })
                    
                    analyzerLog("CRITICAL", "üîß –ê–ù–ê–õ–ò–ó –°–ë–û–†–ö–ò –ó–ê–í–ï–†–®–ï–ù!")
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    return connection
end

-- üîç –ü–û–ò–°–ö –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò –í REPLICATEDSTORAGE
local function findBaseModel(petName)
    analyzerLog("ASSEMBLY", "üîç –ü–û–ò–°–ö –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò: " .. petName)
    
    local skins = ReplicatedStorage:FindFirstChild("Skins")
    if not skins then
        analyzerLog("ERROR", "‚ùå –ü–∞–ø–∫–∞ Skins –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ReplicatedStorage")
        return nil
    end
    
    -- –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏
    local baseModel = skins:FindFirstChild(petName)
    if baseModel and baseModel:IsA("Model") then
        analyzerLog("SUCCESS", "‚úÖ –ë–ê–ó–û–í–ê–Ø –ú–û–î–ï–õ–¨ –ù–ê–ô–î–ï–ù–ê!", {
            Name = baseModel.Name,
            Path = baseModel:GetFullName(),
            Children = #baseModel:GetChildren(),
            Descendants = #baseModel:GetDescendants()
        })
        
        -- –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        createStructureSnapshot(baseModel, "base")
        return baseModel
    end
    
    analyzerLog("ERROR", "‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: " .. petName)
    return nil
end

-- üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –°–ë–û–†–ö–ò
local function startAssemblyAnalysis()
    analyzerLog("ASSEMBLY", "üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –°–ë–û–†–ö–ò –ú–û–î–ï–õ–ò")
    analyzerLog("ASSEMBLY", "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ –ø–æ–ª–Ω—É—é")
    
    AssemblyData.isMonitoring = true
    AssemblyData.startTime = tick()
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ Visuals
    local visuals = Workspace:FindFirstChild("Visuals")
    if not visuals then
        analyzerLog("ERROR", "‚ùå –ü–∞–ø–∫–∞ Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Workspace")
        return
    end
    
    analyzerLog("MONITOR", "üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ Visuals...")
    
    local visualsConnection = visuals.ChildAdded:Connect(function(obj)
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" or
               name == "goldenlab" or name:find("lab") then
                
                analyzerLog("CRITICAL", "üéØ –¶–ï–õ–ï–í–ê–Ø –ú–û–î–ï–õ–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ê: " .. obj.Name)
                AssemblyData.targetModel = obj
                
                -- –ò—â–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                local baseModel = findBaseModel(obj.Name)
                
                -- –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–±–æ—Ä–∫–∏
                local monitorConnection = monitorObjectAddition(obj)
                
                -- –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Visuals
                visualsConnection:Disconnect()
                
                analyzerLog("ASSEMBLY", "‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–±–æ—Ä–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω!")
                analyzerLog("ASSEMBLY", "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞...")
            end
        end
    end)
    
    analyzerLog("ASSEMBLY", "‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤!")
    analyzerLog("ASSEMBLY", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê!")
end

-- üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –°–ë–û–†–ö–ò
local function generateAssemblyReport()
    analyzerLog("CRITICAL", "üìã === –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –°–ë–û–†–ö–ò ===")
    
    if not AssemblyData.targetModel then
        analyzerLog("ERROR", "‚ùå –¶–µ–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    end
    
    analyzerLog("INFO", string.format("üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: %s", AssemblyData.targetModel.Name))
    analyzerLog("INFO", string.format("üë£ –í—Å–µ–≥–æ —à–∞–≥–æ–≤ —Å–±–æ—Ä–∫–∏: %d", #AssemblyData.assemblySteps))
    
    if AssemblyData.baseSnapshot then
        analyzerLog("INFO", string.format("üì¶ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: %d —á–∞—Å—Ç–µ–π", AssemblyData.baseSnapshot.children))
    end
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
    if #AssemblyData.assemblySteps > 0 then
        analyzerLog("CRITICAL", "üî• –ö–õ–Æ–ß–ï–í–´–ï –®–ê–ì–ò –°–ë–û–†–ö–ò:")
        for i, step in ipairs(AssemblyData.assemblySteps) do
            if i <= 10 then -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —à–∞–≥–æ–≤
                analyzerLog("STEP", string.format("üë£ –®–∞–≥ %d: %s (%s)", 
                    step.step, step.object.Name, step.object.ClassName), {
                    Time = string.format("%.3f —Å–µ–∫", step.relativeTime),
                    Parent = step.object.Parent and step.object.Parent.Name or "nil"
                })
            end
        end
        
        if #AssemblyData.assemblySteps > 10 then
            analyzerLog("INFO", string.format("... –∏ –µ—â–µ %d —à–∞–≥–æ–≤", #AssemblyData.assemblySteps - 10))
        end
    end
    
    analyzerLog("CRITICAL", "üîß –ê–ù–ê–õ–ò–ó –°–ë–û–†–ö–ò –ó–ê–í–ï–†–®–ï–ù!")
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createAssemblyGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ScriptAssemblyAnalyzerGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 380, 0, 140)
    frame.Position = UDim2.new(1, -400, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.02, 0.1, 0.05)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(0.1, 1, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üîß SCRIPT ASSEMBLY ANALYZER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(0.1, 1, 0.5)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üîß –ê–ù–ê–õ–ò–ó –°–ë–û–†–ö–ò"
    startBtn.TextColor3 = Color3.new(0, 0, 0)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local reportBtn = Instance.new("TextButton")
    reportBtn.Size = UDim2.new(1, -20, 0, 30)
    reportBtn.Position = UDim2.new(0, 10, 0, 90)
    reportBtn.BackgroundColor3 = Color3.new(0.5, 0.8, 0.6)
    reportBtn.BorderSizePixel = 0
    reportBtn.Text = "üìã –û–¢–ß–ï–¢ –°–ë–û–†–ö–ò"
    reportBtn.TextColor3 = Color3.new(0, 0, 0)
    reportBtn.TextScaled = true
    reportBtn.Font = Enum.Font.SourceSans
    reportBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 20)
    status.Position = UDim2.new(0, 10, 0, 125)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Å–±–æ—Ä–∫–∏"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üîß –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω!"
        status.TextColor3 = Color3.new(0.1, 1, 0.5)
        startBtn.Text = "‚úÖ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startAssemblyAnalysis()
    end)
    
    reportBtn.MouseButton1Click:Connect(function()
        generateAssemblyReport()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createAnalyzerConsole()
createAssemblyGUI()

analyzerLog("ASSEMBLY", "‚úÖ ScriptAssemblyAnalyzer –≥–æ—Ç–æ–≤!")
analyzerLog("ASSEMBLY", "üîß –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞")
analyzerLog("ASSEMBLY", "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è 3‚Üí18 —á–∞—Å—Ç–µ–π")
analyzerLog("ASSEMBLY", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ê–ù–ê–õ–ò–ó –°–ë–û–†–ö–ò' –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
