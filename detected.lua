-- üîç ANIMATOR DIAGNOSTIC - –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∏—Ç–æ–º—Ü–∞
-- –ò—Å—Å–ª–µ–¥—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Animator –∏ AI

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer

print("üîç === ANIMATOR DIAGNOSTIC ===")
print("–ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ (–∏–∑ PetScaler)
local function findPet()
    local playerChar = player.Character
    if not playerChar then return nil end
    
    local hrp = playerChar:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    
    local playerPos = hrp.Position
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:match("%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x") then
            if obj.PrimaryPart then
                local distance = (obj.PrimaryPart.Position - playerPos).Magnitude
                if distance <= 100 then
                    return obj
                end
            end
        end
    end
    
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
local function analyzeAnimationComponents(model)
    print("\nüìã === –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ò: " .. model.Name .. " ===")
    
    -- 1. HUMANOID
    local humanoid = model:FindFirstChild("Humanoid")
    if humanoid then
        print("‚úÖ HUMANOID –Ω–∞–π–¥–µ–Ω:")
        print("  - WalkSpeed:", humanoid.WalkSpeed)
        print("  - JumpPower:", humanoid.JumpPower)
        print("  - Health:", humanoid.Health)
        print("  - MaxHealth:", humanoid.MaxHealth)
        print("  - PlatformStand:", humanoid.PlatformStand)
    else
        print("‚ùå HUMANOID –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- 2. ANIMATOR
    local animator = model:FindFirstChildOfClass("Animator")
    if not animator and humanoid then
        animator = humanoid:FindFirstChildOfClass("Animator")
    end
    
    if animator then
        print("‚úÖ ANIMATOR –Ω–∞–π–¥–µ–Ω –≤:", animator.Parent.Name)
        
        -- –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
        local tracks = animator:GetPlayingAnimationTracks()
        print("  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:", #tracks)
        
        for i, track in ipairs(tracks) do
            print("  - –¢—Ä–µ–∫ " .. i .. ":")
            print("    - Animation ID:", track.Animation.AnimationId)
            print("    - IsPlaying:", track.IsPlaying)
            print("    - Length:", track.Length)
            print("    - Speed:", track.Speed)
            print("    - Priority:", track.Priority.Name)
        end
    else
        print("‚ùå ANIMATOR –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- 3. ANIMATION CONTROLLER (–ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê)
    local animController = model:FindFirstChildOfClass("AnimationController")
    if animController then
        print("‚úÖ ANIMATION CONTROLLER –Ω–∞–π–¥–µ–Ω")
        local controllerAnimator = animController:FindFirstChildOfClass("Animator")
        if controllerAnimator then
            print("  - –°–æ–¥–µ—Ä–∂–∏—Ç Animator")
            local controllerTracks = controllerAnimator:GetPlayingAnimationTracks()
            print("  - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:", #controllerTracks)
            
            -- –ì–õ–£–ë–û–ö–ê–Ø –ê–ù–ê–õ–ò–ó –ö–ê–ñ–î–û–ì–û –¢–†–ï–ö–ê
            for i, track in ipairs(controllerTracks) do
                print("\n  üéµ === –¢–†–ï–ö " .. i .. " (–ö–û–ù–¢–†–û–õ–õ–ï–†) ===")
                print("    - Animation ID: " .. (track.Animation and track.Animation.AnimationId or "N/A"))
                print("    - IsPlaying: " .. tostring(track.IsPlaying))
                print("    - Length: " .. tostring(track.Length))
                print("    - Speed: " .. tostring(track.Speed))
                print("    - Priority: " .. tostring(track.Priority))
                print("    - TimePosition: " .. tostring(track.TimePosition))
                print("    - IsLoaded: " .. tostring(track.IsLoaded))
                
                -- –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë ANIMATION –û–ë–™–ï–ö–¢–ï
                if track.Animation then
                    print("    - Animation Name: " .. track.Animation.Name)
                    print("    - Animation Parent: " .. (track.Animation.Parent and track.Animation.Parent.Name or "N/A"))
                    print("    - Animation ClassName: " .. track.Animation.ClassName)
                end
            end
        end
    else
        print("‚ùå ANIMATION CONTROLLER –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
    
    -- 4. ANIMATION –û–ë–™–ï–ö–¢–´ (–†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö)
    print("\nüé≠ === –ü–û–ò–°–ö ANIMATION –û–ë–™–ï–ö–¢–û–í ===")
    local animations = {}
    
    -- –ü–û–ò–°–ö –í–û –í–°–ï–• –ü–û–¢–û–ú–ö–ê–• –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ì–õ–£–ë–ò–ù–´
    local function findAnimations(parent, path)
        path = path or parent.Name
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Animation") then
                table.insert(animations, {
                    object = child,
                    path = path .. "." .. child.Name,
                    id = child.AnimationId,
                    name = child.Name
                })
            end
            -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–∞—Ö
            findAnimations(child, path .. "." .. child.Name)
        end
    end
    
    findAnimations(model)
    
    -- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ü–û–ò–°–ö –í WORKSPACE
    print("üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Animation –æ–±—ä–µ–∫—Ç–æ–≤ –≤ Workspace...")
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Animation") and obj.AnimationId ~= "" then
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —Å –Ω–∞—à–µ–π –º–æ–¥–µ–ª—å—é
            local parent = obj.Parent
            local isRelated = false
            while parent do
                if parent == model then
                    isRelated = true
                    break
                end
                parent = parent.Parent
            end
            
            if isRelated then
                table.insert(animations, {
                    object = obj,
                    path = "Workspace." .. obj:GetFullName(),
                    id = obj.AnimationId,
                    name = obj.Name
                })
            end
        end
    end
    
    if #animations > 0 then
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ Animation –æ–±—ä–µ–∫—Ç–æ–≤:", #animations)
        for i, anim in ipairs(animations) do
            print("  - " .. i .. ". " .. anim.name)
            print("    - –ü—É—Ç—å: " .. anim.path)
            print("    - ID: " .. anim.id)
        end
    else
        print("‚ùå Animation –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Animation –æ–±—ä–µ–∫—Ç—ã –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Ç—Ä–µ–∫–∞–º...")
        
        -- –ü–û–ò–°–ö –ü–û –ê–ö–¢–ò–í–ù–´–ú –¢–†–ï–ö–ê–ú
        if animController then
            local controllerAnimator = animController:FindFirstChildOfClass("Animator")
            if controllerAnimator then
                local tracks = controllerAnimator:GetPlayingAnimationTracks()
                for i, track in ipairs(tracks) do
                    if track.Animation then
                        table.insert(animations, {
                            object = track.Animation,
                            path = "ActiveTrack." .. track.Animation.Name,
                            id = track.Animation.AnimationId,
                            name = track.Animation.Name
                        })
                        print("  ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫: " .. track.Animation.AnimationId)
                    end
                end
            end
        end
    end
    
    -- 5. SCRIPTS –ò AI
    print("\nü§ñ === –ü–û–ò–°–ö AI –°–ö–†–ò–ü–¢–û–í ===")
    local scripts = {}
    
    local function findScripts(parent, depth)
        depth = depth or 0
        if depth > 5 then return end
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Script") or child:IsA("LocalScript") or child:IsA("ModuleScript") then
                table.insert(scripts, {
                    object = child,
                    type = child.ClassName,
                    path = parent.Name .. "." .. child.Name
                })
            end
            findScripts(child, depth + 1)
        end
    end
    
    findScripts(model)
    
    if #scripts > 0 then
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤:", #scripts)
        for i, script in ipairs(scripts) do
            print("  - " .. i .. ". " .. script.path .. " (" .. script.type .. ")")
        end
    else
        print("‚ùå –°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    end
    
    return {
        humanoid = humanoid,
        animator = animator,
        animController = animController,
        animations = animations,
        scripts = scripts
    }
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local pet = findPet()
    
    if not pet then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–¥–∏—É—Å–µ 100 –±–ª–æ–∫–æ–≤")
        return
    end
    
    print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω:", pet.Name)
    
    local components = analyzeAnimationComponents(pet)
    
    -- –í–´–í–û–î –ó–ê–ö–õ–Æ–ß–ï–ù–ò–Ø
    print("\nüéØ === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===")
    
    if components.humanoid and components.animator then
        print("‚úÖ –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –í–û–ó–ú–û–ñ–ù–û!")
        print("  - Humanoid: ‚úÖ")
        print("  - Animator: ‚úÖ")
        print("  - –ê–Ω–∏–º–∞—Ü–∏–∏: " .. (#components.animations > 0 and "‚úÖ" or "‚ùå"))
        print("  - AI –°–∫—Ä–∏–ø—Ç—ã: " .. (#components.scripts > 0 and "‚úÖ" or "‚ùå"))
        
        print("\nüí° –ü–õ–ê–ù –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø:")
        print("1. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Humanoid —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Animator")
        if #components.animations > 0 then
            print("3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ " .. #components.animations .. " Animation –æ–±—ä–µ–∫—Ç–æ–≤")
        end
        if #components.scripts > 0 then
            print("4. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å " .. #components.scripts .. " AI —Å–∫—Ä–∏–ø—Ç–æ–≤")
        end
        print("5. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏")
        print("6. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é –∞–Ω–∏–º–∞—Ü–∏—é")
        
    else
        print("‚ùå –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –ù–ï–í–û–ó–ú–û–ñ–ù–û")
        print("  - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    end
end

-- –ó–∞–ø—É—Å–∫
main()
