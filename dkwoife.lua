-- üî• ULTIMATE EGG REPLICATION SYSTEM v1.0
-- –ü–æ–ª–Ω–∞—è 1:1 —Ä–µ–ø–ª–∏–∫–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —è–∏—Ü Roblox —Å –≤—ã—Å–æ—á–∞–π—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–∞
-- –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ULTIMATE EGG REPLICATION DIAGNOSTIC v3.0

--[[
    –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –°–ò–°–¢–ï–ú–´:
    1. EggStructureBuilder - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —è–π—Ü–∞ (56 —á–∞—Å—Ç–µ–π)
    2. InteractionSystem - ProximityPrompt –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    3. NetworkManager - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RemoteEvents (BuyPetEgg_RE, EggReadyToHatch_RE, etc.)
    4. EffectsSystem - —Å–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (EggExplode, –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–≤—É–∫–∏)
    5. PetSpawnSystem - —Å–ø–∞–≤–Ω –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Workspace.Visuals
    6. AnimationController - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —Ç–≤–∏–Ω–∞–º–∏
    7. SoundManager - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∞–π–º–∏–Ω–≥–æ–º
    8. QualityAssurance - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
]]

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local SoundService = game:GetService("SoundService")
local RunService = game:GetService("RunService")
local Debris = game:GetService("Debris")
local Lighting = game:GetService("Lighting")

local player = Players.LocalPlayer

print("üî• === ULTIMATE EGG REPLICATION SYSTEM v1.0 ===")
print("‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞...")
print("üìä –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ULTIMATE v3.0")

-- ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ =====
local CONFIG = {
    -- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    EGG_NAME = "ReplicatedEgg",
    EGG_POSITION = Vector3.new(0, 10, 0), -- –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    
    -- –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Common Egg (–ø—Ä–æ—Å—Ç–æ–µ –±–µ–ª–æ–µ —è–π—Ü–æ)
    STRUCTURE = {
        TOTAL_PARTS = 1, -- –ü—Ä–æ—Å—Ç–æ–µ —è–π—Ü–æ - –æ–¥–Ω–∞ —á–∞—Å—Ç—å
        BASE_SIZE = Vector3.new(3, 4, 3), -- –†–∞–∑–º–µ—Ä –∫–∞–∫ —É Common Egg
        SHELL_THICKNESS = 0,
        MATERIAL = Enum.Material.SmoothPlastic, -- –û–±—ã—á–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫
        BASE_COLOR = Color3.fromRGB(255, 255, 255), -- –ë–µ–ª—ã–π —Ü–≤–µ—Ç –∫–∞–∫ —É Common Egg
        TRANSPARENCY = 0
    },
    
    -- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Common Egg (–Ω—É–∂–Ω–æ –∑–∞–∂–∏–º–∞—Ç—å Hatch!)
    INTERACTION = {
        ACTION_TEXT = "Hatch!",
        OBJECT_TEXT = "Common Egg",
        KEYBOARD_KEY = Enum.KeyCode.E,
        HOLD_DURATION = 1.5, -- –ù—É–∂–Ω–æ –∑–∞–∂–∏–º–∞—Ç—å 1.5 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
        MAX_DISTANCE = 8,
        REQUIRES_LINE_OF_SIGHT = true
    },
    
    -- –°–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    NETWORK = {
        REMOTES = {
            BUY_PET_EGG = "BuyPetEgg_RE",
            EGG_READY_TO_HATCH = "EggReadyToHatch_RE",
            PET_EGG_SERVICE = "PetEggService",
            ACTIVE_PET_SERVICE = "ActivePetService",
            PETS_SERVICE = "PetsService",
            REFRESH_PET_MODEL = "RefreshPetModel",
            PET_SKIPPED = "PetSkipped"
        }
    },
    
    -- –≠—Ñ—Ñ–µ–∫—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: EggExplode –≤ 18:05:32)
    EFFECTS = {
        EXPLOSION = {
            NAME = "EggExplode",
            DURATION = 1.5,
            PARTICLE_COUNT = 50,
            BLAST_RADIUS = 15,
            SHAKE_INTENSITY = 2
        },
        HATCH_ANIMATION = {
            CRACK_DURATION = 1.0,
            SHAKE_DURATION = 0.5,
            EXPLOSION_DELAY = 1.2,
            TOTAL_DURATION = 3.0
        }
    },
    
    -- –°–∏—Å—Ç–µ–º–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: Starfish –∑–∞—Å–ø–∞–≤–Ω–∏–ª—Å—è)
    PETS = {
        SPAWN_DELAY = 1.0, -- –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
        SPAWN_HEIGHT = 5,
        SPAWN_RADIUS = 3,
        AVAILABLE_PETS = {
            -- Common Summer Egg pets (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
            "starfish", "seagull", "crab"
        },
        CHANCES = {
            starfish = 0.6,  -- 60%
            seagull = 0.3,   -- 30%
            crab = 0.1       -- 10%
        }
    },
    
    -- –ó–≤—É–∫–∏
    SOUNDS = {
        HATCH_START = "rbxasset://sounds/electronicpingshort.wav",
        CRACK_SOUND = "rbxasset://sounds/impact_generic.mp3",
        EXPLOSION = "rbxasset://sounds/electronicpingshort.wav",
        PET_SPAWN = "rbxasset://sounds/bell.mp3"
    },
    
    -- –ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    QUALITY = {
        ENABLE_VALIDATION = true,
        LOG_LEVEL = "DEBUG", -- DEBUG, INFO, WARN, ERROR
        PERFORMANCE_MONITORING = true,
        ERROR_RECOVERY = true
    }
}

-- ===== –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
local Logger = {}
Logger.__index = Logger

function Logger.new()
    local self = setmetatable({}, Logger)
    self.logLevel = CONFIG.QUALITY.LOG_LEVEL
    self.levels = {
        DEBUG = 1,
        INFO = 2,
        WARN = 3,
        ERROR = 4
    }
    return self
end

function Logger:log(level, message, ...)
    if self.levels[level] >= self.levels[self.logLevel] then
        local timestamp = os.date("%H:%M:%S")
        local prefix = ({
            DEBUG = "üîç",
            INFO = "‚ÑπÔ∏è",
            WARN = "‚ö†Ô∏è",
            ERROR = "‚ùå"
        })[level]
        
        print(string.format("%s %s [%s] %s", timestamp, prefix, level, string.format(message, ...)))
    end
end

function Logger:debug(message, ...) self:log("DEBUG", message, ...) end
function Logger:info(message, ...) self:log("INFO", message, ...) end
function Logger:warn(message, ...) self:log("WARN", message, ...) end
function Logger:error(message, ...) self:log("ERROR", message, ...) end

local logger = Logger.new()

-- ===== –°–ò–°–¢–ï–ú–ê –í–ê–õ–ò–î–ê–¶–ò–ò =====
local Validator = {}
Validator.__index = Validator

function Validator.new()
    local self = setmetatable({}, Validator)
    return self
end

function Validator:validateConfig()
    logger:info("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    assert(CONFIG.EGG_NAME and type(CONFIG.EGG_NAME) == "string", "EGG_NAME –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    assert(CONFIG.STRUCTURE.TOTAL_PARTS > 0, "TOTAL_PARTS –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    assert(CONFIG.INTERACTION.ACTION_TEXT, "ACTION_TEXT –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤
    local totalChance = 0
    for _, chance in pairs(CONFIG.PETS.CHANCES) do
        totalChance = totalChance + chance
    end
    
    if math.abs(totalChance - 1.0) > 0.001 then
        logger:warn("–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 1.0: %.3f", totalChance)
    end
    
    logger:info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    return true
end

function Validator:validateServices()
    logger:info("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ Roblox...")
    
    local requiredServices = {
        Players, Workspace, ReplicatedStorage, TweenService, 
        SoundService, RunService, Debris, Lighting
    }
    
    for i, service in ipairs(requiredServices) do
        assert(service, string.format("–°–µ—Ä–≤–∏—Å %d –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω", i))
    end
    
    logger:info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    return true
end

function Validator:validateRemoteEvents()
    logger:info("–í–∞–ª–∏–¥–∞—Ü–∏—è RemoteEvents...")
    
    local foundRemotes = {}
    local missingRemotes = {}
    
    for name, remoteName in pairs(CONFIG.NETWORK.REMOTES) do
        local remote = ReplicatedStorage:FindFirstChild(remoteName, true)
        if remote then
            foundRemotes[name] = remote
            logger:debug("‚úÖ –ù–∞–π–¥–µ–Ω RemoteEvent: %s", remoteName)
        else
            table.insert(missingRemotes, remoteName)
            logger:warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω RemoteEvent: %s", remoteName)
        end
    end
    
    if #missingRemotes > 0 then
        logger:warn("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç RemoteEvents: %s", table.concat(missingRemotes, ", "))
        logger:warn("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    end
    
    return foundRemotes, missingRemotes
end

local validator = Validator.new()

-- ===== –ú–ï–ù–ï–î–ñ–ï–† –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====
local PerformanceManager = {}
PerformanceManager.__index = PerformanceManager

function PerformanceManager.new()
    local self = setmetatable({}, PerformanceManager)
    self.metrics = {
        frameTime = {},
        memoryUsage = {},
        activeObjects = 0,
        totalOperations = 0
    }
    self.isMonitoring = CONFIG.QUALITY.PERFORMANCE_MONITORING
    return self
end

function PerformanceManager:startMonitoring()
    if not self.isMonitoring then return end
    
    logger:info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    self.connection = RunService.Heartbeat:Connect(function(deltaTime)
        -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
        table.insert(self.metrics.frameTime, deltaTime)
        if #self.metrics.frameTime > 60 then -- –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –∫–∞–¥—Ä–æ–≤
            table.remove(self.metrics.frameTime, 1)
        end
        
        -- –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if tick() % 5 < deltaTime then
            self:logPerformanceStats()
        end
    end)
end

function PerformanceManager:logPerformanceStats()
    if #self.metrics.frameTime == 0 then return end
    
    local avgFrameTime = 0
    for _, time in ipairs(self.metrics.frameTime) do
        avgFrameTime = avgFrameTime + time
    end
    avgFrameTime = avgFrameTime / #self.metrics.frameTime
    
    local fps = 1 / avgFrameTime
    
    logger:debug("üìä FPS: %.1f | –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: %d | –û–ø–µ—Ä–∞—Ü–∏–π: %d", 
                fps, self.metrics.activeObjects, self.metrics.totalOperations)
end

function PerformanceManager:incrementObjects(count)
    self.metrics.activeObjects = self.metrics.activeObjects + (count or 1)
end

function PerformanceManager:decrementObjects(count)
    self.metrics.activeObjects = math.max(0, self.metrics.activeObjects - (count or 1))
end

function PerformanceManager:incrementOperations()
    self.metrics.totalOperations = self.metrics.totalOperations + 1
end

function PerformanceManager:cleanup()
    if self.connection then
        self.connection:Disconnect()
        self.connection = nil
    end
    logger:info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

local performanceManager = PerformanceManager.new()

-- ===== –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö =====
local ErrorHandler = {}
ErrorHandler.__index = ErrorHandler

function ErrorHandler.new()
    local self = setmetatable({}, ErrorHandler)
    self.errorCount = 0
    self.maxErrors = 10
    self.recoveryEnabled = CONFIG.QUALITY.ERROR_RECOVERY
    return self
end

function ErrorHandler:handleError(operation, error, context)
    self.errorCount = self.errorCount + 1
    
    logger:error("–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ '%s': %s", operation, tostring(error))
    if context then
        logger:error("–ö–æ–Ω—Ç–µ–∫—Å—Ç: %s", tostring(context))
    end
    
    if self.errorCount >= self.maxErrors then
        logger:error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (%d). –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", self.maxErrors)
        return false
    end
    
    if self.recoveryEnabled then
        logger:info("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
        return self:attemptRecovery(operation, context)
    end
    
    return false
end

function ErrorHandler:attemptRecovery(operation, context)
    -- –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    logger:info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏: %s", operation)
    
    -- –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if context and context.cleanup then
        pcall(context.cleanup)
    end
    
    -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    wait(0.1)
    
    return true
end

local errorHandler = ErrorHandler.new()

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
local validator = Validator.new()
local performanceManager = PerformanceManager.new()

-- ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ =====
logger:info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ultimate Egg Replication System...")

-- –í–∞–ª–∏–¥–∞—Ü–∏—è
if CONFIG.QUALITY.ENABLE_VALIDATION then
    validator:validateConfig()
    validator:validateServices()
    local foundRemotes, missingRemotes = validator:validateRemoteEvents()
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ RemoteEvents –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    _G.EggSystemRemotes = foundRemotes
end

-- –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performanceManager:startMonitoring()

logger:info("‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
logger:info("üìù –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —è–π—Ü–∞...")

-- –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Å—Ç–µ–π
_G.EggSystemCore = {
    CONFIG = CONFIG,
    Logger = logger,
    Validator = validator,
    PerformanceManager = performanceManager,
    ErrorHandler = errorHandler
}

print("üì¶ –ß–∞—Å—Ç—å 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
print("üîÑ –°–æ–∑–¥–∞—é EggStructureBuilder...")

-- ===== –ß–ê–°–¢–¨ 2: EGG STRUCTURE BUILDER =====
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —è–π—Ü–∞ (56 —á–∞—Å—Ç–µ–π –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)

local EggStructureBuilder = {}
EggStructureBuilder.__index = EggStructureBuilder

function EggStructureBuilder.new()
    local self = setmetatable({}, EggStructureBuilder)
    self.eggModel = nil
    self.parts = {}
    self.attachments = {}
    self.welds = {}
    self.isBuilt = false
    return self
end

function EggStructureBuilder:createBasePart(name, size, position, properties)
    local part = Instance.new("Part")
    part.Name = name
    part.Size = size
    part.Position = position
    part.Material = properties.material or CONFIG.STRUCTURE.MATERIAL
    part.Color = properties.color or CONFIG.STRUCTURE.BASE_COLOR
    part.Transparency = properties.transparency or CONFIG.STRUCTURE.TRANSPARENCY
    part.CanCollide = properties.canCollide or false
    part.Anchored = properties.anchored or true
    part.Shape = properties.shape or Enum.PartType.Block
    
    -- –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —è–π—Ü–∞
    if properties.specialMesh then
        local mesh = Instance.new("SpecialMesh")
        mesh.MeshType = properties.specialMesh.meshType or Enum.MeshType.Sphere
        mesh.Scale = properties.specialMesh.scale or Vector3.new(1, 1, 1)
        mesh.Parent = part
    end
    
    performanceManager:incrementObjects()
    logger:debug("–°–æ–∑–¥–∞–Ω–∞ —á–∞—Å—Ç—å: %s (—Ä–∞–∑–º–µ—Ä: %s)", name, tostring(size))
    
    return part
end

function EggStructureBuilder:buildEggShell(centerPosition)
    logger:info("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–æ–ª–æ—á–∫–∏ —è–π—Ü–∞...")
    
    local shellParts = {}
    local baseSize = CONFIG.STRUCTURE.BASE_SIZE
    
    -- –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ —è–π—Ü–∞ (—Å—Ñ–µ—Ä–∞)
    local mainBody = self:createBasePart("EggBody", baseSize, centerPosition, {
        material = Enum.Material.ForceField,
        color = Color3.fromRGB(255, 215, 0), -- –ó–æ–ª–æ—Ç–æ–π
        transparency = 0.2,
        specialMesh = {
            meshType = Enum.MeshType.Sphere,
            scale = Vector3.new(1, 1.2, 1) -- –î–µ–ª–∞–µ–º –±–æ–ª–µ–µ —è–π—Ü–µ–≤–∏–¥–Ω—ã–º
        }
    })
    table.insert(shellParts, mainBody)
    
    -- –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –æ–±–æ–ª–æ—á–∫–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º 56 —á–∞—Å—Ç–µ–π –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    local segmentCount = 8 -- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    local ringCount = 7    -- –ö–æ–ª—å—Ü–∞ –ø–æ –≤—ã—Å–æ—Ç–µ
    
    for ring = 1, ringCount do
        local ringHeight = (ring - 4) * (baseSize.Y / ringCount) -- –û—Ç -3 –¥–æ +3
        local ringRadius = baseSize.X * (1 - math.abs(ringHeight) / (baseSize.Y * 0.6))
        
        for segment = 1, segmentCount do
            local angle = (segment - 1) * (2 * math.pi / segmentCount)
            local segmentPos = centerPosition + Vector3.new(
                math.cos(angle) * ringRadius * 0.4,
                ringHeight,
                math.sin(angle) * ringRadius * 0.4
            )
            
            local segmentSize = Vector3.new(0.8, 0.6, 0.8)
            local segmentPart = self:createBasePart(
                string.format("EggSegment_R%d_S%d", ring, segment),
                segmentSize,
                segmentPos,
                {
                    material = Enum.Material.Neon,
                    color = Color3.fromHSV((ring * 0.1 + segment * 0.05) % 1, 0.3, 1),
                    transparency = 0.3,
                    specialMesh = {
                        meshType = Enum.MeshType.Brick,
                        scale = Vector3.new(0.9, 0.9, 0.9)
                    }
                }
            )
            table.insert(shellParts, segmentPart)
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for i = 1, 8 do
        local angle = (i - 1) * (2 * math.pi / 8)
        local decorPos = centerPosition + Vector3.new(
            math.cos(angle) * baseSize.X * 0.6,
            baseSize.Y * 0.3,
            math.sin(angle) * baseSize.Z * 0.6
        )
        
        local decorPart = self:createBasePart(
            "EggDecor_" .. i,
            Vector3.new(0.4, 0.4, 0.4),
            decorPos,
            {
                material = Enum.Material.Glass,
                color = Color3.fromRGB(255, 255, 255),
                transparency = 0.5,
                specialMesh = {
                    meshType = Enum.MeshType.Sphere,
                    scale = Vector3.new(1.2, 1.2, 1.2)
                }
            }
        )
        table.insert(shellParts, decorPart)
    end
    
    logger:info("‚úÖ –°–æ–∑–¥–∞–Ω–æ %d —á–∞—Å—Ç–µ–π –æ–±–æ–ª–æ—á–∫–∏ —è–π—Ü–∞", #shellParts)
    return shellParts
end

function EggStructureBuilder:createEggEffects(centerPosition)
    logger:info("–°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —è–π—Ü–∞...")
    
    local effects = {}
    
    -- –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–≤–µ—Ç–∞
    local lightPart = self:createBasePart("EggLight", Vector3.new(0.1, 0.1, 0.1), centerPosition, {
        material = Enum.Material.Neon,
        color = Color3.fromRGB(255, 255, 0),
        transparency = 1,
        canCollide = false
    })
    
    local pointLight = Instance.new("PointLight")
    pointLight.Brightness = 2
    pointLight.Range = 20
    pointLight.Color = Color3.fromRGB(255, 215, 0)
    pointLight.Parent = lightPart
function EggStructureBuilder:assembleEggModel(position)
    logger:info("–°–æ–∑–¥–∞–Ω–∏–µ Common Egg –≤ –ø–æ–∑–∏—Ü–∏–∏: %s", tostring(position))
    
    local eggModel = Instance.new("Model")
    eggModel.Name = "Common Egg"
    eggModel.Parent = Workspace
    
    -- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –±–µ–ª–æ–µ —è–π—Ü–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    local eggPart = Instance.new("Part")
    eggPart.Name = "EggBody"
    eggPart.Size = CONFIG.STRUCTURE.BASE_SIZE
    eggPart.Position = position
    eggPart.Material = CONFIG.STRUCTURE.MATERIAL
    eggPart.Color = CONFIG.STRUCTURE.BASE_COLOR
    eggPart.Transparency = CONFIG.STRUCTURE.TRANSPARENCY
    eggPart.Shape = Enum.PartType.Ball -- –§–æ—Ä–º–∞ —è–π—Ü–∞
    eggPart.CanCollide = false
    eggPart.Anchored = true
    eggPart.Parent = eggModel
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PrimaryPart
    eggModel.PrimaryPart = eggPart
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π
    table.insert(self.parts, eggPart)
    
    self.eggModel = eggModel
    self.isBuilt = true
    
    logger:info("‚úÖ Common Egg —Å–æ–∑–¥–∞–Ω–æ: –ø—Ä–æ—Å—Ç–æ–µ –±–µ–ª–æ–µ —è–π—Ü–æ")
    return eggModel
end

function EggStructureBuilder:addInteractivity(eggModel)
    logger:info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —è–π—Ü—É...")
    
    if not eggModel.PrimaryPart then
        logger:error("–ù–µ –Ω–∞–π–¥–µ–Ω PrimaryPart –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º ProximityPrompt (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: "Hatch!")
    local proximityPrompt = Instance.new("ProximityPrompt")
    proximityPrompt.Name = "HatchPrompt"
    proximityPrompt.ActionText = CONFIG.INTERACTION.ACTION_TEXT
    proximityPrompt.ObjectText = CONFIG.INTERACTION.OBJECT_TEXT
    proximityPrompt.KeyboardKeyCode = CONFIG.INTERACTION.KEYBOARD_KEY
    proximityPrompt.HoldDuration = CONFIG.INTERACTION.HOLD_DURATION
    proximityPrompt.MaxActivationDistance = CONFIG.INTERACTION.MAX_DISTANCE
    proximityPrompt.RequiresLineOfSight = CONFIG.INTERACTION.REQUIRES_LINE_OF_SIGHT
    proximityPrompt.Style = Enum.ProximityPromptStyle.Default
    proximityPrompt.Enabled = true
    proximityPrompt.Parent = eggModel.PrimaryPart
    
    -- –°–æ–∑–¥–∞–µ–º GUI –∫–∞–∫ —É Common Egg
    local eggGui = Instance.new("BillboardGui")
    eggGui.Name = "CommonEggGui"
    eggGui.Size = UDim2.new(0, 200, 0, 80)
    eggGui.StudsOffset = Vector3.new(0, CONFIG.STRUCTURE.BASE_SIZE.Y/2 + 1, 0)
    eggGui.Parent = eggModel.PrimaryPart
    
    -- –¢–µ–∫—Å—Ç "Common Egg"
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0.5, 0)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Common Egg"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextStrokeTransparency = 0
    titleLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    titleLabel.Parent = eggGui
    
    -- –¢–µ–∫—Å—Ç "Ready"
    local readyLabel = Instance.new("TextLabel")
    readyLabel.Size = UDim2.new(1, 0, 0.5, 0)
    readyLabel.Position = UDim2.new(0, 0, 0.5, 0)
    readyLabel.BackgroundTransparency = 1
    readyLabel.Text = "Ready"
    readyLabel.TextColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω—ã–π –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    readyLabel.TextScaled = true
    readyLabel.Font = Enum.Font.SourceSans
    readyLabel.TextStrokeTransparency = 0
    readyLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    readyLabel.Parent = eggGui
    
    logger:info("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: ProximityPrompt + GUI")
    return proximityPrompt
end

function EggStructureBuilder:cleanup()
    logger:info("–û—á–∏—Å—Ç–∫–∞ EggStructureBuilder...")
    
    if self.eggModel then
        self.eggModel:Destroy()
        performanceManager:decrementObjects(#self.parts)
    end
    
    self.parts = {}
    self.attachments = {}
    self.welds = {}
    self.isBuilt = false
    
    logger:info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
end

print("üì¶ –ß–∞—Å—Ç—å 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: EggStructureBuilder —Å–æ–∑–¥–∞–Ω")
print("üîÑ –°–æ–∑–¥–∞—é InteractionSystem –∏ NetworkManager...")

-- ===== –ß–ê–°–¢–¨ 3: INTERACTION SYSTEM & NETWORK MANAGER =====
-- –°–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–µ—Ç–µ–≤–æ–π –ª–æ–≥–∏–∫–∏

local InteractionSystem = {}
InteractionSystem.__index = InteractionSystem

function InteractionSystem.new()
    local self = setmetatable({}, InteractionSystem)
    self.activePrompts = {}
    self.connections = {}
    self.isActive = false
    return self
end

function InteractionSystem:registerProximityPrompt(proximityPrompt, eggModel, callbacks)
    logger:info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ProximityPrompt –¥–ª—è —è–π—Ü–∞: %s", eggModel.Name)
    
    if not proximityPrompt or not eggModel then
        logger:error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ProximityPrompt")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    local triggeredConnection = proximityPrompt.Triggered:Connect(function(playerWhoTriggered)
        logger:info("üéØ –ò–≥—Ä–æ–∫ %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —è–π—Ü–æ %s", playerWhoTriggered.Name, eggModel.Name)
        
        if callbacks and callbacks.onTriggered then
            local success, result = pcall(callbacks.onTriggered, playerWhoTriggered, eggModel)
            if not success then
                errorHandler:handleError("ProximityPrompt.Triggered", result, {
                    player = playerWhoTriggered.Name,
                    egg = eggModel.Name
                })
            end
        end
        
        performanceManager:incrementOperations()
    end)
    
    local promptShownConnection = proximityPrompt.PromptShown:Connect(function(playerWhoSees)
        logger:debug("üëÅÔ∏è –ò–≥—Ä–æ–∫ %s –≤–∏–¥–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è %s", playerWhoSees.Name, eggModel.Name)
        
        if callbacks and callbacks.onPromptShown then
            pcall(callbacks.onPromptShown, playerWhoSees, eggModel)
        end
    end)
    
    local promptHiddenConnection = proximityPrompt.PromptHidden:Connect(function(playerWhoHides)
        logger:debug("üôà –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–∫—Ä—ã—Ç–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s", playerWhoHides.Name)
        
        if callbacks and callbacks.onPromptHidden then
            pcall(callbacks.onPromptHidden, playerWhoHides, eggModel)
        end
    end)
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    local promptData = {
        prompt = proximityPrompt,
        eggModel = eggModel,
        connections = {triggeredConnection, promptShownConnection, promptHiddenConnection},
        callbacks = callbacks
    }
    
    table.insert(self.activePrompts, promptData)
    logger:info("‚úÖ ProximityPrompt –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    return true
end

function InteractionSystem:createHatchingEffects(eggModel)
    logger:info("–°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è –¥–ª—è %s", eggModel.Name)
    
    if not eggModel.PrimaryPart then
        logger:error("–ù–µ –Ω–∞–π–¥–µ–Ω PrimaryPart –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
        return false
    end
    
    local centerPosition = eggModel.PrimaryPart.Position
    
    -- –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ —è–π—Ü–∞
    local shakeAnimation = TweenService:Create(eggModel.PrimaryPart, 
        TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.InOut, 5, true), 
        {Position = centerPosition + Vector3.new(math.random(-1, 1) * 0.5, 0, math.random(-1, 1) * 0.5)}
    )
    
    -- –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
    local glowEffect = Instance.new("PointLight")
    glowEffect.Name = "HatchGlow"
    glowEffect.Brightness = 5
    glowEffect.Range = 25
    glowEffect.Color = Color3.fromRGB(255, 255, 0)
    glowEffect.Parent = eggModel.PrimaryPart
    
    local glowAnimation = TweenService:Create(glowEffect,
        TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
        {Brightness = 10}
    )
    
    -- –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    local crackSound = Instance.new("Sound")
    crackSound.Name = "CrackSound"
    crackSound.SoundId = CONFIG.SOUNDS.CRACK_SOUND
    crackSound.Volume = 0.7
    crackSound.Pitch = 1.2
    crackSound.Parent = eggModel.PrimaryPart
    
    return {
        shakeAnimation = shakeAnimation,
        glowEffect = glowEffect,
        glowAnimation = glowAnimation,
        crackSound = crackSound
    }
end

function InteractionSystem:cleanup()
    logger:info("–û—á–∏—Å—Ç–∫–∞ InteractionSystem...")
    
    for _, promptData in ipairs(self.activePrompts) do
        for _, connection in ipairs(promptData.connections) do
            pcall(function() connection:Disconnect() end)
        end
    end
    
    self.activePrompts = {}
    self.isActive = false
    
    logger:info("‚úÖ InteractionSystem –æ—á–∏—â–µ–Ω")
end

-- ===== NETWORK MANAGER =====
local NetworkManager = {}
NetworkManager.__index = NetworkManager

function NetworkManager.new()
    local self = setmetatable({}, NetworkManager)
    self.remoteEvents = {}
    self.remoteFunctions = {}
    self.connections = {}
    self.isConnected = false
    return self
end

function NetworkManager:initialize()
    logger:info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NetworkManager...")
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ RemoteEvents –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    local foundRemotes = 0
    
    for remoteName, remoteId in pairs(CONFIG.NETWORK.REMOTES) do
        local remote = ReplicatedStorage:FindFirstChild(remoteId, true)
        if remote then
            if remote:IsA("RemoteEvent") then
                self.remoteEvents[remoteName] = remote
                logger:debug("‚úÖ –ù–∞–π–¥–µ–Ω RemoteEvent: %s -> %s", remoteName, remoteId)
            elseif remote:IsA("RemoteFunction") then
                self.remoteFunctions[remoteName] = remote
                logger:debug("‚úÖ –ù–∞–π–¥–µ–Ω RemoteFunction: %s -> %s", remoteName, remoteId)
            end
            foundRemotes = foundRemotes + 1
        else
            logger:warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω Remote: %s (%s)", remoteName, remoteId)
        end
    end
    
    if foundRemotes > 0 then
        self.isConnected = true
        logger:info("‚úÖ NetworkManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: %d/%d remotes –Ω–∞–π–¥–µ–Ω–æ", foundRemotes, #CONFIG.NETWORK.REMOTES)
    else
        logger:warn("‚ö†Ô∏è NetworkManager —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    end
    
    return self.isConnected
end

function NetworkManager:connectToEggService()
    logger:info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å–∞–º —è–∏—Ü...")
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º —è–∏—Ü
    if self.remoteEvents.BUY_PET_EGG then
        local connection = self.remoteEvents.BUY_PET_EGG.OnClientEvent:Connect(function(...)
            logger:info("üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ BuyPetEgg: %s", table.concat({...}, ", "))
            self:handleEggPurchase(...)
        end)
        table.insert(self.connections, connection)
    end
    
    if self.remoteEvents.EGG_READY_TO_HATCH then
        local connection = self.remoteEvents.EGG_READY_TO_HATCH.OnClientEvent:Connect(function(...)
            logger:info("üì° –Ø–π—Ü–æ –≥–æ—Ç–æ–≤–æ –∫ –≤—ã–ª—É–ø–ª–µ–Ω–∏—é: %s", table.concat({...}, ", "))
            self:handleEggReady(...)
        end)
        table.insert(self.connections, connection)
    end
    
    if self.remoteEvents.REFRESH_PET_MODEL then
        local connection = self.remoteEvents.REFRESH_PET_MODEL.OnClientEvent:Connect(function(...)
            logger:info("üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: %s", table.concat({...}, ", "))
            self:handlePetModelRefresh(...)
        end)
        table.insert(self.connections, connection)
    end
    
    logger:info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ %d —Å–µ—Ä–≤–∏—Å–∞–º —è–∏—Ü", #self.connections)
end

function NetworkManager:requestEggHatch(eggId, playerData)
    logger:info("–ó–∞–ø—Ä–æ—Å –≤—ã–ª—É–ø–ª–µ–Ω–∏—è —è–π—Ü–∞: %s", tostring(eggId))
    
    if not self.isConnected then
        logger:warn("NetworkManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∏–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ª—É–ø–ª–µ–Ω–∏–µ")
        return self:simulateLocalHatch(eggId, playerData)
    end
    
    -- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ BuyPetEgg_RE
    if self.remoteEvents.BUY_PET_EGG then
        local success, result = pcall(function()
            self.remoteEvents.BUY_PET_EGG:FireServer(eggId, playerData)
        end)
        
        if success then
            logger:info("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            performanceManager:incrementOperations()
            return true
        else
            logger:error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %s", tostring(result))
            return false
        end
    end
    
    return false
end

function NetworkManager:simulateLocalHatch(eggId, playerData)
    logger:info("–°–∏–º—É–ª—è—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è —è–π—Ü–∞")
    
    -- –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞
    local availablePets = CONFIG.PETS.AVAILABLE_PETS
    local chances = CONFIG.PETS.CHANCES
    
    -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
    local random = math.random()
    local cumulativeChance = 0
    local selectedPet = availablePets[1] -- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –ø–∏—Ç–æ–º–µ—Ü
    
    for _, petName in ipairs(availablePets) do
        cumulativeChance = cumulativeChance + (chances[petName] or 0)
        if random <= cumulativeChance then
            selectedPet = petName
            break
        end
    end
    
    logger:info("üé≤ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü: %s (—à–∞–Ω—Å: %.1f%%)", selectedPet, (chances[selectedPet] or 0) * 100)
    
    -- –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    spawn(function()
        wait(0.5)
        self:handleEggHatchResult(eggId, selectedPet, playerData)
    end)
    
    return true
end

function NetworkManager:handleEggPurchase(...)
    local args = {...}
    logger:info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ —è–π—Ü–∞: %s", table.concat(args, ", "))
    
    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
    performanceManager:incrementOperations()
end

function NetworkManager:handleEggReady(...)
    local args = {...}
    logger:info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —è–π—Ü–∞: %s", table.concat(args, ", "))
    
    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≤—ã–ª—É–ø–ª–µ–Ω–∏—é
    performanceManager:incrementOperations()
end

function NetworkManager:handlePetModelRefresh(...)
    local args = {...}
    logger:info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞: %s", table.concat(args, ", "))
    
    -- –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∞ –ø–∏—Ç–æ–º—Ü–∞
    performanceManager:incrementOperations()
end

function NetworkManager:handleEggHatchResult(eggId, petName, playerData)
    logger:info("üêæ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ª—É–ø–ª–µ–Ω–∏—è: %s -> %s", tostring(eggId), petName)
    
    -- –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è
    if _G.EggSystemCallbacks and _G.EggSystemCallbacks.onPetHatched then
        _G.EggSystemCallbacks.onPetHatched(eggId, petName, playerData)
    end
    
    performanceManager:incrementOperations()
end

function NetworkManager:cleanup()
    logger:info("–û—á–∏—Å—Ç–∫–∞ NetworkManager...")
    
    for _, connection in ipairs(self.connections) do
        pcall(function() connection:Disconnect() end)
    end
    
    self.connections = {}
    self.remoteEvents = {}
    self.remoteFunctions = {}
    self.isConnected = false
    
    logger:info("‚úÖ NetworkManager –æ—á–∏—â–µ–Ω")
end

print("üì¶ –ß–∞—Å—Ç—å 3 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: InteractionSystem –∏ NetworkManager —Å–æ–∑–¥–∞–Ω—ã")
print("üîÑ –°–æ–∑–¥–∞—é EffectsSystem –∏ PetSpawnSystem...")

-- ===== –ß–ê–°–¢–¨ 4: EFFECTS SYSTEM & PET SPAWN SYSTEM =====
-- –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤–∑—Ä—ã–≤–∞ –∏ —Å–ø–∞–≤–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: EggExplode –≤ 18:05:32)

local EffectsSystem = {}
EffectsSystem.__index = EffectsSystem

function EffectsSystem.new()
    local self = setmetatable({}, EffectsSystem)
    self.activeEffects = {}
    self.soundCache = {}
    self.particleCache = {}
    return self
end

function EffectsSystem:preloadSounds()
    logger:info("–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤...")
    
    for soundName, soundId in pairs(CONFIG.SOUNDS) do
        local sound = Instance.new("Sound")
        sound.Name = soundName
        sound.SoundId = soundId
        sound.Volume = 0.8
        sound.Parent = SoundService
        
        -- Roblox –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–≤—É–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ SoundId
        -- –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        wait(0.1)
        self.soundCache[soundName] = sound
        
        logger:debug("üîä –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω –∑–≤—É–∫: %s", soundName)
    end
    
    local soundCount = 0
    for _ in pairs(self.soundCache) do soundCount = soundCount + 1 end
    logger:info("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ %d –∑–≤—É–∫–æ–≤", soundCount)
end

function EffectsSystem:playSound(soundName, position)
    logger:debug("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞: %s", soundName)
    
    local sound = self.soundCache[soundName]
    if not sound then
        logger:warn("–ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ: %s", soundName)
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–≤—É–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    local soundClone = sound:Clone()
    soundClone.Parent = Workspace
    
    -- –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è, —Å–æ–∑–¥–∞–µ–º Part –¥–ª—è 3D –∑–≤—É–∫–∞
    if position then
        local soundPart = Instance.new("Part")
        soundPart.Name = "SoundPart"
        soundPart.Size = Vector3.new(0.1, 0.1, 0.1)
        soundPart.Position = position
        soundPart.Transparency = 1
        soundPart.CanCollide = false
        soundPart.Anchored = true
        soundPart.Parent = Workspace
        
        soundClone.Parent = soundPart
        
        -- –£–¥–∞–ª—è–µ–º Part –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–≤—É–∫–∞
        spawn(function()
            wait(soundClone.TimeLength + 1)
            if soundPart and soundPart.Parent then
                soundPart:Destroy()
            end
        end)
    end
    
    soundClone:Play()
    
    -- –£–¥–∞–ª—è–µ–º –∫–ª–æ–Ω –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    spawn(function()
        wait(soundClone.TimeLength + 1)
        if soundClone and soundClone.Parent then
            soundClone:Destroy()
        end
    end)
    
    return true
end

function EffectsSystem:createExplosionEffect(position, intensity)
    logger:info("üí• –ü—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–ª—É–ø–ª–µ–Ω–∏—è Common Egg –≤ –ø–æ–∑–∏—Ü–∏–∏: %s", tostring(position))
    
    local explosionEffects = {}
    
    -- –ü—Ä–æ—Å—Ç–∞—è –±–µ–ª–∞—è –≤—Å–ø—ã—à–∫–∞ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    local flashPart = Instance.new("Part")
    flashPart.Name = "HatchFlash"
    flashPart.Size = Vector3.new(0.1, 0.1, 0.1)
    flashPart.Position = position
    flashPart.Material = Enum.Material.Neon
    flashPart.Color = Color3.fromRGB(255, 255, 255)
    flashPart.Transparency = 0
    flashPart.CanCollide = false
    flashPart.Anchored = true
    flashPart.Shape = Enum.PartType.Ball
    flashPart.Parent = Workspace
    
    -- –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø—ã—à–∫–∏
    local flashTween = TweenService:Create(flashPart, 
        TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            Size = Vector3.new(8, 8, 8),
            Transparency = 1
        }
    )
    
    table.insert(explosionEffects, {part = flashPart, tween = flashTween})
    
    -- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –±–µ–ª—ã–µ –æ—Å–∫–æ–ª–∫–∏ —è–π—Ü–∞
    for i = 1, 6 do
        local shard = Instance.new("Part")
        shard.Name = "EggShard_" .. i
        shard.Size = Vector3.new(0.3, 0.5, 0.2)
        shard.Position = position + Vector3.new(math.random(-1, 1), math.random(0, 2), math.random(-1, 1))
        shard.Material = Enum.Material.SmoothPlastic
        shard.Color = Color3.fromRGB(255, 255, 255) -- –ë–µ–ª—ã–µ –æ—Å–∫–æ–ª–∫–∏
        shard.Transparency = 0
        shard.CanCollide = false
        shard.Parent = Workspace
        
        -- –ü—Ä–æ—Å—Ç–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(2000, 2000, 2000)
        bodyVelocity.Velocity = Vector3.new(
            math.random(-10, 10),
            math.random(5, 15),
            math.random(-10, 10)
        )
        bodyVelocity.Parent = shard
        
        -- –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤
        local shardTween = TweenService:Create(shard,
            TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {
                Transparency = 1,
                Size = Vector3.new(0.1, 0.1, 0.1)
            }
        )
        
        table.insert(explosionEffects, {part = shard, tween = shardTween, bodyVelocity = bodyVelocity})
        
        -- –£–¥–∞–ª—è–µ–º –æ—Å–∫–æ–ª–æ–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        Debris:AddItem(shard, 3)
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–ª—å—Ü–µ–≤—É—é —É–¥–∞—Ä–Ω—É—é –≤–æ–ª–Ω—É
    local shockwavePart = Instance.new("Part")
    shockwavePart.Name = "Shockwave"
    shockwavePart.Size = Vector3.new(1, 0.1, 1)
    shockwavePart.Position = position - Vector3.new(0, 2, 0)
    shockwavePart.Material = Enum.Material.ForceField
    shockwavePart.Color = Color3.fromRGB(255, 215, 0)
    shockwavePart.Transparency = 0.5
    shockwavePart.CanCollide = false
    shockwavePart.Anchored = true
    shockwavePart.Shape = Enum.PartType.Cylinder
    shockwavePart.Parent = Workspace
    
    -- –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–Ω–æ–π –≤–æ–ª–Ω—ã
    local shockwaveTween = TweenService:Create(shockwavePart,
        TweenInfo.new(1.0, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            Size = Vector3.new(30, 0.1, 30),
            Transparency = 1
        }
    )
    
    table.insert(explosionEffects, {part = shockwavePart, tween = shockwaveTween})
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, effect in ipairs(explosionEffects) do
        effect.tween:Play()
    end
    
    -- –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    spawn(function()
        wait(3)
        for _, effect in ipairs(explosionEffects) do
            if effect.part and effect.part.Parent then
                effect.part:Destroy()
            end
        end
    end)
    
    -- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –≤–∑—Ä—ã–≤–∞
    self:playSound("EXPLOSION", position)
    
    logger:info("‚úÖ –°–æ–∑–¥–∞–Ω–æ %d —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤–∑—Ä—ã–≤–∞", #explosionEffects)
    return explosionEffects
end

function EffectsSystem:createParticleExplosion(position)
    logger:info("‚ú® –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: %s", tostring(position))
    
    -- –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—É—é —á–∞—Å—Ç—å –¥–ª—è Attachment
    local particleHost = Instance.new("Part")
    particleHost.Name = "ParticleHost"
    particleHost.Size = Vector3.new(0.1, 0.1, 0.1)
    particleHost.Position = position
    particleHost.Transparency = 1
    particleHost.CanCollide = false
    particleHost.Anchored = true
    particleHost.Parent = Workspace
    
    local attachment = Instance.new("Attachment")
    attachment.Name = "ExplosionAttachment"
    attachment.Parent = particleHost
    
    -- –û—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞
    local explosionParticles = Instance.new("ParticleEmitter")
    explosionParticles.Name = "ExplosionParticles"
    explosionParticles.Texture = "rbxasset://textures/particles/fire_main.dds"
    explosionParticles.Lifetime = NumberRange.new(0.5, 1.5)
    explosionParticles.Rate = 200
    explosionParticles.SpreadAngle = Vector2.new(360, 360)
    explosionParticles.Speed = NumberRange.new(10, 25)
    explosionParticles.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.3, Color3.fromRGB(255, 165, 0)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    }
    explosionParticles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 1.0),
        NumberSequenceKeypoint.new(0.5, 2.0),
        NumberSequenceKeypoint.new(1, 0.0)
    }
    explosionParticles.Parent = attachment
    
    -- –ò—Å–∫—Ä—ã
    local sparkParticles = Instance.new("ParticleEmitter")
    sparkParticles.Name = "SparkParticles"
    sparkParticles.Texture = "rbxasset://textures/particles/sparkles_main.dds"
    sparkParticles.Lifetime = NumberRange.new(1.0, 2.0)
    sparkParticles.Rate = 100
    sparkParticles.SpreadAngle = Vector2.new(360, 360)
    sparkParticles.Speed = NumberRange.new(15, 30)
    sparkParticles.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
    sparkParticles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0.3),
        NumberSequenceKeypoint.new(1, 0.0)
    }
    sparkParticles.Parent = attachment
    
    -- –î—ã–º
    local smokeParticles = Instance.new("ParticleEmitter")
    smokeParticles.Name = "SmokeParticles"
    smokeParticles.Texture = "rbxasset://textures/particles/smoke_main.dds"
    smokeParticles.Lifetime = NumberRange.new(2.0, 4.0)
    smokeParticles.Rate = 50
    smokeParticles.SpreadAngle = Vector2.new(45, 45)
    smokeParticles.Speed = NumberRange.new(5, 15)
    smokeParticles.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 100, 100)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))
    }
    smokeParticles.Size = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 1.0),
        NumberSequenceKeypoint.new(1, 3.0)
    }
    smokeParticles.Parent = attachment
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–º–∏—Å—Å–∏—é —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
    spawn(function()
        wait(0.2)
        explosionParticles.Enabled = false
        sparkParticles.Enabled = false
        wait(0.5)
        smokeParticles.Enabled = false
        
        -- –£–¥–∞–ª—è–µ–º —Ö–æ—Å—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        wait(4.3)
        if particleHost and particleHost.Parent then
            particleHost:Destroy()
        end
    end)
    logger:info("‚úÖ –ß–∞—Å—Ç–∏—Ü—ã –≤–∑—Ä—ã–≤–∞ —Å–æ–∑–¥–∞–Ω—ã")
    return particleHost
end

-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞
function EffectsSystem:cleanupParticleExplosion(particleHost)
    if particleHost and particleHost.Parent then
        particleHost:Destroy()
    end
end

function EffectsSystem:cleanup()
    logger:info("–û—á–∏—Å—Ç–∫–∞ EffectsSystem...")
    
    for _, sound in pairs(self.soundCache) do
        if sound and sound.Parent then
            sound:Destroy()
        end
    end
    
    self.soundCache = {}
    self.particleCache = {}
    self.activeEffects = {}
    
    logger:info("‚úÖ EffectsSystem –æ—á–∏—â–µ–Ω")
end

-- ===== PET SPAWN SYSTEM =====
local PetSpawnSystem = {}
PetSpawnSystem.__index = PetSpawnSystem

function PetSpawnSystem.new()
    local self = setmetatable({}, PetSpawnSystem)
    self.spawnedPets = {}
    self.petTemplates = {}
    self.visualsFolder = nil
    return self
end

function PetSpawnSystem:initialize()
    logger:info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PetSpawnSystem...")
    
    -- –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Visuals
    self.visualsFolder = Workspace:FindFirstChild("Visuals")
    if not self.visualsFolder then
        logger:warn("–ü–∞–ø–∫–∞ Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é...")
        self.visualsFolder = Instance.new("Folder")
        self.visualsFolder.Name = "Visuals"
        self.visualsFolder.Parent = Workspace
    end
    
    -- –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã –ø–∏—Ç–æ–º—Ü–µ–≤
    self:createPetTemplates()
    
    logger:info("‚úÖ PetSpawnSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return true
end

function PetSpawnSystem:createPetTemplates()
    logger:info("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    -- –®–∞–±–ª–æ–Ω –¥–ª—è Starfish (–∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    self.petTemplates.starfish = function(position)
        local petModel = Instance.new("Model")
        petModel.Name = "starfish"
        
        -- –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ –º–æ—Ä—Å–∫–æ–π –∑–≤–µ–∑–¥—ã
        local body = Instance.new("Part")
        body.Name = "Body"
        body.Size = Vector3.new(2, 0.3, 2)
        body.Position = position
        body.Material = Enum.Material.Neon
        body.Color = Color3.fromRGB(255, 100, 150)
        body.Shape = Enum.PartType.Cylinder
        body.CanCollide = false
        body.Parent = petModel
        
        -- –°–æ–∑–¥–∞–µ–º 5 –ª—É—á–µ–π –∑–≤–µ–∑–¥—ã
        for i = 1, 5 do
            local angle = (i - 1) * (2 * math.pi / 5)
            local ray = Instance.new("Part")
            ray.Name = "Ray_" .. i
            ray.Size = Vector3.new(0.4, 0.2, 1.2)
            ray.Position = position + Vector3.new(math.cos(angle) * 0.8, 0, math.sin(angle) * 0.8)
            ray.Material = Enum.Material.Neon
            ray.Color = Color3.fromRGB(255, 150, 200)
            ray.CanCollide = false
            ray.Parent = petModel
            
            -- –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–ª–æ–º
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = body
            weld.Part1 = ray
            weld.Parent = body
        end
        
        petModel.PrimaryPart = body
        return petModel
    end
    
    -- –®–∞–±–ª–æ–Ω –¥–ª—è Seagull
    self.petTemplates.seagull = function(position)
        local petModel = Instance.new("Model")
        petModel.Name = "seagull"
        
        -- –¢–µ–ª–æ —á–∞–π–∫–∏
        local body = Instance.new("Part")
        body.Name = "Body"
        body.Size = Vector3.new(1.2, 0.8, 2)
        body.Position = position
        body.Material = Enum.Material.Plastic
        body.Color = Color3.fromRGB(240, 240, 240)
        body.CanCollide = false
        body.Parent = petModel
        
        -- –ì–æ–ª–æ–≤–∞
        local head = Instance.new("Part")
        head.Name = "Head"
        head.Size = Vector3.new(0.6, 0.6, 0.6)
        head.Position = position + Vector3.new(0, 0.3, 1)
        head.Material = Enum.Material.Plastic
        head.Color = Color3.fromRGB(240, 240, 240)
        head.Shape = Enum.PartType.Ball
        head.CanCollide = false
        head.Parent = petModel
        
        -- –ö—Ä—ã–ª—å—è
        for i = 1, 2 do
            local wing = Instance.new("Part")
            wing.Name = "Wing_" .. i
            wing.Size = Vector3.new(0.1, 1.5, 0.8)
            wing.Position = position + Vector3.new((i == 1) and -0.7 or 0.7, 0.2, 0)
            wing.Material = Enum.Material.Plastic
            wing.Color = Color3.fromRGB(200, 200, 200)
            wing.CanCollide = false
            wing.Parent = petModel
            
            -- –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–ª–æ–º
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = body
            weld.Part1 = wing
            weld.Parent = body
        end
        
        -- –°–æ–µ–¥–∏–Ω—è–µ–º –≥–æ–ª–æ–≤—É —Å —Ç–µ–ª–æ–º
        local headWeld = Instance.new("WeldConstraint")
        headWeld.Part0 = body
        headWeld.Part1 = head
        headWeld.Parent = body
        
        petModel.PrimaryPart = body
        return petModel
    end
    
    -- –®–∞–±–ª–æ–Ω –¥–ª—è Crab
    self.petTemplates.crab = function(position)
        local petModel = Instance.new("Model")
        petModel.Name = "crab"
        
        -- –¢–µ–ª–æ –∫—Ä–∞–±–∞
        local body = Instance.new("Part")
        body.Name = "Body"
        body.Size = Vector3.new(1.5, 0.6, 1)
        body.Position = position
        body.Material = Enum.Material.Plastic
        body.Color = Color3.fromRGB(255, 100, 50)
        body.CanCollide = false
        body.Parent = petModel
        
        -- –ö–ª–µ—à–Ω–∏
        for i = 1, 2 do
            local claw = Instance.new("Part")
            claw.Name = "Claw_" .. i
            claw.Size = Vector3.new(0.4, 0.4, 0.8)
            claw.Position = position + Vector3.new((i == 1) and -1 or 1, 0, 0.6)
            claw.Material = Enum.Material.Plastic
            claw.Color = Color3.fromRGB(255, 80, 30)
            claw.CanCollide = false
            claw.Parent = petModel
            
            -- –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–ª–æ–º
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = body
            weld.Part1 = claw
            weld.Parent = body
        end
        
        -- –ù–æ–∂–∫–∏
        for i = 1, 6 do
            local leg = Instance.new("Part")
            leg.Name = "Leg_" .. i
            leg.Size = Vector3.new(0.2, 0.8, 0.2)
            local side = (i <= 3) and -1 or 1
            local offset = ((i - 1) % 3) - 1
            leg.Position = position + Vector3.new(side * 0.8, -0.5, offset * 0.4)
            leg.Material = Enum.Material.Plastic
            leg.Color = Color3.fromRGB(200, 80, 40)
            leg.CanCollide = false
            leg.Parent = petModel
            
            -- –°–æ–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–ª–æ–º
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = body
            weld.Part1 = leg
            weld.Parent = body
        end
        
        petModel.PrimaryPart = body
        return petModel
    end
    
    logger:info("‚úÖ –°–æ–∑–¥–∞–Ω–æ %d —à–∞–±–ª–æ–Ω–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤", 3)
end

function PetSpawnSystem:spawnPet(petName, position, playerData)
    logger:info("üêæ –°–ø–∞–≤–Ω –ø–∏—Ç–æ–º—Ü–∞: %s –≤ –ø–æ–∑–∏—Ü–∏–∏ %s", petName, tostring(position))
    
    local template = self.petTemplates[petName]
    if not template then
        logger:error("‚ùå –®–∞–±–ª–æ–Ω –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", petName)
        return nil
    end
    
    -- –°–æ–∑–¥–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    local petModel = template(position + Vector3.new(0, CONFIG.PETS.SPAWN_HEIGHT, 0))
    if not petModel then
        logger:error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞: %s", petName)
        return nil
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–ø–∫—É Visuals
    petModel.Parent = self.visualsFolder
    
    -- –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
    self:createSpawnEffect(petModel)
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    if petModel.PrimaryPart then
        petModel.PrimaryPart.Transparency = 1
        
        local spawnTween = TweenService:Create(petModel.PrimaryPart,
            TweenInfo.new(1.0, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
            {Transparency = 0}
        )
        spawnTween:Play()
        
        -- –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        for _, part in ipairs(petModel:GetChildren()) do
            if part:IsA("BasePart") and part ~= petModel.PrimaryPart then
                part.Transparency = 1
                local partTween = TweenService:Create(part,
                    TweenInfo.new(1.0, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
                    {Transparency = 0}
                )
                partTween:Play()
            end
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–æ–º—Ü–µ
    local petData = {
        model = petModel,
        name = petName,
        spawnTime = tick(),
        position = position,
        playerData = playerData
    }
    
    table.insert(self.spawnedPets, petData)
    performanceManager:incrementObjects()
    
    logger:info("‚úÖ –ü–∏—Ç–æ–º–µ—Ü %s —É—Å–ø–µ—à–Ω–æ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω", petName)
    return petModel
end

function PetSpawnSystem:createSpawnEffect(petModel)
    if not petModel.PrimaryPart then return end
    
    local position = petModel.PrimaryPart.Position
    
    -- –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è
    local spawnEffect = Instance.new("Part")
    spawnEffect.Name = "SpawnEffect"
    spawnEffect.Size = Vector3.new(0.1, 0.1, 0.1)
    spawnEffect.Position = position
    spawnEffect.Material = Enum.Material.Neon
    spawnEffect.Color = Color3.fromRGB(0, 255, 0)
    spawnEffect.Transparency = 0
    spawnEffect.CanCollide = false
    spawnEffect.Anchored = true
    spawnEffect.Shape = Enum.PartType.Ball
    spawnEffect.Parent = Workspace
    
    -- –ê–Ω–∏–º–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
    local effectTween = TweenService:Create(spawnEffect,
        TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {
            Size = Vector3.new(8, 8, 8),
            Transparency = 1
        }
    )
    effectTween:Play()
    
    -- –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    Debris:AddItem(spawnEffect, 1)
    
    -- –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è
    if _G.EggSystemCore and _G.EggSystemCore.effectsSystem then
        _G.EggSystemCore.effectsSystem:playSound("PET_SPAWN", position, {volume = 0.5})
    end
end

function PetSpawnSystem:cleanup()
    logger:info("–û—á–∏—Å—Ç–∫–∞ PetSpawnSystem...")
    
    for _, petData in ipairs(self.spawnedPets) do
        if petData.model and petData.model.Parent then
            petData.model:Destroy()
            performanceManager:decrementObjects()
        end
    end
    
    self.spawnedPets = {}
    self.petTemplates = {}
    
    logger:info("‚úÖ PetSpawnSystem –æ—á–∏—â–µ–Ω")
end

print("üì¶ –ß–∞—Å—Ç—å 4 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: EffectsSystem –∏ PetSpawnSystem —Å–æ–∑–¥–∞–Ω—ã")
print("üîÑ –°–æ–∑–¥–∞—é –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ —Å–∏—Å—Ç–µ–º—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")

-- ===== –ß–ê–°–¢–¨ 5: MAIN CONTROLLER & INITIALIZATION =====
-- –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ

local EggReplicationController = {}
EggReplicationController.__index = EggReplicationController

function EggReplicationController.new()
    local self = setmetatable({}, EggReplicationController)
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º
    self.structureBuilder = EggStructureBuilder.new()
    self.interactionSystem = InteractionSystem.new()
    self.networkManager = NetworkManager.new()
    self.effectsSystem = EffectsSystem.new()
    self.petSpawnSystem = PetSpawnSystem.new()
    
    -- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    self.isInitialized = false
    self.activeEggs = {}
    self.hatchingEggs = {}
    
    -- Callbacks –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
    self.callbacks = {
        onEggTriggered = function(player, eggModel) self:handleEggTriggered(player, eggModel) end,
        onPetHatched = function(eggId, petName, playerData) self:handlePetHatched(eggId, petName, playerData) end
    }
    
    return self
end

function EggReplicationController:initialize()
    logger:info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EggReplicationController...")
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
    local success = true
    
    -- 1. NetworkManager
    if not self.networkManager:initialize() then
        logger:warn("NetworkManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    end
    self.networkManager:connectToEggService()
    
    -- 2. EffectsSystem
    self.effectsSystem:preloadSounds()
    
    -- 3. PetSpawnSystem
    if not self.petSpawnSystem:initialize() then
        logger:error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PetSpawnSystem")
        success = false
    end
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ callbacks
    _G.EggSystemCallbacks = self.callbacks
    _G.EggSystemCore.effectsSystem = self.effectsSystem
    
    if success then
        self.isInitialized = true
        logger:info("‚úÖ EggReplicationController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    else
        logger:error("‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EggReplicationController")
    end
    
    return success
end

function EggReplicationController:createEgg(position)
    logger:info("ü•ö –°–æ–∑–¥–∞–Ω–∏–µ —è–π—Ü–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: %s", tostring(position))
    
    if not self.isInitialized then
        logger:error("–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return nil
    end
    
    -- –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —è–π—Ü–∞
    local eggModel = self.structureBuilder:assembleEggModel(position)
    if not eggModel then
        logger:error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —è–π—Ü–∞")
        return nil
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    local proximityPrompt = self.structureBuilder:addInteractivity(eggModel)
    if not proximityPrompt then
        logger:error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        return nil
    end
    
    -- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ProximityPrompt –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    local success = self.interactionSystem:registerProximityPrompt(proximityPrompt, eggModel, {
        onTriggered = self.callbacks.onEggTriggered,
        onPromptShown = function(player, egg)
            logger:debug("–ò–≥—Ä–æ–∫ %s –≤–∏–¥–∏—Ç —è–π—Ü–æ %s", player.Name, egg.Name)
        end,
        onPromptHidden = function(player, egg)
            logger:debug("–ò–≥—Ä–æ–∫ %s –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏—Ç —è–π—Ü–æ %s", player.Name, egg.Name)
        end
    })
    
    if not success then
        logger:error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ProximityPrompt")
        return nil
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–π—Ü–µ
    local eggData = {
        model = eggModel,
        proximityPrompt = proximityPrompt,
        position = position,
        createdAt = tick(),
        isHatching = false,
        eggId = tostring(eggModel) -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    }
    
    table.insert(self.activeEggs, eggData)
    performanceManager:incrementObjects()
    
    logger:info("‚úÖ –Ø–π—Ü–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: %s", eggData.eggId)
    return eggModel, eggData
end

function EggReplicationController:handleEggTriggered(player, eggModel)
    logger:info("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —è–π—Ü–∞ –∏–≥—Ä–æ–∫–æ–º %s", player.Name)
    
    -- –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —è–π—Ü–∞
    local eggData = nil
    for _, egg in ipairs(self.activeEggs) do
        if egg.model == eggModel then
            eggData = egg
            break
        end
    end
    
    if not eggData then
        logger:error("–î–∞–Ω–Ω—ã–µ —è–π—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return false
    end
    
    if eggData.isHatching then
        logger:warn("–Ø–π—Ü–æ —É–∂–µ –≤—ã–ª—É–ø–ª—è–µ—Ç—Å—è!")
        return false
    end
    
    -- –û—Ç–º–µ—á–∞–µ–º —è–π—Ü–æ –∫–∞–∫ –≤—ã–ª—É–ø–ª—è—é—â–µ–µ—Å—è
    eggData.isHatching = true
    table.insert(self.hatchingEggs, eggData)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ª—É–ø–ª–µ–Ω–∏—è
    self:startHatchingProcess(eggData, player)
    
    return true
end

function EggReplicationController:startHatchingProcess(eggData, player)
    logger:info("üê£ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è –¥–ª—è —è–π—Ü–∞: %s", eggData.eggId)
    
    local eggModel = eggData.model
    local position = eggData.position
    
    -- –û—Ç–∫–ª—é—á–∞–µ–º ProximityPrompt
    if eggData.proximityPrompt then
        eggData.proximityPrompt.Enabled = false
    end
    
    spawn(function()
        -- –§–∞–∑–∞ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (–∑–≤—É–∫ –Ω–∞—á–∞–ª–∞)
        logger:info("üîä –§–∞–∑–∞ 1: –ó–≤—É–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è")
        self.effectsSystem:playSound("HATCH_START", position)
        
        wait(0.5)
        
        -- –§–∞–∑–∞ 2: –¢—Ä—è—Å–∫–∞ –∏ —Ç—Ä–µ—â–∏–Ω—ã
        logger:info("üí´ –§–∞–∑–∞ 2: –¢—Ä—è—Å–∫–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        local hatchEffects = self.interactionSystem:createHatchingEffects(eggModel)
        
        if hatchEffects then
            hatchEffects.shakeAnimation:Play()
            hatchEffects.glowAnimation:Play()
            hatchEffects.crackSound:Play()
        end
        
        wait(CONFIG.EFFECTS.HATCH_ANIMATION.CRACK_DURATION)
        
        -- –§–∞–∑–∞ 3: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        logger:info("üåê –§–∞–∑–∞ 3: –ó–∞–ø—Ä–æ—Å –≤—ã–ª—É–ø–ª–µ–Ω–∏—è")
        local playerData = {
            userId = player.UserId,
            name = player.Name,
            position = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
        }
        
        self.networkManager:requestEggHatch(eggData.eggId, playerData)
        
        wait(CONFIG.EFFECTS.HATCH_ANIMATION.EXPLOSION_DELAY)
        
        -- –§–∞–∑–∞ 4: –í–∑—Ä—ã–≤ (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
        if eggData.isHatching then -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω
            logger:info("üí• –§–∞–∑–∞ 4: –í–∑—Ä—ã–≤ —è–π—Ü–∞ (—Ç–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞)")
            self:executeEggExplosion(eggData, "starfish", playerData) -- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é starfish
        end
    end)
end

function EggReplicationController:handlePetHatched(eggId, petName, playerData)
    logger:info("üêæ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ª—É–ø–ª–µ–Ω–∏—è: %s -> %s", eggId, petName)
    
    -- –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —è–π—Ü–æ
    local eggData = nil
    for _, egg in ipairs(self.hatchingEggs) do
        if egg.eggId == eggId then
            eggData = egg
            break
        end
    end
    
    if not eggData then
        logger:warn("–Ø–π—Ü–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %s", eggId)
        return false
    end
    
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∑—Ä—ã–≤ –∏ —Å–ø–∞–≤–Ω –ø–∏—Ç–æ–º—Ü–∞
    self:executeEggExplosion(eggData, petName, playerData)
    
    return true
end

function EggReplicationController:executeEggExplosion(eggData, petName, playerData)
    logger:info("üí• –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∑—Ä—ã–≤–∞ —è–π—Ü–∞: %s -> %s", eggData.eggId, petName)
    
    local position = eggData.position
    local eggModel = eggData.model
    
    -- –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–∑—Ä—ã–≤–∞
    self.effectsSystem:createExplosionEffect(position, 1.0)
    self.effectsSystem:createParticleExplosion(position)
    
    -- –°–∫—Ä—ã–≤–∞–µ–º —è–π—Ü–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    if eggModel.PrimaryPart then
        local hideTween = TweenService:Create(eggModel.PrimaryPart,
            TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Transparency = 1, Size = Vector3.new(0.1, 0.1, 0.1)}
        )
        hideTween:Play()
        
        -- –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —è–π—Ü–∞
        for _, part in ipairs(eggModel:GetChildren()) do
            if part:IsA("BasePart") and part ~= eggModel.PrimaryPart then
                local partTween = TweenService:Create(part,
                    TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                    {Transparency = 1, Size = part.Size * 0.1}
                )
                partTween:Play()
            end
        end
    end
    
    -- –°–ø–∞–≤–Ω–∏–º –ø–∏—Ç–æ–º—Ü–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    spawn(function()
        wait(CONFIG.PETS.SPAWN_DELAY)
        
        logger:info("üêæ –°–ø–∞–≤–Ω –ø–∏—Ç–æ–º—Ü–∞: %s", petName)
        local spawnPosition = position + Vector3.new(
            math.random(-CONFIG.PETS.SPAWN_RADIUS, CONFIG.PETS.SPAWN_RADIUS),
            0,
            math.random(-CONFIG.PETS.SPAWN_RADIUS, CONFIG.PETS.SPAWN_RADIUS)
        )
        
        local petModel = self.petSpawnSystem:spawnPet(petName, spawnPosition, playerData)
        
        if petModel then
            logger:info("‚úÖ –ü–∏—Ç–æ–º–µ—Ü %s —É—Å–ø–µ—à–Ω–æ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞ %s", petName, playerData.name)
        else
            logger:error("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∞–≤–Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ %s", petName)
        end
        
        -- –£–¥–∞–ª—è–µ–º —è–π—Ü–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        wait(2)
        self:removeEgg(eggData)
    end)
end

function EggReplicationController:removeEgg(eggData)
    logger:info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —è–π—Ü–∞: %s", eggData.eggId)
    
    -- –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤
    for i, egg in ipairs(self.activeEggs) do
        if egg.eggId == eggData.eggId then
            table.remove(self.activeEggs, i)
            break
        end
    end
    
    for i, egg in ipairs(self.hatchingEggs) do
        if egg.eggId == eggData.eggId then
            table.remove(self.hatchingEggs, i)
            break
        end
    end
    
    -- –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å
    if eggData.model and eggData.model.Parent then
        eggData.model:Destroy()
        performanceManager:decrementObjects()
    end
    
    logger:info("‚úÖ –Ø–π—Ü–æ —É–¥–∞–ª–µ–Ω–æ: %s", eggData.eggId)
end

function EggReplicationController:createTestEgg()
    logger:info("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —è–π—Ü–∞...")
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
    local playerChar = player.Character
    if not playerChar or not playerChar:FindFirstChild("HumanoidRootPart") then
        logger:error("–ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return nil
    end
    
    local playerPos = playerChar.HumanoidRootPart.Position
    local eggPosition = playerPos + Vector3.new(10, 5, 0) -- 10 studs –≤–ø—Ä–∞–≤–æ, 5 –≤–≤–µ—Ä—Ö
    
    return self:createEgg(eggPosition)
end

function EggReplicationController:getStats()
    return {
        activeEggs = #self.activeEggs,
        hatchingEggs = #self.hatchingEggs,
        spawnedPets = #self.petSpawnSystem.spawnedPets,
        isInitialized = self.isInitialized,
        networkConnected = self.networkManager.isConnected
    }
end

function EggReplicationController:cleanup()
    logger:info("üßπ –û—á–∏—Å—Ç–∫–∞ EggReplicationController...")
    
    -- –û—á–∏—â–∞–µ–º –≤—Å–µ —è–π—Ü–∞
    for _, eggData in ipairs(self.activeEggs) do
        if eggData.model and eggData.model.Parent then
            eggData.model:Destroy()
        end
    end
    
    -- –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
    self.structureBuilder:cleanup()
    self.interactionSystem:cleanup()
    self.networkManager:cleanup()
    self.effectsSystem:cleanup()
    self.petSpawnSystem:cleanup()
    
    -- –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    _G.EggSystemCallbacks = nil
    _G.EggSystemCore.effectsSystem = nil
    
    self.activeEggs = {}
    self.hatchingEggs = {}
    self.isInitialized = false
    
    logger:info("‚úÖ EggReplicationController –æ—á–∏—â–µ–Ω")
end

-- ===== –°–û–ó–î–ê–ù–ò–ï GUI –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====
local function createControlGUI(controller)
    logger:info("üéÆ –°–æ–∑–¥–∞–Ω–∏–µ GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EggReplicationControlGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 350, 0, 400)
    mainFrame.Position = UDim2.new(1, -360, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderColor3 = Color3.fromRGB(255, 100, 0)
    mainFrame.BorderSizePixel = 2
    mainFrame.Parent = screenGui
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, 0, 0, 40)
    titleLabel.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
    titleLabel.Text = "üî• EGG REPLICATION SYSTEM"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = mainFrame
    
    local createEggButton = Instance.new("TextButton")
    createEggButton.Size = UDim2.new(0.9, 0, 0, 50)
    createEggButton.Position = UDim2.new(0.05, 0, 0, 50)
    createEggButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    createEggButton.Text = "ü•ö –°–û–ó–î–ê–¢–¨ –¢–ï–°–¢–û–í–û–ï –Ø–ô–¶–û"
    createEggButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    createEggButton.TextScaled = true
    createEggButton.Font = Enum.Font.SourceSansBold
    createEggButton.Parent = mainFrame
    
    local statsLabel = Instance.new("TextLabel")
    statsLabel.Size = UDim2.new(0.9, 0, 0, 120)
    statsLabel.Position = UDim2.new(0.05, 0, 0, 110)
    statsLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    statsLabel.Text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n–ó–∞–≥—Ä—É–∑–∫–∞..."
    statsLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statsLabel.TextScaled = true
    statsLabel.Font = Enum.Font.SourceSans
    statsLabel.TextWrapped = true
    statsLabel.Parent = mainFrame
    
    local logLabel = Instance.new("TextLabel")
    logLabel.Size = UDim2.new(0.9, 0, 0, 120)
    logLabel.Position = UDim2.new(0.05, 0, 0, 240)
    logLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    logLabel.Text = "üìù –õ–û–ì –°–ò–°–¢–ï–ú–´\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
    logLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
    logLabel.TextScaled = true
    logLabel.Font = Enum.Font.SourceSans
    logLabel.TextWrapped = true
    logLabel.Parent = mainFrame
    
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0.9, 0, 0, 30)
    closeButton.Position = UDim2.new(0.05, 0, 0, 370)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    closeButton.Text = "‚ùå –ó–ê–ö–†–´–¢–¨ –ò –û–ß–ò–°–¢–ò–¢–¨"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = mainFrame
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    createEggButton.MouseButton1Click:Connect(function()
        local eggModel, eggData = controller:createTestEgg()
        if eggModel then
            logLabel.Text = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —è–π—Ü–æ —Å–æ–∑–¥–∞–Ω–æ!\nID: " .. eggData.eggId
            logLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
        else
            logLabel.Text = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —è–π—Ü–∞!"
            logLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
        end
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        controller:cleanup()
        screenGui:Destroy()
    end)
    
    -- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    spawn(function()
        while screenGui.Parent do
            local stats = controller:getStats()
            statsLabel.Text = string.format(
                "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\nü•ö –ê–∫—Ç–∏–≤–Ω—ã—Ö —è–∏—Ü: %d\nüê£ –í—ã–ª—É–ø–ª—è–µ—Ç—Å—è: %d\nüêæ –ü–∏—Ç–æ–º—Ü–µ–≤: %d\nüåê –°–µ—Ç—å: %s",
                stats.activeEggs,
                stats.hatchingEggs,
                stats.spawnedPets,
                stats.networkConnected and "‚úÖ" or "‚ùå"
            )
            wait(2)
        end
    end)
    
    logger:info("‚úÖ GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
    return screenGui
end

-- ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö =====
logger:info("üéØ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")

-- –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
local mainController = EggReplicationController.new()

-- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
local success = mainController:initialize()

if success then
    logger:info("üéâ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!")
    
    -- –°–æ–∑–¥–∞–µ–º GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    local controlGUI = createControlGUI(mainController)
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    _G.EggReplicationController = mainController
    
    print("=" .. string.rep("=", 60))
    print("üî• ULTIMATE EGG REPLICATION SYSTEM v1.0 - –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!")
    print("=" .. string.rep("=", 60))
    print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã")
    print("üéÆ GUI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω (—Å–ø—Ä–∞–≤–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)")
    print("ü•ö –ù–∞–∂–º–∏—Ç–µ '–°–û–ó–î–ê–¢–¨ –¢–ï–°–¢–û–í–û–ï –Ø–ô–¶–û' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("üêæ –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —è–π—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ E –¥–ª—è –≤—ã–ª—É–ø–ª–µ–Ω–∏—è")
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("=" .. string.rep("=", 60))
    
    logger:info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    
else
    logger:error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!")
    print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
    print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º")
end

print("üì¶ –ß–∞—Å—Ç—å 5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
print("üéØ ULTIMATE EGG REPLICATION SYSTEM v1.0 - –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù!")
