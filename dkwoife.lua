-- üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê
-- –õ–æ–≥–∏—Ä—É–µ—Ç –¢–û–ß–ù–£–Æ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –¥–ª—è 1:1 –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
local CONFIG = {
    SEARCH_RADIUS = 100,
    LOG_INTERVAL = 1,  -- –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    MOVEMENT_THRESHOLD = 0.1  -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
}

-- üéØ –¢–û–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–û–ò–°–ö–ê –ü–ò–¢–û–ú–¶–ê (–∏–∑ PetScaler_v3.221.lua)
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

local function findOriginalPet()
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local playerPos = character.HumanoidRootPart.Position
    
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    -- –¢–û–ß–ù–ê–Ø –õ–û–ì–ò–ö–ê –ò–ó PetScaler_v3.221.lua
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("üîç –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "(—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", string.format("%.2f", distance), "—Å—Ç–∞–¥–æ–≤)")
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS, "—Å—Ç–∞–¥–æ–≤!")
        return nil
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    local targetPet = foundPets[1]
    
    print("üéØ –í—ã–±—Ä–∞–Ω –±–ª–∏–∂–∞–π—à–∏–π –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    print("üìä –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", string.format("%.2f", targetPet.distance), "—Å—Ç–∞–¥–æ–≤")
    print("üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—à–µ–π:", #targetPet.meshes)
    
    return targetPet.model
end

-- üìä –ê–ù–ê–õ–ò–ó–ê–¢–û–† –û–†–ò–ï–ù–¢–ê–¶–ò–ò
local function analyzePetOrientation(pet, label)
    if not pet or not pet.PrimaryPart then
        return
    end
    
    local rootPart = pet.PrimaryPart
    local pos = rootPart.Position
    local cframe = rootPart.CFrame
    
    print("\n" .. label)
    print("=" .. string.rep("=", string.len(label)))
    print("üìä –ü–æ–∑–∏—Ü–∏—è:", string.format("%.3f, %.3f, %.3f", pos.X, pos.Y, pos.Z))
    print("üìä UpVector:", string.format("%.3f, %.3f, %.3f", cframe.UpVector.X, cframe.UpVector.Y, cframe.UpVector.Z))
    print("üìä LookVector:", string.format("%.3f, %.3f, %.3f", cframe.LookVector.X, cframe.LookVector.Y, cframe.LookVector.Z))
    print("üìä RightVector:", string.format("%.3f, %.3f, %.3f", cframe.RightVector.X, cframe.RightVector.Y, cframe.RightVector.Z))
    
    -- –£–≥–ª—ã –≠–π–ª–µ—Ä–∞
    local x, y, z = cframe:ToEulerAnglesXYZ()
    print("üìä –£–≥–ª—ã (XYZ):", string.format("%.3f, %.3f, %.3f", math.deg(x), math.deg(y), math.deg(z)))
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    local upDotY = math.abs(cframe.UpVector:Dot(Vector3.new(0, 1, 0)))
    print("üìä –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:", string.format("%.3f", upDotY), "(1.0 = –∏–¥–µ–∞–ª—å–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)")
    
    -- –ü–æ–ª–Ω—ã–π CFrame –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìä –ü–æ–ª–Ω—ã–π CFrame:")
    print("   Position:", string.format("Vector3.new(%.3f, %.3f, %.3f)", pos.X, pos.Y, pos.Z))
    print("   CFrame:", string.format("CFrame.new(%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f)", 
        cframe.X, cframe.Y, cframe.Z,
        cframe.RightVector.X, cframe.UpVector.X, -cframe.LookVector.X,
        cframe.RightVector.Y, cframe.UpVector.Y, -cframe.LookVector.Y,
        cframe.RightVector.Z, cframe.UpVector.Z, -cframe.LookVector.Z))
end

-- üéØ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
local function startAnalysis()
    print("üîç === –ê–ù–ê–õ–ò–ó–ê–¢–û–† –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê ===")
    print("üìä –ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS, "—Å—Ç–∞–¥–æ–≤...")
    
    local originalPet = findOriginalPet()
    if not originalPet then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ –ø–∏—Ç–æ–º—Ü—É.")
        return
    end
    
    local lastPosition = originalPet.PrimaryPart.Position
    local hasMovedOnce = false
    local logTimer = 0
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    analyzePetOrientation(originalPet, "üêï –û–†–ò–ì–ò–ù–ê–õ –°–†–ê–ó–£ –ü–û–°–õ–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–Ø")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    local connection = RunService.Heartbeat:Connect(function(deltaTime)
        if not originalPet or not originalPet.Parent or not originalPet.PrimaryPart then
            print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑!")
            connection:Disconnect()
            return
        end
        
        local currentPos = originalPet.PrimaryPart.Position
        local movement = (currentPos - lastPosition).Magnitude
        
        -- –î–µ—Ç–µ–∫—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        if not hasMovedOnce and movement > CONFIG.MOVEMENT_THRESHOLD then
            hasMovedOnce = true
            print("\nüö∂ –ü–ò–¢–û–ú–ï–¶ –ù–ê–ß–ê–õ –î–í–ò–ì–ê–¢–¨–°–Ø!")
            analyzePetOrientation(originalPet, "üêï –û–†–ò–ì–ò–ù–ê–õ –ü–û–°–õ–ï –ü–ï–†–í–û–ì–û –î–í–ò–ñ–ï–ù–ò–Ø")
        end
        
        -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        logTimer = logTimer + deltaTime
        if logTimer >= CONFIG.LOG_INTERVAL then
            logTimer = 0
            
            if hasMovedOnce then
                analyzePetOrientation(originalPet, "üêï –û–†–ò–ì–ò–ù–ê–õ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï (–î–í–ò–ñ–ï–¢–°–Ø)")
            else
                analyzePetOrientation(originalPet, "üêï –û–†–ò–ì–ò–ù–ê–õ –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï (–°–¢–û–ò–¢)")
            end
        end
        
        lastPosition = currentPos
    end)
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.")
    print("üéØ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—á–Ω–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
    game:GetService("Debris"):AddItem({
        Destroy = function()
            connection:Disconnect()
            print("\n‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
        end
    }, 60)
end

-- üöÄ –ó–ê–ü–£–°–ö
startAnalysis()
