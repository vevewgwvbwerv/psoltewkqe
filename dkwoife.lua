-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π + –ê–í–¢–û–ó–ê–ú–ï–ù–ê
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier + EggPetReplacer
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é
-- –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ workspace.visuals –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–û–°–ù–û–í–ê–ù–ê –ù–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ò–ì–†–´)
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 1.184,   -- –¢–æ—á–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏!
    TWEEN_TIME = 3.2,       -- –í—Ä–µ–º—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ (3.22 —Å–µ–∫)
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìê –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ:", CONFIG.SCALE_FACTOR .. "x (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function hasPetVisuals(model)
    local visualCount = 0
    local petVisuals = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        local visualData = nil
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º MeshPart (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if obj:IsA("MeshPart") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                type = "MeshPart"
            }
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º SpecialMesh (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        elseif obj:IsA("SpecialMesh") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or "",
                type = "SpecialMesh"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ Part —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏/–¥–µ–∫–∞–ª—è–º–∏
        elseif obj:IsA("Part") then
            -- –ò—â–µ–º Decal –∏–ª–∏ Texture –Ω–∞ Part
            local hasDecal = obj:FindFirstChildOfClass("Decal")
            local hasTexture = obj:FindFirstChildOfClass("Texture")
            
            if hasDecal or hasTexture or obj.Material ~= Enum.Material.Plastic then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    material = obj.Material.Name,
                    hasDecal = hasDecal ~= nil,
                    hasTexture = hasTexture ~= nil,
                    type = "Part"
                }
            end
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º UnionOperation (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
        elseif obj:IsA("UnionOperation") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                type = "UnionOperation"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Attachment —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        elseif obj:IsA("Attachment") then
            local hasEffect = #obj:GetChildren() > 0
            if hasEffect then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    effectCount = #obj:GetChildren(),
                    type = "Attachment"
                }
            end
        end
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if visualData then
            table.insert(petVisuals, visualData)
        end
    end
    
    -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç BasePart'—ã, —Å—á–∏—Ç–∞–µ–º –µ—ë –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º
    if visualCount == 0 then
        local partCount = 0
        for _, obj in pairs(model:GetDescendants()) do
            if obj:IsA("BasePart") then
                partCount = partCount + 1
            end
        end
        
        -- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü
        if partCount >= 2 then
            visualCount = partCount
            table.insert(petVisuals, {
                name = "BaseParts",
                className = "Multiple",
                partCount = partCount,
                type = "BasePart"
            })
            print("  üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å " .. partCount .. " —á–∞—Å—Ç—è–º–∏: " .. model.Name)
        end
    end
    
    return visualCount > 0, petVisuals
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø + –ó–ê–©–ò–¢–ê)
local function deepCopyModel(originalModel)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not originalModel then
        print("‚ùå deepCopyModel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å = nil!")
        return nil
    end
    
    if not originalModel.Parent then
        print("‚ùå deepCopyModel: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –≤ Workspace!")
        return nil
    end
    
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = nil
    local success, errorMsg = pcall(function()
        copy = originalModel:Clone()
    end)
    
    if not success or not copy then
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:", errorMsg or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        return nil
    end
    
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            local newCFrame = CFrame.new(finalPosition, originalCFrame.LookVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ")
        else
            local newCFrame = originalCFrame + offset
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    if not model then
        print("‚ö†Ô∏è getAllParts: –º–æ–¥–µ–ª—å = nil")
        return parts
    end
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    if not copyParts or #copyParts == 0 then
        print("‚ö†Ô∏è smartAnchoredManagement: –Ω–µ—Ç —á–∞—Å—Ç–µ–π")
        return nil
    end
    
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored (–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –ü–ê–î–ï–ù–ò–Ø!)
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω - —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ!
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    if not model then
        print("‚ö†Ô∏è getMotor6Ds: –º–æ–¥–µ–ª—å = nil")
        return motors
    end
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
local function startLiveMotorCopying(original, copy)
    if not original or not copy then
        print("‚ö†Ô∏è startLiveMotorCopying: –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π = nil")
        return nil
    end
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ò–ó –†–ê–ë–û–ß–ï–ì–û –°–ö–†–ò–ü–¢–ê)
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CFrame (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        local newSize = originalSize * scaleFactor
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π CFrame –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleFactor) * (relativeCFrame - relativeCFrame.Position)
        local newCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏ CFrame
        local tween = TweenService:Create(part, tweenInfo, {
            Size = newSize,
            CFrame = newCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("üéâ –í—Å–µ", #parts, "—á–∞—Å—Ç–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞", scaleFactor .. "x")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    return true
end

-- === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0 (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–º–Ω—ã–π Anchored (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
    print("üß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED ===")
    local copyParts = getAllParts(petCopy)
    if copyParts and #copyParts > 0 then
        local rootPart = smartAnchoredManagement(copyParts)
        print("‚úÖ –£–º–Ω—ã–π Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∫–æ—Ä–µ–Ω—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏ –∫–æ–ø–∏–∏")
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Workspace
    if not petCopy or not petCopy.Parent then
        print("‚ùå –ö–æ–ø–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    end
    
    -- –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D –°–†–ê–ó–£ (–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!)
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ê–ù–ò–ú–ê–¶–ò–ò –°–†–ê–ó–£ ===")
    local animationConnection = startLiveMotorCopying(petModel, petCopy)
    
    if animationConnection then
        print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ö–æ–ø–∏—è —É–∂–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è!")
    else
        print("‚ö†Ô∏è –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    end
    
    -- –®–∞–≥ 4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –∫–æ–ø–∏–∏
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –ö–û–ü–ò–ò ===")
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\nüéâ === –£–°–ü–ï–•! ===")
    print("‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞")
    print("‚úÖ –ö–æ–ø–∏—è –¥–≤–∏–≥–∞–µ—Ç—Å—è –° –°–ê–ú–û–ì–û –ù–ê–ß–ê–õ–ê")
    print("üí° –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ–ø–∏–π - —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è!")
end

-- === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–í–¢–û–ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ï–í –ò–ó WORKSPACE.VISUALS ===

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
local function createAnimatedCopyAtPosition(originalPet, targetPosition)
    print("\nüîÑ === –°–û–ó–î–ê–ù–ò–ï –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ô –ö–û–ü–ò–ò –ù–ê –ú–ï–°–¢–ï –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    print("üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü:", originalPet.Name)
    print("üìç –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:", targetPosition)
    
    -- –®–∞–≥ 1: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é
    local petCopy = deepCopyModel(originalPet)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return nil
    end
    
    -- –®–∞–≥ 2: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é —Ç–æ—á–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    if petCopy.PrimaryPart then
        petCopy:SetPrimaryPartCFrame(CFrame.new(targetPosition))
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (PrimaryPart)")
    elseif petCopy:FindFirstChild("RootPart") then
        petCopy.RootPart.Position = targetPosition
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (RootPart)")
    else
        -- –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é BasePart –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –µ—ë
        local firstPart = petCopy:FindFirstChildOfClass("BasePart")
        if firstPart then
            firstPart.Position = targetPosition
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å)")
        end
    end
    
    -- –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–º–Ω—ã–π Anchored
    local copyParts = getAllParts(petCopy)
    if copyParts and #copyParts > 0 then
        local rootPart = smartAnchoredManagement(copyParts)
        print("‚úÖ –£–º–Ω—ã–π Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–π –∫–æ–ø–∏–∏")
    end
    
    -- –®–∞–≥ 4: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –°–†–ê–ó–£
    local animationConnection = startLiveMotorCopying(originalPet, petCopy)
    if animationConnection then
        print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ—â–∞—é—â–µ–π –∫–æ–ø–∏–∏!")
    else
        print("‚ö†Ô∏è –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –Ω–æ –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    end
    
    -- –®–∞–≥ 5: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
    wait(0.2) -- –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if scaleSuccess then
        print("‚úÖ –ó–∞–º–µ—â–∞—é—â–∞—è –∫–æ–ø–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∞ –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∞!")
        return petCopy
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return petCopy
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
local function isPetModel(model)
    -- 1. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å Model
    if not model:IsA("Model") then return false end
    
    -- 2. –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï –ö–û–ü–ò–ò (—Å _COPY, _SCALED, UUID, —Ñ–∏–≥—É—Ä–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏)
    local modelName = model.Name
    if modelName:find("_COPY") or modelName:find("_SCALED") or modelName:find("SCALED_COPY") or 
       modelName:find("ANIMATED_COPY") or modelName:find("{") or modelName:find("}") or
       modelName:find("-") and #modelName > 10 then -- UUID –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ —Å —Ç–∏—Ä–µ
        return false
    end
    
    -- 3. –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–≤–∫–ª—é—á–∞—è –º–µ–Ω—è)
    for _, p in pairs(Players:GetPlayers()) do
        if modelName == p.Name or modelName:find(p.Name) then
            return false
        end
    end
    
    -- 4. –ò—Å–∫–ª—é—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    local EXCLUDED_NAMES = {
        "EggExplode", "CraftingTables", "EventCraftingWorkBench", "Fruit", "Tree", 
        "Bush", "Platform", "Stand", "Bench", "Table", "Chair", "Decoration",
        "Egg", "Tool", "Handle", "Part", "Union", "Accessory", "Hat"
    }
    
    for _, excluded in pairs(EXCLUDED_NAMES) do
        if modelName:find(excluded) then return false end
    end
    
    -- 5. –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–≥—Ä–æ–∫–æ–≤
    if modelName:find("%[") and modelName:find("KG") and modelName:find("Age") then
        return false
    end
    
    -- 6. –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ê–°–¢–û–Ø–©–ò–ô –ø–∏—Ç–æ–º–µ—Ü (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞)
    if #modelName > 15 then return false end -- –ü–∏—Ç–æ–º—Ü—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞
    
    -- 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—à–µ–π
    local meshCount = 0
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") or obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
        end
    end
    
    if meshCount < 1 then return false end
    
    -- 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
    if #model:GetChildren() < 5 then return false end
    
    -- 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∏–≥—Ä–æ–∫–∞
    local playerChar = player.Character
    if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
            if distance > CONFIG.SEARCH_RADIUS then return false end
        end
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã –ø–∏—Ç–æ–º—Ü–µ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û - –ö–ê–ö –†–£–ß–ù–ê–Ø –ö–û–ü–ò–Ø)
local function startWorkspaceScanning()
    print("\nüîç === –ó–ê–ü–£–°–ö –ê–í–¢–û–ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ï–í (–ö–ê–ö –†–£–ß–ù–ê–Ø –ö–û–ü–ò–Ø) ===")
    print("üí° –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –í –§–ò–ì–£–†–ù–´–• –°–ö–û–ë–ö–ê–•, –∫–∞–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏!")
    
    local processedModels = {}
    local foundPetModels = {}
    local createdCopiesCount = 0 -- –°—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–ø–∏–π
    local MAX_COPIES = 3 -- –ú–∞–∫—Å–∏–º—É–º –∫–æ–ø–∏–π –∑–∞ —Å–µ—Å—Å–∏—é
    local processedPetNames = {} -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∞–º
    local scanStartTime = tick()
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - scanStartTime
        
        -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if elapsed > 300 then -- 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            print("‚è∞ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
            connection:Disconnect()
            return
        end
        
        -- –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–ø–∏–π
        if createdCopiesCount >= MAX_COPIES then
            print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–ø–∏–π (" .. MAX_COPIES .. "). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
            connection:Disconnect()
            return
        end
        
        -- –£–ë–ò–†–ê–ï–ú –ò–ù–¢–ï–†–í–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï - —Å–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        -- if elapsed % 0.1 > 0.05 then
        --     return
        -- end
        
        -- –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ workspace –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if math.floor(elapsed) % 5 == 0 and elapsed > 1 then -- –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            print("\nüîç === –û–¢–õ–ê–î–ö–ê –ê–í–¢–û–ó–ê–ú–ï–ù–´ (" .. string.format("%.1f —Å–µ–∫", elapsed) .. ") ===")
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–ï–°–¨ WORKSPACE (–ò–©–ï–ú –ü–†–û–°–¢–´–ï –ò–ú–ï–ù–ê!)
            print("üìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º –≤–µ—Å—å Workspace –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤:")
            local petCount = 0
            for _, child in pairs(Workspace:GetDescendants()) do
                if child:IsA("Model") and child ~= player.Character then
                    local childName = child.Name:lower()
                    local isPet = childName == "golden lab" or childName == "bunny" or childName == "dog" or childName == "cat" or childName == "rabbit"
                    if isPet then
                        petCount = petCount + 1
                        print("  üêæ –ü–ò–¢–û–ú–ï–¶:", child.Name, "- –†–æ–¥–∏—Ç–µ–ª—å:", child.Parent and child.Parent.Name or "nil")
                    end
                end
            end
            if petCount == 0 then
                print("‚ùå –ü–∏—Ç–æ–º—Ü—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ Workspace!")
            end
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º UUID –º–æ–¥–µ–ª–∏
            local uuidCount = 0
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
                    uuidCount = uuidCount + 1
                    if uuidCount <= 3 then -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print("  üîë UUID –º–æ–¥–µ–ª—å:", obj.Name)
                    end
                end
            end
            print("üìä –í—Å–µ–≥–æ UUID –º–æ–¥–µ–ª–µ–π:", uuidCount)
        end
        
        -- –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞ (—Å–Ω–∞—á–∞–ª–∞ –≤ visuals, –ø–æ—Ç–æ–º UUID)
        local foundPet = nil
        local foundVisualsPet = nil
        
        -- –®–∞–≥ 1: –í–û–ó–í–†–ê–©–ê–ï–ú –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj ~= player.Character and not processedPetNames[obj.Name] then
                
                -- –ö–†–ò–¢–ò–ß–ù–û: –£ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ü–†–û–°–¢–û–ï –ò–ú–Ø (–ù–ï UUID!)
                local objName = obj.Name:lower()
                if objName == "golden lab" or objName == "bunny" or objName == "dog" or 
                   objName == "cat" or objName == "rabbit" or objName:find("lab") then
                    foundVisualsPet = obj
                    print("üé≠ –ù–ê–ô–î–ï–ù –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –≤ Workspace:", obj.Name, "- –†–æ–¥–∏—Ç–µ–ª—å:", obj.Parent and obj.Parent.Name or "nil")
                    break
                end
            end
        end
        
        -- –®–∞–≥ 2: –ò–©–ï–ú UUID –ü–ò–¢–û–ú–¶–ê –ü–û –†–ê–°–°–¢–û–Ø–ù–ò–Æ (–ö–ê–ö –í –†–£–ß–ù–û–ô –ö–û–ü–ò–ò!)
        if foundVisualsPet then
            print("üîç –ò—â–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–∫–∞–∫ –≤ findAndScalePet)...")
            
            -- –¢–û–ß–ù–û –ö–û–ü–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó findAndScalePet()!
            for _, obj in pairs(Workspace:GetDescendants()) do
                if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
                    local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                    if success then
                        local playerChar = player.Character
                        if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
                            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
                            if distance <= CONFIG.SEARCH_RADIUS then
                                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—à–∏ (–∫–∞–∫ –≤ —Ä—É—á–Ω–æ–π –∫–æ–ø–∏–∏)
                                local meshes = 0
                                for _, part in pairs(obj:GetDescendants()) do
                                    if part:IsA("MeshPart") or part:IsA("SpecialMesh") then
                                        meshes = meshes + 1
                                    end
                                end
                                
                                foundPet = obj
                                print("üîë –ù–ê–ô–î–ï–ù UUID –ø–∏—Ç–æ–º–µ—Ü –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:", obj.Name, "(–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", math.floor(distance), ", –ú–µ—à–µ–π:", meshes, ")")
                                break
                            end
                        end
                    end
                end
            end
        end
        
        -- –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–±–∞ –ø–∏—Ç–æ–º—Ü–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        if foundPet and foundVisualsPet then
            -- –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
            processedPetNames[foundPet.Name] = true
            processedPetNames[foundVisualsPet.Name] = true
            
            print("\nüéâ === –ù–ê–ô–î–ï–ù–ê –ü–ê–†–ê –ü–ò–¢–û–ú–¶–ï–í –î–õ–Ø –ê–í–¢–û–ó–ê–ú–ï–ù–´ ===")
            print("üîë UUID –ø–∏—Ç–æ–º–µ—Ü:", foundPet.Name)
            print("üé≠ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü:", foundVisualsPet.Name)
            
            -- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
            local visualPosition = nil
            local success, visualCFrame = pcall(function() return foundVisualsPet:GetModelCFrame() end)
            if success then
                visualPosition = visualCFrame.Position
            elseif foundVisualsPet.PrimaryPart then
                visualPosition = foundVisualsPet.PrimaryPart.Position
            end
            
            if visualPosition then
                print("üìç –ü–æ–∑–∏—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã:", visualPosition)
                
                -- –ú–ì–ù–û–í–ï–ù–ù–û –°–ö–†–´–í–ê–ï–ú –í–ò–ó–£–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê!
                print("‚ö° –ú–ì–ù–û–í–ï–ù–ù–û —Å–∫—Ä—ã–≤–∞—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", foundVisualsPet.Name)
                
                -- –ú–µ—Ç–æ–¥ 1: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–º
                for _, part in pairs(foundVisualsPet:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Transparency = 1
                        part.CanCollide = false
                    elseif part:IsA("Decal") or part:IsA("Texture") then
                        part.Transparency = 1
                    end
                end
                
                -- –ú–µ—Ç–æ–¥ 2: –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–¥ –∑–µ–º–ª—é
                if foundVisualsPet.PrimaryPart then
                    foundVisualsPet.PrimaryPart.Position = foundVisualsPet.PrimaryPart.Position - Vector3.new(0, 1000, 0)
                elseif foundVisualsPet:FindFirstChild("RootPart") then
                    foundVisualsPet.RootPart.Position = foundVisualsPet.RootPart.Position - Vector3.new(0, 1000, 0)
                end
                
                -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é UUID –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞ –º–µ—Å—Ç–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ
                local animatedCopy = createAnimatedCopyAtPosition(foundPet, visualPosition)
                    
                if animatedCopy then
                    -- –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–ø–∏–π
                    createdCopiesCount = createdCopiesCount + 1
                    
                    -- –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –í–†–ï–ú–Ø –ñ–ò–ó–ù–ò –ö–û–ü–ò–ò –° –û–†–ò–ì–ò–ù–ê–õ–û–ú
                    print("‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏...")
                    
                    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ handle
                    spawn(function()
                        while foundVisualsPet and foundVisualsPet.Parent do
                            wait(0.2) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.2 —Å–µ–∫—É–Ω–¥—ã (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
                        end
                        
                        -- –ö–æ–≥–¥–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑, —É–¥–∞–ª—è–µ–º –∫–æ–ø–∏—é
                        if animatedCopy and animatedCopy.Parent then
                            print("‚ú® –û—Ä–∏–≥–∏–Ω–∞–ª –∏—Å—á–µ–∑ - —É–¥–∞–ª—è—é –∫–æ–ø–∏—é")
                            animatedCopy:Destroy()
                        end
                        
                        -- –ù–û–í–û–ï: –ó–∞–º–µ–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ handle –Ω–∞ Dragonfly –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
                        wait(2) -- –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                        print("üîÑ –ò—â—É –ø–∏—Ç–æ–º—Ü–∞ –≤ handle –¥–ª—è –∑–∞–º–µ–Ω—ã...")
                        
                        local playerChar = player.Character
                        if playerChar then
                            local handle = playerChar:FindFirstChild("Handle")
                            if handle then
                                print("üìç Handle –Ω–∞–π–¥–µ–Ω, —Å–æ–¥–µ—Ä–∂–∏—Ç:")
                                for _, obj in pairs(handle:GetChildren()) do
                                    print("  - " .. obj.Name .. " (" .. obj.ClassName .. ")")
                                end
                                
                                -- –ò—â–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ handle (–ù–ï Dragonfly)
                                for _, obj in pairs(handle:GetChildren()) do
                                    if obj:IsA("Model") and obj.Name:lower() ~= "dragonfly" then
                                        print("üóëÔ∏è –£–±–∏—Ä–∞—é –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ handle:", obj.Name)
                                        obj:Destroy() -- –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
                                        break
                                    end
                                end
                                
                                -- –ò—â–µ–º Dragonfly –≤ WORKSPACE (–≥–¥–µ –æ–±—ã—á–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–∏—Ç–æ–º—Ü—ã)
                                print("üîç –ò—â—É Dragonfly –≤ Workspace...")
                                
                                for _, obj in pairs(Workspace:GetDescendants()) do
                                    if obj:IsA("Model") and obj.Name:lower():find("dragonfly") and obj ~= playerChar then
                                        print("üêâ –ù–∞–π–¥–µ–Ω Dragonfly –≤ Workspace - –ø–µ—Ä–µ–º–µ—â–∞—é –≤ handle")
                                        
                                        -- –ü–µ—Ä–µ–º–µ—â–∞–µ–º (–Ω–µ –∫–ª–æ–Ω–∏—Ä—É–µ–º) Dragonfly –≤ handle
                                        obj.Parent = handle
                                        
                                        -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ —Ä—É–∫–µ
                                        if obj.PrimaryPart then
                                            obj.PrimaryPart.CFrame = handle.CFrame
                                        elseif obj:FindFirstChild("RootPart") then
                                            obj.RootPart.CFrame = handle.CFrame
                                        end
                                        
                                        print("‚úÖ Dragonfly —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ handle!")
                                        return
                                    end
                                end
                                
                                -- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Workspace, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                                print("üîç –ò—â—É Dragonfly –≤ –¥—Ä—É–≥–∏—Ö –ª–æ–∫–∞—Ü–∏—è—Ö...")
                                local searchLocations = {
                                    player,
                                    playerChar,
                                    game.ReplicatedStorage
                                }
                                
                                for _, location in pairs(searchLocations) do
                                    if location then
                                        for _, item in pairs(location:GetDescendants()) do
                                            if item:IsA("Model") and item.Name:lower():find("dragonfly") then
                                                print("üêâ –ù–∞–π–¥–µ–Ω Dragonfly –≤", location.Name, "- –∫–ª–æ–Ω–∏—Ä—É—é –≤ handle")
                                                
                                                local dragonflyClone = item:Clone()
                                                dragonflyClone.Parent = handle
                                                
                                                if dragonflyClone.PrimaryPart then
                                                    dragonflyClone.PrimaryPart.CFrame = handle.CFrame
                                                end
                                                
                                                print("‚úÖ Dragonfly —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—â–µ–Ω –≤ handle!")
                                                return
                                            end
                                        end
                                    end
                                end
                                
                                print("‚ö†Ô∏è Dragonfly –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ")
                            else
                                print("‚ö†Ô∏è Handle –Ω–µ –Ω–∞–π–¥–µ–Ω —É –∏–≥—Ä–æ–∫–∞")
                            end
                        end
                    end)
                        
                        -- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ–¥ –∑–µ–º–ª—é
                        if foundVisualsPet.PrimaryPart then
                            foundVisualsPet:SetPrimaryPartCFrame(foundVisualsPet.PrimaryPart.CFrame - Vector3.new(0, 1000, 0))
                        end
                        
                        print("‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å–∫—Ä—ã—Ç!")
                        print("üéâ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - UUID –ø–∏—Ç–æ–º–µ—Ü —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω–∞ –º–µ—Å—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ!")
                        print("üìä –°–æ–∑–¥–∞–Ω–æ –∫–æ–ø–∏–π: " .. createdCopiesCount .. "/" .. MAX_COPIES)
                        
                        -- –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                        table.insert(foundPetModels, {
                            name = foundPet.Name .. " -> " .. foundVisualsPet.Name,
                            foundTime = elapsed,
                            animatedCopy = animatedCopy
                        })
                    else
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é UUID –ø–∏—Ç–æ–º—Ü–∞")
                    end
                else
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
                end
            else
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –¥–ª—è –∑–∞–º–µ–Ω—ã")
            end
        end
    ) -- –ó–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –¥–ª—è RunService.Heartbeat:Connect(function()
        
    -- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–í–ù–ï —Ñ—É–Ω–∫—Ü–∏–∏)
    spawn(function()
        while true do
            wait(10)
            if #foundPetModels > 0 then
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤:", #foundPetModels)
            end
        end
    end)
    
    print("üîÑ –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Workspace –∞–∫—Ç–∏–≤–Ω–æ!")
    print("üí° –í—Å–µ –Ω–æ–≤—ã–µ –ø–∏—Ç–æ–º—Ü—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏")
    print("üéØ –û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞!")
    
    return connection
end

-- === –ú–û–ù–ò–¢–û–†–ò–ù–ì CHARACTER –î–õ–Ø –ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ï–í –í –†–£–ö–ï ===
local function startCharacterPetMonitoring()
    print("\nü§è === –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê CHARACTER –î–õ–Ø –ó–ê–ú–ï–ù–´ –ü–ò–¢–û–ú–¶–ï–í –í –†–£–ö–ï ===")
    print("üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ pet Models –≤ Character (sibling –∫ Tool)...")
    
    local lastCharacterChildren = {}
    local characterConnection
    local frameCount = 0
    
    characterConnection = RunService.Heartbeat:Connect(function()
        frameCount = frameCount + 1
        
        local playerChar = player.Character
        if not playerChar then return end
        
        -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏—Ö –¥–µ—Ç–µ–π Character
        local currentChildren = {}
        for _, obj in pairs(playerChar:GetChildren()) do
            currentChildren[obj.Name] = obj
        end
        
        -- –ò—â–µ–º –Ω–æ–≤—ã–µ pet Models –≤ Character
        for name, obj in pairs(currentChildren) do
            if not lastCharacterChildren[name] and obj:IsA("Model") then
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –∏–∑ —è–π—Ü–∞ (–ù–ï UUID!)
                if (name:find("Golden Lab") or name:find("Dog") or name:find("Bunny") or 
                    name:find("Cat") or name:find("Rabbit")) and 
                   not name:find("%{") and not name:find("%}") then
                    
                    print("\nü•ö === –ü–ò–¢–û–ú–ï–¶ –ò–ó –Ø–ô–¶–ê –û–ë–ù–ê–†–£–ñ–ï–ù –í CHARACTER ===")
                    print("üìõ –ò–º—è –ø–∏—Ç–æ–º—Ü–∞:", name)
                    print("‚è∞ –í—Ä–µ–º—è:", os.date("%H:%M:%S"))
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Tool
                    local correspondingTool = nil
                    for _, tool in pairs(playerChar:GetChildren()) do
                        if tool:IsA("Tool") and tool.Name:find("Golden Lab") or tool.Name:find("Dog") or 
                           tool.Name:find("Bunny") or tool.Name:find("Cat") or tool.Name:find("Rabbit") then
                            correspondingTool = tool
                            break
                        end
                    end
                    
                    if correspondingTool then
                        print("üîß –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Tool:", correspondingTool.Name)
                        
                        -- –ñ–¥–µ–º 0.5 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å
                        spawn(function()
                            wait(0.5)
                            
                            print("üîç –ù–∞—á–∏–Ω–∞—é –∑–∞–º–µ–Ω—É –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ...")
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            if not obj or not obj.Parent then
                                print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑ –∏–∑ Character")
                                return
                            end
                            
                            -- –ò—â–µ–º Handle –≤ Tool
                            local handle = correspondingTool:FindFirstChild("Handle")
                            if not handle then
                                print("‚ùå Handle –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Tool")
                                return
                            end
                            
                            -- –ò—â–µ–º –í–°–ï —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Handle (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
                            print("üîç –ò—â—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Handle...")
                            local handleWeld = nil
                            local allWelds = {}
                            
                            for _, weld in pairs(playerChar:GetDescendants()) do
                                if weld:IsA("Weld") or weld:IsA("WeldConstraint") or weld:IsA("Motor6D") then
                                    table.insert(allWelds, weld)
                                    
                                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Handle
                                    if (weld.Part0 == handle or weld.Part1 == handle) then
                                        print("üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Handle:", weld.Name)
                                        print("  Part0:", weld.Part0 and weld.Part0.Name or "nil")
                                        print("  Part1:", weld.Part1 and weld.Part1.Name or "nil")
                                        
                                        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å –ø–∏—Ç–æ–º—Ü–µ–º
                                        local otherPart = weld.Part0 == handle and weld.Part1 or weld.Part0
                                        if otherPart and otherPart.Parent == obj then
                                            handleWeld = weld
                                            print("‚úÖ –≠—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –Ω–∞—à–∏–º –ø–∏—Ç–æ–º—Ü–µ–º!")
                                        end
                                    end
                                end
                            end
                            
                            print("üìä –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ:", #allWelds)
                            
                            if not handleWeld then
                                print("‚ùå –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Handle —Å –ø–∏—Ç–æ–º—Ü–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                print("üîç –ü—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–∏—Ç–æ–º—Ü–µ–º...")
                                
                                -- –ò—â–µ–º –ª—é–±–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —á–∞—Å—Ç—è–º–∏ –ø–∏—Ç–æ–º—Ü–∞
                                for _, weld in pairs(allWelds) do
                                    local part0Parent = weld.Part0 and weld.Part0.Parent
                                    local part1Parent = weld.Part1 and weld.Part1.Parent
                                    
                                    if part0Parent == obj or part1Parent == obj then
                                        handleWeld = weld
                                        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:", weld.Name)
                                        break
                                    end
                                end
                            end
                            
                            if not handleWeld then
                                print("‚ùå –ù–∏–∫–∞–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø–∏—Ç–æ–º—Ü–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                            end
                            
                            if handleWeld then
                                print("üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:", handleWeld.Name)
                            end
                            
                            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
                            local petCFrame = nil
                            if obj.PrimaryPart then
                                petCFrame = obj.PrimaryPart.CFrame
                                print("üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ PrimaryPart:", petCFrame.Position)
                            elseif obj:FindFirstChild("RootPart") then
                                petCFrame = obj.RootPart.CFrame
                                print("üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —á–µ—Ä–µ–∑ RootPart:", petCFrame.Position)
                            else
                                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ RootPart –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                            end
                            
                            -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ UUID
                            local petType = nil
                            if name:find("Golden Lab") then
                                petType = "Golden Lab"
                            elseif name:find("Dog") then
                                petType = "Dog"
                            elseif name:find("Bunny") then
                                petType = "Bunny"
                            elseif name:find("Cat") then
                                petType = "Cat"
                            elseif name:find("Rabbit") then
                                petType = "Rabbit"
                            end
                            
                            if not petType then
                                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –∏–º–µ–Ω–∏:", name)
                                return
                            end
                            
                            print("üè∑Ô∏è –¢–∏–ø –ø–∏—Ç–æ–º—Ü–∞:", petType)
                            
                            -- –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π UUID –ø–∏—Ç–æ–º–µ—Ü –≤ Workspace (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
                            print("üîç –ò—â—É UUID –ø–∏—Ç–æ–º—Ü–∞ —Ç–∏–ø–∞ '" .. petType .. "' –≤ Workspace...")
                            
                            local uuidPet = nil
                            local playerPos = playerChar.HumanoidRootPart.Position
                            local foundUUIDs = {}
                            
                            -- –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –í–°–ï UUID –ø–∏—Ç–æ–º—Ü—ã —Ä—è–¥–æ–º
                            for _, wsObj in pairs(Workspace:GetDescendants()) do
                                if wsObj:IsA("Model") and wsObj.Name:find("%{") and wsObj.Name:find("%}") then
                                    local success, modelCFrame = pcall(function() return wsObj:GetModelCFrame() end)
                                    if success then
                                        local distance = (modelCFrame.Position - playerPos).Magnitude
                                        if distance <= CONFIG.SEARCH_RADIUS then
                                            -- –°—á–∏—Ç–∞–µ–º MeshParts
                                            local meshCount = 0
                                            for _, desc in pairs(wsObj:GetDescendants()) do
                                                if desc:IsA("MeshPart") then
                                                    meshCount = meshCount + 1
                                                end
                                            end
                                            
                                            table.insert(foundUUIDs, {
                                                model = wsObj,
                                                distance = distance,
                                                meshCount = meshCount,
                                                name = wsObj.Name
                                            })
                                            
                                            print("üîë –ù–∞–π–¥–µ–Ω UUID:", wsObj.Name)
                                            print("    üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è:", math.floor(distance))
                                            print("    üß© MeshParts:", meshCount)
                                        end
                                    end
                                end
                            end
                            
                            print("üìä –í—Å–µ–≥–æ UUID –ø–∏—Ç–æ–º—Ü–µ–≤ –Ω–∞–π–¥–µ–Ω–æ:", #foundUUIDs)
                            
                            -- –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π UUID –ø–∏—Ç–æ–º–µ—Ü (—Å–Ω–∞—á–∞–ª–∞ —Å 0 MeshParts, –ø–æ—Ç–æ–º –ª—é–±–æ–π)
                            for _, uuid in pairs(foundUUIDs) do
                                if uuid.name:find(petType) and uuid.meshCount == 0 then
                                    uuidPet = uuid.model
                                    print("üéØ –í—ã–±—Ä–∞–Ω UUID —Å 0 MeshParts:", uuid.name)
                                    break
                                end
                            end
                            
                            -- –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å 0 MeshParts, –±–µ—Ä–µ–º –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
                            if not uuidPet then
                                for _, uuid in pairs(foundUUIDs) do
                                    if uuid.name:find(petType) then
                                        uuidPet = uuid.model
                                        print("üéØ –í—ã–±—Ä–∞–Ω UUID (–ª—é–±–æ–π):", uuid.name, "MeshParts:", uuid.meshCount)
                                        break
                                    end
                                end
                            end
                            
                            -- –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π UUID
                            if not uuidPet and #foundUUIDs > 0 then
                                uuidPet = foundUUIDs[1].model
                                print("üéØ –í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π UUID:", foundUUIDs[1].name)
                            end
                            
                            if not uuidPet then
                                print("‚ùå UUID –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º")
                                print("üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –±–ª–∏–∂–µ –∫ UUID –ø–∏—Ç–æ–º—Ü–∞–º")
                                return
                            end
                            
                            print("‚ö° === –ù–ê–ß–ò–ù–ê–Æ –ó–ê–ú–ï–ù–£ –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===")
                            
                            -- –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–∏—Ç–æ–º—Ü–µ–º –∏–∑ —è–π—Ü–∞ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ)
                            if handleWeld then
                                handleWeld:Destroy()
                                print("üóëÔ∏è –°—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:", handleWeld.Name)
                            else
                                print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞—é –∑–∞–º–µ–Ω—É")
                            end
                            
                            -- –£–¥–∞–ª—è–µ–º –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ —è–π—Ü–∞
                            obj:Destroy()
                            print("üóëÔ∏è –ü–∏—Ç–æ–º–µ—Ü –∏–∑ —è–π—Ü–∞ —É–¥–∞–ª–µ–Ω –∏–∑ Character:", name)
                            
                            -- –ö–ª–æ–Ω–∏—Ä—É–µ–º UUID –ø–∏—Ç–æ–º—Ü–∞ –≤ Character
                            local uuidClone = uuidPet:Clone()
                            uuidClone.Name = uuidPet.Name -- –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –∏–º—è
                            uuidClone.Parent = playerChar
                            print("üìã UUID –ø–∏—Ç–æ–º–µ—Ü –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ Character:", uuidClone.Name)
                            
                            -- –ñ–¥–µ–º —á—Ç–æ–±—ã –∫–ª–æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
                            wait(0.1)
                            
                            -- –ù–∞—Ö–æ–¥–∏–º RootPart –∫–ª–æ–Ω–∞
                            local cloneRootPart = nil
                            if uuidClone.PrimaryPart then
                                cloneRootPart = uuidClone.PrimaryPart
                                print("üìç –ò—Å–ø–æ–ª—å–∑—É—é PrimaryPart –∫–∞–∫ RootPart:", cloneRootPart.Name)
                            elseif uuidClone:FindFirstChild("RootPart") then
                                cloneRootPart = uuidClone:FindFirstChild("RootPart")
                                print("üìç –ù–∞–π–¥–µ–Ω RootPart:", cloneRootPart.Name)
                            else
                                -- –ò—â–µ–º –ª—é–±—É—é BasePart –∫–∞–∫ RootPart
                                for _, part in pairs(uuidClone:GetChildren()) do
                                    if part:IsA("BasePart") then
                                        cloneRootPart = part
                                        print("üìç –ò—Å–ø–æ–ª—å–∑—É—é –∫–∞–∫ RootPart:", part.Name)
                                        break
                                    end
                                end
                            end
                            
                            if not cloneRootPart then
                                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω RootPart —É –∫–ª–æ–Ω–∞ UUID –ø–∏—Ç–æ–º—Ü–∞")
                                return
                            end
                            
                            -- –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º Weld, –ü–û–¢–û–ú —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                            local newWeld = Instance.new("Weld")
                            newWeld.Name = "Handle_RootPart_WELD"
                            newWeld.Part0 = handle
                            newWeld.Part1 = cloneRootPart
                            
                            -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CFrame –¥–ª—è Weld
                            if petCFrame then
                                -- –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                                local relativeC0 = handle.CFrame:Inverse() * petCFrame
                                newWeld.C0 = CFrame.new() -- Handle –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
                                newWeld.C1 = relativeC0 -- –ü–∏—Ç–æ–º–µ—Ü –≤ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Handle
                                print("üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã CFrame –¥–ª—è Weld")
                            end
                            
                            newWeld.Parent = playerChar
                            print("üîó –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", newWeld.Name)
                            
                            -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è —Ä—É–∫–∏
                            cloneRootPart.Anchored = false
                            cloneRootPart.CanCollide = false
                            
                            -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                            for _, part in pairs(uuidClone:GetDescendants()) do
                                if part:IsA("BasePart") and part ~= cloneRootPart then
                                    part.Anchored = false
                                    part.CanCollide = false
                                end
                            end
                            
                            print("‚öôÔ∏è –§–∏–∑–∏–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Ä—É–∫–∏")
                            
                            -- –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                            print("üé≠ –ó–∞–ø—É—Å–∫–∞—é –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏...")
                            startLiveMotorCopying(uuidPet, uuidClone)
                            
                            -- –ö–†–ò–¢–ò–ß–ù–û: –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Weld –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º
                            wait(0.2)
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Weld —Ä–∞–±–æ—Ç–∞–µ—Ç
                            if newWeld and newWeld.Part0 and newWeld.Part1 then
                                print("‚úÖ Weld –∞–∫—Ç–∏–≤–µ–Ω:", newWeld.Part0.Name, "‚Üî", newWeld.Part1.Name)
                            else
                                print("‚ùå Weld –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                            end
                            
                            -- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ —Ä—É–∫–µ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
                            print("üîí –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ UUID –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ...")
                            spawn(function()
                                local holdConnection
                                holdConnection = RunService.Heartbeat:Connect(function()
                                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                    if not uuidClone or not uuidClone.Parent then
                                        if holdConnection then
                                            holdConnection:Disconnect()
                                        end
                                        return
                                    end
                                    
                                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–æ–Ω –≤ Character
                                    if uuidClone.Parent ~= playerChar then
                                        print("üîí –í–æ–∑–≤—Ä–∞—â–∞—é UUID –ø–∏—Ç–æ–º—Ü–∞ –≤ Character")
                                        uuidClone.Parent = playerChar
                                    end
                                    
                                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                                    if not newWeld or not newWeld.Parent or newWeld.Part0 ~= handle or newWeld.Part1 ~= cloneRootPart then
                                        print("üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Handle ‚Üî UUID –ø–∏—Ç–æ–º–µ—Ü")
                                        
                                        -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                                        if newWeld then
                                            newWeld:Destroy()
                                        end
                                        
                                        -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                                        newWeld = Instance.new("Weld")
                                        newWeld.Name = "Handle_RootPart_WELD"
                                        newWeld.Part0 = handle
                                        newWeld.Part1 = cloneRootPart
                                        newWeld.Parent = playerChar
                                        
                                        -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ Weld
                                        if petCFrame then
                                            newWeld.C0 = CFrame.new()
                                            newWeld.C1 = handle.CFrame:Inverse() * petCFrame
                                        end
                                    end
                                    
                                    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ RootPart –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                                    if cloneRootPart then
                                        cloneRootPart.Anchored = false
                                        cloneRootPart.CanCollide = false
                                        
                                        -- –ï—Å–ª–∏ Weld –Ω–µ –¥–µ—Ä–∂–∏—Ç –ø–æ–∑–∏—Ü–∏—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                                        if petCFrame and (cloneRootPart.Position - petCFrame.Position).Magnitude > 5 then
                                            print("üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞")
                                            cloneRootPart.CFrame = petCFrame
                                        end
                                    end
                                end)
                            end)
                            
                            print("‚úÖ === –ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï –ó–ê–í–ï–†–®–ï–ù–ê ===")
                            print("üîë UUID –ø–∏—Ç–æ–º–µ—Ü —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–µ–ø–µ—Ä—å –≤ —Ä—É–∫–µ!")
                        end)
                    else
                        print("‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Tool –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    end
                end
            end
        end
        
        -- –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        lastCharacterChildren = currentChildren
        
        -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if frameCount % 1800 == 0 then -- –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            print("\nüìä === –ú–û–ù–ò–¢–û–†–ò–ù–ì CHARACTER ===")
            print("‚è∞ –í—Ä–µ–º—è:", os.date("%H:%M:%S"))
            print("üéØ –ö–∞–¥—Ä:", frameCount)
            
            local toolCount = 0
            local petCount = 0
            for _, obj in pairs(playerChar:GetChildren()) do
                if obj:IsA("Tool") then
                    toolCount = toolCount + 1
                elseif obj:IsA("Model") and (obj.Name:find("Golden") or obj.Name:find("Dog") or obj.Name:find("Bunny")) then
                    petCount = petCount + 1
                end
            end
            
            print("üîß Tools –≤ Character:", toolCount)
            print("üêæ Pet Models –≤ Character:", petCount)
        end
    end)
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Character –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ —Ä—É–∫–µ –∑–∞–ø—É—â–µ–Ω!")
    return characterConnection
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI (–° –ó–ê–©–ò–¢–û–ô –û–¢ –û–®–ò–ë–û–ö)
local function createGUI()
    local success, errorMsg = pcall(function()
        local playerGui = player:WaitForChild("PlayerGui")
        
        local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
        if oldGui then
            oldGui:Destroy()
            wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        end
        
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "PetScalerV2GUI"
        screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 120) -- –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–Ω–æ–ø–∫–∏
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    -- –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏
    local manualButton = Instance.new("TextButton")
    manualButton.Name = "ManualScaleButton"
    manualButton.Size = UDim2.new(0, 230, 0, 30)
    manualButton.Position = UDim2.new(0, 10, 0, 10)
    manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    manualButton.BorderSizePixel = 0
    manualButton.Text = "üî• –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏"
    manualButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    manualButton.TextSize = 12
    manualButton.Font = Enum.Font.SourceSansBold
    manualButton.Parent = frame
    
    -- –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    local autoButton = Instance.new("TextButton")
    autoButton.Name = "AutoReplaceButton"
    autoButton.Size = UDim2.new(0, 230, 0, 30)
    autoButton.Position = UDim2.new(0, 10, 0, 45)
    autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
    autoButton.BorderSizePixel = 0
    autoButton.Text = "ü•ö –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–§–§)"
    autoButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    autoButton.TextSize = 12
    autoButton.Font = Enum.Font.SourceSansBold
    autoButton.Parent = frame
    
    -- –ö–Ω–æ–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Character (–∑–∞–º–µ–Ω–∞ –≤ —Ä—É–∫–µ)
    local handButton = Instance.new("TextButton")
    handButton.Name = "HandReplaceButton"
    handButton.Size = UDim2.new(0, 230, 0, 30)
    handButton.Position = UDim2.new(0, 10, 0, 80)
    handButton.BackgroundColor3 = Color3.fromRGB(128, 0, 255)
    handButton.BorderSizePixel = 0
    handButton.Text = "ü§è –ó–∞–º–µ–Ω–∞ –≤ —Ä—É–∫–µ (–û–§–§)"
    handButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    handButton.TextSize = 12
    handButton.Font = Enum.Font.SourceSansBold
    handButton.Parent = frame
    
    -- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    local autoReplaceActive = false
    local visualsConnection = nil
    local handReplaceActive = false
    local characterConnection = nil
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    manualButton.MouseButton1Click:Connect(function()
        manualButton.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        manualButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            local success, errorMsg = pcall(function()
                main()
            end)
            
            if success then
                wait(3)
                manualButton.Text = "üî• –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏"
                manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            else
                print("‚ùå –û—à–∏–±–∫–∞ –≤ main():", errorMsg)
                manualButton.Text = "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                manualButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
        end)
    end)
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    autoButton.MouseButton1Click:Connect(function()
        if not autoReplaceActive then
            -- –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É
            autoButton.Text = "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥..."
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
            
            spawn(function()
                visualsConnection = startWorkspaceScanning()
                autoReplaceActive = true
                
                autoButton.Text = "üîÑ –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–ù)"
                autoButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            end)
        else
            -- –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É
            if visualsConnection then
                visualsConnection:Disconnect()
                visualsConnection = nil
            end
            
            autoReplaceActive = false
            autoButton.Text = "ü•ö –ê–≤—Ç–æ–∑–∞–º–µ–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤ (–û–§–§)"
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
            
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ workspace.visuals –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        end
    end)
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Character (–∑–∞–º–µ–Ω–∞ –≤ —Ä—É–∫–µ)
    handButton.MouseButton1Click:Connect(function()
        if not handReplaceActive then
            -- –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Character
            handButton.Text = "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—É–∫–∏..."
            handButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
            
            spawn(function()
                characterConnection = startCharacterPetMonitoring()
                handReplaceActive = true
                
                handButton.Text = "ü§è –ó–∞–º–µ–Ω–∞ –≤ —Ä—É–∫–µ (–û–ù)"
                handButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            end)
        else
            -- –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Character
            if characterConnection then
                characterConnection:Disconnect()
                characterConnection = nil
            end
            
            handReplaceActive = false
            handButton.Text = "ü§è –ó–∞–º–µ–Ω–∞ –≤ —Ä—É–∫–µ (–û–§–§)"
            handButton.BackgroundColor3 = Color3.fromRGB(128, 0, 255)
            
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Character –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        end
    end)
    
    -- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    manualButton.MouseEnter:Connect(function()
        if manualButton.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            manualButton.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    manualButton.MouseLeave:Connect(function()
        if manualButton.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            manualButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    -- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∑–∞–º–µ–Ω—ã
    autoButton.MouseEnter:Connect(function()
        if autoButton.BackgroundColor3 == Color3.fromRGB(255, 165, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
        elseif autoButton.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    autoButton.MouseLeave:Connect(function()
        if autoButton.BackgroundColor3 == Color3.fromRGB(255, 140, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        elseif autoButton.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            autoButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    -- Hover —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—É–∫–∏
    handButton.MouseEnter:Connect(function()
        if handButton.BackgroundColor3 == Color3.fromRGB(128, 0, 255) then
            handButton.BackgroundColor3 = Color3.fromRGB(108, 0, 235)
        elseif handButton.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            handButton.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    handButton.MouseLeave:Connect(function()
        if handButton.BackgroundColor3 == Color3.fromRGB(108, 0, 235) then
            handButton.BackgroundColor3 = Color3.fromRGB(128, 0, 255)
        elseif handButton.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            handButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
        print("üíª PetScaler v2.0 GUI —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ä—É–∫–∏ —Å–æ–∑–¥–∞–Ω!")
    end)
    
    if not success then
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ GUI:", errorMsg)
        print("üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
        return false
    end
    
    return true
end

-- –ó–∞–ø—É—Å–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
local initSuccess, initError = pcall(function()
    local guiSuccess = createGUI()
    if not guiSuccess then
        error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GUI")
    end
end)

if initSuccess then
    print("=" .. string.rep("=", 70))
    print("üí° PETSCALER v2.0 + –ê–í–¢–û–ó–ê–ú–ï–ù–ê - –ü–û–õ–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
    print("   üî• –†–£–ß–ù–û–ï –°–û–ó–î–ê–ù–ò–ï:")
    print("     1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
    print("     2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("     3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
    print("")
    print("   ü•ö –ù–û–í–û–ï! –ê–í–¢–û–ó–ê–ú–ï–ù–ê –ü–ò–¢–û–ú–¶–ï–í:")
    print("     1. –ò—â–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –í –§–ò–ì–£–†–ù–´–• –°–ö–û–ë–ö–ê–• (–∫–∞–∫ —Ä—É—á–Ω–∞—è –∫–æ–ø–∏—è)")
    print("     2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
    print("     3. –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ")
    print("     4. –ù–∏–∫–∞–∫–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–æ–ø–∏–π - —Ç–æ–ª—å–∫–æ –∂–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è!")
    print("")
    print("üéØ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print("   üî• –ó–µ–ª–µ–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏")
    print("   ü•ö –û—Ä–∞–Ω–∂–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –í–∫–ª/–û—Ç–∫–ª –∞–≤—Ç–æ–∑–∞–º–µ–Ω—É –ø–∏—Ç–æ–º—Ü–µ–≤")
    print("=" .. string.rep("=", 70))
    print("‚úÖ PetScaler v2.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
else
    print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ PetScaler v2.0:")
    print("üìù –û—à–∏–±–∫–∞:", initError)
    print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç")
    print("üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GUI")
end
