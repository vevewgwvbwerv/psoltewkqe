-- üéâ PET SCALER ULTIMATE - –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï + –ë–ï–°–ö–û–ù–ï–ß–ù–´–ô IDLE
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç PetScaler_v2.4.lua + Motor6DIdleForcer.lua
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±–µ –º–æ–¥–µ–ª–∏ –≤ idle –∞–Ω–∏–º–∞—Ü–∏–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üéâ === PET SCALER ULTIMATE - –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï + IDLE ===")
print("=" .. string.rep("=", 70))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 3.0,
    TWEEN_TIME = 3.0,
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out,
    IDLE_RECORD_TIME = 5,
    IDLE_FRAME_RATE = 60
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print("üé¨ –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ idle:", CONFIG.IDLE_RECORD_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –ü–æ–∏—Å–∫ –ø–∏—Ç–æ–º—Ü–∞
local function findPet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            targetPosition = Vector3.new(targetPosition.X, raycastResult.Position.Y, targetPosition.Z)
        end
        
        copy:SetPrimaryPartCFrame(CFrame.new(targetPosition, originalCFrame.LookVector))
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏:", targetPosition)
    else
        print("‚ö†Ô∏è PrimaryPart –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        local originalPosition = originalModel:GetModelCFrame().Position
        copy:SetPrimaryPartCFrame(CFrame.new(originalPosition + Vector3.new(15, 0, 0)))
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    return parts
end

-- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ß–∞—Å—Ç–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return false
    end
    
    local tweens = {}
    
    for _, part in pairs(parts) do
        part.Anchored = true
        
        local originalSize = part.Size
        local originalPosition = part.Position
        
        local targetSize = originalSize * scaleFactor
        local targetPosition = originalPosition * scaleFactor
        
        local sizeTween = TweenService:Create(
            part,
            TweenInfo.new(tweenTime, CONFIG.EASING_STYLE, CONFIG.EASING_DIRECTION),
            {Size = targetSize}
        )
        
        local positionTween = TweenService:Create(
            part,
            TweenInfo.new(tweenTime, CONFIG.EASING_STYLE, CONFIG.EASING_DIRECTION),
            {Position = targetPosition}
        )
        
        table.insert(tweens, sizeTween)
        table.insert(tweens, positionTween)
        
        sizeTween:Play()
        positionTween:Play()
    end
    
    print("üé¨ –ó–∞–ø—É—â–µ–Ω–æ —Ç–≤–∏–Ω–æ–≤:", #tweens)
    print("‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    return true
end

-- –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    local rootPart = nil
    
    for _, part in pairs(copyParts) do
        if part.Name == "HumanoidRootPart" or part.Name == "Torso" then
            rootPart = part
            part.Anchored = true
            print("‚öì –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –∑–∞—è–∫–æ—Ä–µ–Ω–∞:", part.Name)
        else
            part.Anchored = false
            print("üîì –ß–∞—Å—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏:", part.Name)
        end
    end
    
    if not rootPart then
        print("‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —è–∫–æ—Ä–∏–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å")
        if #copyParts > 0 then
            rootPart = copyParts[1]
            rootPart.Anchored = true
        end
    end
    
    return rootPart
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ Motor6D
local function getMotor6Ds(model)
    local motors = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    return motors
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó MOTOR6DIDLEFORCER ===

-- –ó–∞–ø–∏—Å—å idle –ø–æ–∑
local function recordPureIdlePoses(petModel)
    print("\nüé¨ === –ó–ê–ü–ò–°–¨ –ß–ò–°–¢–´–• IDLE –ü–û–ó ===")
    
    local motor6Ds = getMotor6Ds(petModel)
    local idlePoses = {}
    
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D:", #motor6Ds)
    
    if #motor6Ds == 0 then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –ê–ì–†–ï–°–°–ò–í–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
    local humanoid = petModel:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = 0
        humanoid.JumpPower = 0
        humanoid.PlatformStand = true
        print("üõë –ü–∏—Ç–æ–º–µ—Ü –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
    end
    
    local rootPart = petModel:FindFirstChild("HumanoidRootPart") or petModel:FindFirstChild("Torso")
    local originalPosition = nil
    if rootPart then
        originalPosition = rootPart.Position
        rootPart.Anchored = true
        print("‚öì RootPart –∑–∞—è–∫–æ—Ä–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
    end
    
    -- –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Animator") then
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                local name = track.Animation.Name:lower()
                local id = track.Animation.AnimationId:lower()
                
                -- –ï—Å–ª–∏ —ç—Ç–æ –ù–ï idle - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º
                if not name:find("idle") and not id:find("1073293904134356") then
                    track:Stop()
                    track:Destroy()
                    print("üíÄ –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                end
            end
        end
    end
    
    print("üìπ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ idle...")
    wait(3)
    
    -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ idle –ø–æ–∑—ã
    print("üìπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ idle –ø–æ–∑—ã (" .. CONFIG.IDLE_RECORD_TIME .. " —Å–µ–∫—É–Ω–¥)...")
    
    local recordingTime = CONFIG.IDLE_RECORD_TIME
    local frameRate = CONFIG.IDLE_FRAME_RATE
    local frameInterval = 1 / frameRate
    local totalFrames = recordingTime * frameRate
    
    local currentFrame = 0
    local startTime = tick()
    
    local recordConnection
    recordConnection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        if elapsed >= frameInterval * currentFrame then
            currentFrame = currentFrame + 1
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑—ã –≤—Å–µ—Ö Motor6D
            local framePoses = {}
            
            for _, motor in pairs(motor6Ds) do
                framePoses[motor.Name] = {
                    C0 = motor.C0,
                    C1 = motor.C1,
                    Transform = motor.Transform
                }
            end
            
            table.insert(idlePoses, framePoses)
            
            if currentFrame % frameRate == 0 then  -- –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                print(string.format("üìπ –ó–∞–ø–∏—Å–∞–Ω–æ idle –∫–∞–¥—Ä–æ–≤: %d/%d", currentFrame, totalFrames))
            end
        end
        
        if elapsed >= recordingTime then
            recordConnection:Disconnect()
            print("‚úÖ –ó–∞–ø–∏—Å—å —á–∏—Å—Ç—ã—Ö idle –ø–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(string.format("üìπ –ó–∞–ø–∏—Å–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: %d", #idlePoses))
        end
    end)
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    while #idlePoses < totalFrames and recordConnection.Connected do
        wait(0.1)
    end
    
    return idlePoses, motor6Ds, originalPosition
end

-- –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ idle –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
local function forceOriginalIdleAnimation(idlePoses, motor6Ds, petModel, originalPosition)
    print("\nüî• === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï IDLE –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    
    if not idlePoses or #idlePoses == 0 then
        print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö idle –ø–æ–∑!")
        return nil
    end
    
    print("üî• –ù–∞—á–∏–Ω–∞—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ idle –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞...")
    
    local humanoid = petModel:FindFirstChildOfClass("Humanoid")
    local rootPart = petModel:FindFirstChild("HumanoidRootPart") or petModel:FindFirstChild("Torso")
    
    local currentFrame = 1
    local frameRate = CONFIG.IDLE_FRAME_RATE
    local frameInterval = 1 / frameRate
    local lastFrameTime = tick()
    
    local forceConnection
    forceConnection = RunService.Heartbeat:Connect(function()
        local now = tick()
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid.JumpPower = 0
            humanoid.PlatformStand = true
        end
        
        if rootPart and originalPosition then
            rootPart.Anchored = true
            -- –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è
            if (rootPart.Position - originalPosition).Magnitude > 0.1 then
                rootPart.Position = originalPosition
            end
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º walking –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        for _, obj in pairs(petModel:GetDescendants()) do
            if obj:IsA("Animator") then
                local tracks = obj:GetPlayingAnimationTracks()
                for _, track in pairs(tracks) do
                    local name = track.Animation.Name:lower()
                    local id = track.Animation.AnimationId:lower()
                    
                    -- –ï—Å–ª–∏ —ç—Ç–æ –ù–ï idle - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º
                    if not name:find("idle") and not id:find("1073293904134356") then
                        track:Stop()
                    end
                end
            end
        end
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã
        if now - lastFrameTime >= frameInterval then
            lastFrameTime = now
            
            local framePoses = idlePoses[currentFrame]
            
            if framePoses then
                -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã –∫–æ –≤—Å–µ–º Motor6D
                for _, motor in pairs(motor6Ds) do
                    local pose = framePoses[motor.Name]
                    if pose then
                        pcall(function()
                            motor.C0 = pose.C0
                            motor.C1 = pose.C1
                            motor.Transform = pose.Transform
                        end)
                    end
                end
            end
            
            -- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É
            currentFrame = currentFrame + 1
            if currentFrame > #idlePoses then
                currentFrame = 1  -- –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º idle
            end
        end
    end)
    
    print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∑–∞–ø—É—â–µ–Ω–æ!")
    return forceConnection
end

-- –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function startLiveMotorCopying(original, copy, scaleFactor)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("üîß –û—Ä–∏–≥–∏–Ω–∞–ª Motor6D:", #originalMotors)
    print("üîß –ö–æ–ø–∏—è Motor6D:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–¥–Ω–æ–π –∏–∑ –º–æ–¥–µ–ª–µ–π!")
        return nil
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π Motor6D
    local motorMap = {}
    for _, originalMotor in pairs(originalMotors) do
        for _, copyMotor in pairs(copyMotors) do
            if originalMotor.Name == copyMotor.Name then
                motorMap[originalMotor] = copyMotor
                break
            end
        end
    end
    
    print("üó∫Ô∏è –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π Motor6D:", #motorMap)
    
    if next(motorMap) == nil then
        print("‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    local function copyMotorState(originalMotor, copyMotor, scale)
        local originalTransform = originalMotor.Transform
        local scaledTransform = CFrame.new(originalTransform.Position * scale) * (originalTransform - originalTransform.Position)
        copyMotor.Transform = scaledTransform
        
        local originalC0 = originalMotor.C0
        local scaledC0 = CFrame.new(originalC0.Position * scale) * (originalC0 - originalC0.Position)
        copyMotor.C0 = scaledC0
        
        local originalC1 = originalMotor.C1
        local scaledC1 = CFrame.new(originalC1.Position * scale) * (originalC1 - originalC1.Position)
        copyMotor.C1 = scaledC1
    end
    
    -- –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    local connection = RunService.Heartbeat:Connect(function()
        for originalMotor, copyMotor in pairs(motorMap) do
            pcall(function()
                copyMotorState(originalMotor, copyMotor, scaleFactor)
            end)
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    return connection
end

-- === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

local function main()
    print("üöÄ PetScaler ULTIMATE –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findPet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –ó–∞–ø–∏—Å–∞—Ç—å idle –ø–æ–∑—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–ø–∏–∏
    print("\nüé¨ === –ó–ê–ü–ò–°–¨ IDLE –ü–û–ó –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    local idlePoses, motor6Ds, originalPosition = recordPureIdlePoses(petModel)
    
    if not idlePoses then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å idle –ø–æ–∑—ã!")
        return
    end
    
    -- –®–∞–≥ 3: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –®–∞–≥ 4: –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
    wait(CONFIG.TWEEN_TIME + 1) -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –®–∞–≥ 6: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ idle —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
    print("\nüî• === –ó–ê–ü–£–°–ö IDLE –§–û–†–°–ò–†–û–í–ê–ù–ò–Ø –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    local originalIdleConnection = forceOriginalIdleAnimation(idlePoses, motor6Ds, petModel, originalPosition)
    
    -- –®–∞–≥ 7: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
    local copyConnection = startLiveMotorCopying(petModel, petCopy, CONFIG.SCALE_FACTOR)
    
    if originalIdleConnection and copyConnection then
        print("\nüéâ === –ü–û–õ–ù–´–ô –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ idle –∞–Ω–∏–º–∞—Ü–∏–∏")
        print("‚úÖ –ö–æ–ø–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç idle –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        print("üîÑ –û–±–µ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∏–≥—Ä–∞—Ç—å idle –∞–Ω–∏–º–∞—Ü–∏—é!")
        print("üí° –ù–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å!")
        
        -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 300 —Å–µ–∫—É–Ω–¥ (5 –º–∏–Ω—É—Ç)
        spawn(function()
            wait(300)
            if originalIdleConnection then
                originalIdleConnection:Disconnect()
            end
            if copyConnection then
                copyConnection:Disconnect()
            end
            print("\n‚èπÔ∏è –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
        end)
        
    else
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerUltimateGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerUltimateGUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 280, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 250) -- –ü–æ–¥ –¥—Ä—É–≥–∏–º–∏ GUI
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 0, 255) -- –§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "UltimateButton"
    button.Size = UDim2.new(0, 260, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
    button.BorderSizePixel = 0
    button.Text = "üéâ PetScaler ULTIMATE + Idle"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é ULTIMATE –≤–µ—Ä—Å–∏—é..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üéâ PetScaler ULTIMATE + Idle"
            button.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(255, 0, 255) then
            button.BackgroundColor3 = Color3.fromRGB(220, 0, 220)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(220, 0, 220) then
            button.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
        end
    end)
    
    print("üñ•Ô∏è PetScaler ULTIMATE GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 70))
print("üí° PETSCALER ULTIMATE - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
print("   1. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç idle –ø–æ–∑—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
print("   2. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   3. –ó–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º idle")
print("   4. –ö–æ–ø–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç idle –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
print("   5. –û–ë–ï –ú–û–î–ï–õ–ò –ù–ò–ö–û–ì–î–ê –ù–ï –•–û–î–Ø–¢!")
print("üéØ –ù–∞–∂–º–∏—Ç–µ —Ñ–∏–æ–ª–µ—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ULTIMATE!")
print("=" .. string.rep("=", 70))
