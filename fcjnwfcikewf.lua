-- FullModelHunter.lua
-- –û–•–û–¢–ù–ò–ö –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ: –ò—â–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –£–ñ–ï –ì–û–¢–û–í–û–ô –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞
-- –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–µ –º–æ–¥–µ–ª–∏ —Å 18 —á–∞—Å—Ç—è–º–∏ –∏ 14 Motor6D, –∞ –Ω–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local ServerStorage = game:GetService("ServerStorage")
local StarterGui = game:GetService("StarterGui")
local StarterPack = game:GetService("StarterPack")
local StarterPlayer = game:GetService("StarterPlayer")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üîç === FULL MODEL HUNTER ===")
print("üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ü–û–õ–ù–û–ô –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ (18 —á–∞—Å—Ç–µ–π, 14 Motor6D)")
print("=" .. string.rep("=", 60))

-- üìä –î–ê–ù–ù–´–ï –û–•–û–¢–ù–ò–ö–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–ò
local FullHunterData = {
    targetStructure = {
        children = 18,
        descendants = 34,
        motor6ds = 14,
        baseParts = 16
    },
    foundSources = {},
    perfectMatches = {},
    closeMatches = {},
    targetModel = nil,
    isHunting = false
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –û–•–û–¢–ù–ò–ö–ê
local HunterConsole = nil
local ConsoleLines = {}
local MaxLines = 120

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createHunterConsole()
    if HunterConsole then HunterConsole:Destroy() end
    
    HunterConsole = Instance.new("ScreenGui")
    HunterConsole.Name = "FullModelHunterConsole"
    HunterConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 900, 0, 700)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.05, 0.02)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(1, 0.5, 0.1)
    frame.Parent = HunterConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(1, 0.5, 0.1)
    title.BorderSizePixel = 0
    title.Text = "üîç FULL MODEL HUNTER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.05, 0.02, 0.01)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üîç –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª—å—é –≥–æ—Ç–æ–≤..."
    textLabel.TextColor3 = Color3.new(1, 0.9, 0.8)
    textLabel.TextSize = 10
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–∞
local function hunterLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    
    local prefixes = {
        HUNTER = "üîç", SEARCH = "üîé", FOUND = "üéØ", PERFECT = "üíé",
        CLOSE = "üî∂", ANALYSIS = "üìä", CRITICAL = "üî•", SUCCESS = "‚úÖ", 
        ERROR = "‚ùå", INFO = "‚ÑπÔ∏è", DETAIL = "üìù", LOCATION = "üìç"
    }
    
    local logLine = string.format("[%s] %s %s", timestamp, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if HunterConsole then
        local textLabel = HunterConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò
local function analyzeModelStructure(model)
    local structure = {
        children = #model:GetChildren(),
        descendants = #model:GetDescendants(),
        baseParts = 0,
        motor6ds = 0,
        meshParts = 0,
        scripts = 0,
        animators = 0,
        unionOperations = 0,
        weldConstraints = 0,
        highlights = 0
    }
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            structure.baseParts = structure.baseParts + 1
        elseif obj:IsA("Motor6D") then
            structure.motor6ds = structure.motor6ds + 1
        elseif obj:IsA("MeshPart") then
            structure.meshParts = structure.meshParts + 1
        elseif obj:IsA("Script") or obj:IsA("LocalScript") then
            structure.scripts = structure.scripts + 1
        elseif obj:IsA("Animator") then
            structure.animators = structure.animators + 1
        elseif obj:IsA("UnionOperation") then
            structure.unionOperations = structure.unionOperations + 1
        elseif obj:IsA("WeldConstraint") then
            structure.weldConstraints = structure.weldConstraints + 1
        elseif obj:IsA("Highlight") then
            structure.highlights = structure.highlights + 1
        end
    end
    
    return structure
end

-- üéØ –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –¶–ï–õ–ï–í–û–ô –°–¢–†–£–ö–¢–£–†–ï
local function checkStructureMatch(structure, modelName, modelPath)
    local target = FullHunterData.targetStructure
    
    -- –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∏–¥–µ–∞–ª—å–Ω–æ–µ)
    if structure.children == target.children and 
       structure.motor6ds == target.motor6ds and
       structure.baseParts == target.baseParts then
        
        FullHunterData.perfectMatches[modelPath] = {
            model = modelName,
            path = modelPath,
            structure = structure,
            matchType = "PERFECT"
        }
        
        hunterLog("PERFECT", "üíé –ò–î–ï–ê–õ–¨–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!", {
            Model = modelName,
            Path = modelPath,
            Children = structure.children,
            Motor6Ds = structure.motor6ds,
            BaseParts = structure.baseParts,
            MatchType = "PERFECT"
        })
        
        return "PERFECT"
    end
    
    -- –ë–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    local childrenDiff = math.abs(structure.children - target.children)
    local motor6dDiff = math.abs(structure.motor6ds - target.motor6ds)
    local partsDiff = math.abs(structure.baseParts - target.baseParts)
    
    if childrenDiff <= 3 and motor6dDiff <= 3 and partsDiff <= 3 then
        FullHunterData.closeMatches[modelPath] = {
            model = modelName,
            path = modelPath,
            structure = structure,
            matchType = "CLOSE",
            differences = {
                children = childrenDiff,
                motor6ds = motor6dDiff,
                baseParts = partsDiff
            }
        }
        
        hunterLog("CLOSE", "üî∂ –ë–õ–ò–ó–ö–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –ù–ê–ô–î–ï–ù–û!", {
            Model = modelName,
            Path = modelPath,
            Children = string.format("%d (diff: %d)", structure.children, childrenDiff),
            Motor6Ds = string.format("%d (diff: %d)", structure.motor6ds, motor6dDiff),
            BaseParts = string.format("%d (diff: %d)", structure.baseParts, partsDiff),
            MatchType = "CLOSE"
        })
        
        return "CLOSE"
    end
    
    return "NO_MATCH"
end

-- üîé –ì–õ–£–ë–û–ö–ò–ô –ü–û–ò–°–ö –í–û –í–°–ï–• –°–ï–†–í–ò–°–ê–•
local function deepSearchAllServices()
    hunterLog("HUNTER", "üîç –ì–õ–£–ë–û–ö–ò–ô –ü–û–ò–°–ö –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–ò –í–û –í–°–ï–• –°–ï–†–í–ò–°–ê–•")
    
    local services = {
        {name = "ReplicatedStorage", service = ReplicatedStorage},
        {name = "ReplicatedFirst", service = ReplicatedFirst},
        {name = "Workspace", service = Workspace},
        {name = "StarterGui", service = StarterGui},
        {name = "StarterPack", service = StarterPack},
        {name = "StarterPlayer", service = StarterPlayer}
    }
    
    -- –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ServerStorage
    local success, serverStorage = pcall(function() return game:GetService("ServerStorage") end)
    if success and serverStorage then
        table.insert(services, {name = "ServerStorage", service = serverStorage})
    end
    
    local totalFound = 0
    local perfectCount = 0
    local closeCount = 0
    
    for _, serviceData in ipairs(services) do
        hunterLog("LOCATION", "üìç –ü–æ–∏—Å–∫ –≤ " .. serviceData.name .. "...")
        local foundInService = 0
        
        local success, result = pcall(function()
            for _, obj in pairs(serviceData.service:GetDescendants()) do
                if obj:IsA("Model") then
                    local name = obj.Name:lower()
                    
                    -- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∞–º –ø–∏—Ç–æ–º—Ü–µ–≤
                    if name:find("dog") or name:find("bunny") or name:find("lab") or
                       name:find("cat") or name:find("rabbit") or name:find("puppy") or
                       name:find("pet") or name:find("animal") or name:find("golden") or
                       name == "dog" or name == "bunny" or name == "golden lab" or
                       name == "goldenlab" then
                        
                        local structure = analyzeModelStructure(obj)
                        local matchType = checkStructureMatch(structure, obj.Name, obj:GetFullName())
                        
                        FullHunterData.foundSources[obj:GetFullName()] = {
                            model = obj,
                            name = obj.Name,
                            path = obj:GetFullName(),
                            location = serviceData.name,
                            structure = structure,
                            matchType = matchType
                        }
                        
                        foundInService = foundInService + 1
                        totalFound = totalFound + 1
                        
                        if matchType == "PERFECT" then
                            perfectCount = perfectCount + 1
                        elseif matchType == "CLOSE" then
                            closeCount = closeCount + 1
                        else
                            hunterLog("FOUND", "üéØ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: " .. obj.Name, {
                                Location = serviceData.name,
                                Path = obj:GetFullName(),
                                Children = structure.children,
                                Motor6Ds = structure.motor6ds,
                                BaseParts = structure.baseParts,
                                Match = "NO_MATCH"
                            })
                        end
                    end
                end
            end
        end)
        
        if not success then
            hunterLog("ERROR", "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ " .. serviceData.name .. ": " .. tostring(result))
        else
            hunterLog("LOCATION", string.format("üìç –í %s –Ω–∞–π–¥–µ–Ω–æ: %d –º–æ–¥–µ–ª–µ–π", serviceData.name, foundInService))
        end
    end
    
    hunterLog("HUNTER", string.format("üîç –ò–¢–û–ì–ò –ü–û–ò–°–ö–ê: %d –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ", totalFound))
    hunterLog("HUNTER", string.format("üíé –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d", perfectCount))
    hunterLog("HUNTER", string.format("üî∂ –ë–ª–∏–∑–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d", closeCount))
    
    return {total = totalFound, perfect = perfectCount, close = closeCount}
end

-- üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –¶–ï–õ–ï–í–û–ô –ú–û–î–ï–õ–¨–Æ
local function compareWithTarget(targetModel)
    hunterLog("ANALYSIS", "üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –¶–ï–õ–ï–í–û–ô –ú–û–î–ï–õ–¨–Æ: " .. targetModel.Name)
    
    FullHunterData.targetModel = targetModel
    local targetStructure = analyzeModelStructure(targetModel)
    
    hunterLog("ANALYSIS", "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏:", targetStructure)
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    FullHunterData.targetStructure = targetStructure
    
    -- –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    local exactMatches = {}
    
    for path, sourceData in pairs(FullHunterData.foundSources) do
        local source = sourceData.structure
        
        if source.children == targetStructure.children and
           source.motor6ds == targetStructure.motor6ds and
           source.baseParts == targetStructure.baseParts then
            
            exactMatches[path] = sourceData
            
            hunterLog("SUCCESS", "‚úÖ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï –° –¶–ï–õ–ï–í–û–ô –ú–û–î–ï–õ–¨–Æ!", {
                Source = sourceData.name,
                Location = sourceData.location,
                Path = path,
                Children = source.children,
                Motor6Ds = source.motor6ds,
                BaseParts = source.baseParts
            })
        end
    end
    
    if next(exactMatches) then
        hunterLog("CRITICAL", string.format("üî• –ù–ê–ô–î–ï–ù–û %d –¢–û–ß–ù–´–• –°–û–í–ü–ê–î–ï–ù–ò–ô!", #exactMatches))
        return exactMatches
    else
        hunterLog("ERROR", "‚ùå –ù–ò –û–î–ù–û–ì–û –¢–û–ß–ù–û–ì–û –°–û–í–ü–ê–î–ï–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–û")
        return {}
    end
end

-- üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û–•–û–¢–´
local function generateHuntingReport()
    hunterLog("CRITICAL", "üìã === –û–¢–ß–ï–¢ –û–•–û–¢–´ –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ ===")
    
    hunterLog("INFO", string.format("üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: %d", #FullHunterData.foundSources))
    hunterLog("INFO", string.format("üíé –ò–¥–µ–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d", #FullHunterData.perfectMatches))
    hunterLog("INFO", string.format("üî∂ –ë–ª–∏–∑–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: %d", #FullHunterData.closeMatches))
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if next(FullHunterData.perfectMatches) then
        hunterLog("CRITICAL", "üî• –ò–î–ï–ê–õ–¨–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø:")
        for path, match in pairs(FullHunterData.perfectMatches) do
            hunterLog("PERFECT", string.format("üíé %s", match.model), {
                Path = path,
                Children = match.structure.children,
                Motor6Ds = match.structure.motor6ds,
                BaseParts = match.structure.baseParts
            })
        end
    end
    
    if next(FullHunterData.closeMatches) then
        hunterLog("CRITICAL", "üî• –ë–õ–ò–ó–ö–ò–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø:")
        for path, match in pairs(FullHunterData.closeMatches) do
            hunterLog("CLOSE", string.format("üî∂ %s", match.model), {
                Path = path,
                ChildrenDiff = match.differences.children,
                Motor6DsDiff = match.differences.motor6ds,
                PartsDiff = match.differences.baseParts
            })
        end
    end
    
    hunterLog("CRITICAL", "üîç –û–•–û–¢–ê –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!")
end

-- üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–•–û–¢–´
local function startFullModelHunt()
    hunterLog("HUNTER", "üöÄ –ó–ê–ü–£–°–ö –û–•–û–¢–´ –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ")
    hunterLog("HUNTER", "üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–∏ —Å 18 —á–∞—Å—Ç—è–º–∏ –∏ 14 Motor6D")
    
    FullHunterData.isHunting = true
    
    -- –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
    local searchResults = deepSearchAllServices()
    
    if searchResults.total == 0 then
        hunterLog("ERROR", "‚ùå –ù–ò –û–î–ù–û–ô –ú–û–î–ï–õ–ò –ù–ï –ù–ê–ô–î–ï–ù–û!")
        return
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ Visuals
    local visuals = Workspace:FindFirstChild("Visuals")
    if visuals then
        hunterLog("SUCCESS", "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Visuals –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        local visualsConnection = visuals.ChildAdded:Connect(function(obj)
            if obj:IsA("Model") then
                local name = obj.Name:lower()
                if name == "dog" or name == "bunny" or name == "golden lab" or 
                   name == "cat" or name == "rabbit" or name == "puppy" or
                   name == "goldenlab" or name:find("lab") then
                    
                    hunterLog("FOUND", "üéØ –¶–ï–õ–ï–í–ê–Ø –ú–û–î–ï–õ–¨ –í VISUALS: " .. obj.Name)
                    
                    -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                    local exactMatches = compareWithTarget(obj)
                    
                    -- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    generateHuntingReport()
                    
                    -- –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    visualsConnection:Disconnect()
                    FullHunterData.isHunting = false
                end
            end
        end)
    else
        -- –ï—Å–ª–∏ –Ω–µ—Ç Visuals, –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        generateHuntingReport()
        FullHunterData.isHunting = false
    end
    
    hunterLog("HUNTER", "‚úÖ –û—Ö–æ—Ç–∞ –∑–∞ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª—å—é –∞–∫—Ç–∏–≤–Ω–∞!")
    hunterLog("HUNTER", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø!")
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createHunterGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "FullModelHunterGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 350, 0, 120)
    frame.Position = UDim2.new(1, -370, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.05, 0.02)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(1, 0.5, 0.1)
    title.BorderSizePixel = 0
    title.Text = "üîç FULL MODEL HUNTER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(1, 0.5, 0.1)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üîç –û–•–û–¢–ê –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ"
    startBtn.TextColor3 = Color3.new(0, 0, 0)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 30)
    status.Position = UDim2.new(0, 10, 0, 90)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –æ—Ö–æ—Ç–µ –∑–∞ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª—å—é"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üîç –û—Ö–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
        status.TextColor3 = Color3.new(1, 0.5, 0.1)
        startBtn.Text = "‚úÖ –û–•–û–¢–ê –ê–ö–¢–ò–í–ù–ê"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startFullModelHunt()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createHunterConsole()
createHunterGUI()

hunterLog("HUNTER", "‚úÖ FullModelHunter –≥–æ—Ç–æ–≤!")
hunterLog("HUNTER", "üîç –û—Ö–æ—Ç–∞ –∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –ü–û–õ–ù–û–ô –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞")
hunterLog("HUNTER", "üéØ –¶–µ–ª—å: 18 —á–∞—Å—Ç–µ–π, 14 Motor6D, 34 –ø–æ—Ç–æ–º–∫–∞")
hunterLog("HUNTER", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–û–•–û–¢–ê –ó–ê –ü–û–õ–ù–û–ô –ú–û–î–ï–õ–¨–Æ' –¥–ª—è –ø–æ–∏—Å–∫–∞!")
