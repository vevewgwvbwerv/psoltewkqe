-- VisualsToToolTransformAnalyzer.lua
-- –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ Visuals –≤ Tool –≤ —Ä—É–∫–∞—Ö –∏–≥—Ä–æ–∫–∞
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å: Visuals (19 —á–∞—Å—Ç–µ–π) ‚Üí PlayerCharacter Tool (3 —á–∞—Å—Ç–∏, 15 Motor6D)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

print("üîÑ === VISUALS TO TOOL TRANSFORM ANALYZER ===")
print("üéØ –¶–µ–ª—å: –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ Visuals ‚Üí Tool –≤ —Ä—É–∫–∞—Ö")
print("=" .. string.rep("=", 70))

-- üìä –î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø
local TransformData = {
    visualsModel = nil,
    playerTool = nil,
    worldModel = nil,
    transformSequence = {},
    snapshots = {},
    isAnalyzing = false,
    startTime = 0,
    connections = {},
    transformStages = {
        "VISUALS_APPEARED",
        "VISUALS_DISAPPEARED", 
        "TOOL_CREATED",
        "TOOL_EQUIPPED",
        "WORLD_MODEL_CREATED"
    }
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
local TransformConsole = nil
local ConsoleLines = {}
local MaxLines = 180

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createTransformConsole()
    if TransformConsole then TransformConsole:Destroy() end
    
    TransformConsole = Instance.new("ScreenGui")
    TransformConsole.Name = "VisualsToToolTransformConsole"
    TransformConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 1050, 0, 850)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.05)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(1, 0.2, 0.5)
    frame.Parent = TransformConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(1, 0.2, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üîÑ VISUALS ‚Üí TOOL TRANSFORM ANALYZER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.05, 0.01, 0.02)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üîÑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ..."
    textLabel.TextColor3 = Color3.new(1, 0.9, 0.95)
    textLabel.TextSize = 10
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
local function transformLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local relativeTime = TransformData.startTime > 0 and string.format("(+%.3f)", tick() - TransformData.startTime) or ""
    
    local prefixes = {
        TRANSFORM = "üîÑ", VISUALS = "üé≠", TOOL = "üîß", PLAYER = "üë§",
        WORLD = "üåç", STAGE = "üìç", SNAPSHOT = "üì∏", COMPARE = "‚öñÔ∏è",
        CRITICAL = "üî•", SUCCESS = "‚úÖ", ERROR = "‚ùå", INFO = "‚ÑπÔ∏è", 
        DETAIL = "üìù", SEQUENCE = "üîÑ", CREATION = "‚ö°", DISAPPEAR = "üí®"
    }
    
    local logLine = string.format("[%s] %s %s %s", timestamp, relativeTime, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if TransformConsole then
        local textLabel = TransformConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üì∏ –°–û–ó–î–ê–ù–ò–ï –î–ï–¢–ê–õ–¨–ù–û–ì–û –°–ù–ò–ú–ö–ê –û–ë–™–ï–ö–¢–ê
local function createDetailedSnapshot(obj, snapshotName, stage)
    if not obj or not obj.Parent then
        return nil
    end
    
    local snapshot = {
        name = snapshotName,
        stage = stage,
        timestamp = tick(),
        relativeTime = tick() - TransformData.startTime,
        object = {
            name = obj.Name,
            className = obj.ClassName,
            parent = obj.Parent and obj.Parent.Name or "nil",
            fullPath = obj:GetFullName()
        },
        structure = {
            children = #obj:GetChildren(),
            descendants = #obj:GetDescendants()
        },
        components = {},
        properties = {}
    }
    
    -- –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local componentCounts = {}
    local importantObjects = {}
    
    for _, child in pairs(obj:GetDescendants()) do
        local className = child.ClassName
        componentCounts[className] = (componentCounts[className] or 0) + 1
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        if className == "Motor6D" or className == "Weld" or className == "WeldConstraint" or 
           className == "Handle" or className == "Tool" or className == "Animator" then
            table.insert(importantObjects, {
                name = child.Name,
                className = className,
                parent = child.Parent and child.Parent.Name or "nil"
            })
        end
    end
    
    snapshot.components = componentCounts
    snapshot.importantObjects = importantObjects
    
    -- –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è Tool
    if obj:IsA("Tool") then
        snapshot.properties = {
            RequiresHandle = obj.RequiresHandle,
            CanBeDropped = obj.CanBeDropped,
            ManualActivationOnly = obj.ManualActivationOnly,
            Enabled = obj.Enabled
        }
        
        -- –ü–æ–∏—Å–∫ Handle
        local handle = obj:FindFirstChild("Handle")
        if handle then
            snapshot.handle = {
                name = handle.Name,
                className = handle.ClassName,
                size = tostring(handle.Size),
                material = tostring(handle.Material),
                shape = tostring(handle.Shape)
            }
        end
    end
    
    transformLog("SNAPSHOT", string.format("üì∏ –°–ù–ò–ú–û–ö: %s (%s)", snapshotName, stage), {
        Object = obj.Name,
        Path = obj:GetFullName(),
        Children = snapshot.structure.children,
        Descendants = snapshot.structure.descendants,
        RelativeTime = string.format("%.3f —Å–µ–∫", snapshot.relativeTime)
    })
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    for className, count in pairs(componentCounts) do
        if count > 0 then
            transformLog("DETAIL", string.format("  %s: %d", className, count))
        end
    end
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if #importantObjects > 0 then
        transformLog("DETAIL", "  –í–∞–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
        for _, obj in ipairs(importantObjects) do
            transformLog("DETAIL", string.format("    %s (%s) –≤ %s", obj.name, obj.className, obj.parent))
        end
    end
    
    return snapshot
end

-- ‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –°–ù–ò–ú–ö–û–í
local function compareSnapshots(before, after, comparisonName)
    if not before or not after then return end
    
    transformLog("COMPARE", string.format("‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï: %s", comparisonName))
    transformLog("COMPARE", string.format("  %s ‚Üí %s", before.name, after.name))
    
    local childrenDiff = after.structure.children - before.structure.children
    local descendantsDiff = after.structure.descendants - before.structure.descendants
    local timeDiff = after.relativeTime - before.relativeTime
    
    transformLog("COMPARE", "üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", {
        ChildrenDiff = string.format("%+d (%d ‚Üí %d)", childrenDiff, before.structure.children, after.structure.children),
        DescendantsDiff = string.format("%+d (%d ‚Üí %d)", descendantsDiff, before.structure.descendants, after.structure.descendants),
        TimeDiff = string.format("%.3f —Å–µ–∫", timeDiff)
    })
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local allComponents = {}
    for className, _ in pairs(before.components) do allComponents[className] = true end
    for className, _ in pairs(after.components) do allComponents[className] = true end
    
    transformLog("COMPARE", "üîß –ò–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for className, _ in pairs(allComponents) do
        local beforeCount = before.components[className] or 0
        local afterCount = after.components[className] or 0
        local diff = afterCount - beforeCount
        
        if diff ~= 0 then
            transformLog("DETAIL", string.format("  %s: %+d (%d ‚Üí %d)", className, diff, beforeCount, afterCount))
        end
    end
end

-- üé≠ –ú–û–ù–ò–¢–û–†–ò–ù–ì VISUALS
local function monitorVisuals()
    transformLog("VISUALS", "üé≠ –ú–û–ù–ò–¢–û–†–ò–ù–ì VISUALS")
    
    local visuals = Workspace:FindFirstChild("Visuals")
    if not visuals then
        transformLog("ERROR", "‚ùå –ü–∞–ø–∫–∞ Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ Visuals
    local visualsAddedConnection = visuals.ChildAdded:Connect(function(obj)
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" or
               name == "goldenlab" or name:find("lab") then
                
                transformLog("STAGE", "üìç –≠–¢–ê–ü: VISUALS_APPEARED")
                transformLog("VISUALS", string.format("üé≠ –ú–û–î–ï–õ–¨ –í VISUALS: %s", obj.Name))
                
                TransformData.visualsModel = obj
                local visualsSnapshot = createDetailedSnapshot(obj, "visuals_model", "VISUALS_APPEARED")
                TransformData.snapshots["visuals"] = visualsSnapshot
                
                table.insert(TransformData.transformSequence, {
                    stage = "VISUALS_APPEARED",
                    timestamp = tick(),
                    relativeTime = tick() - TransformData.startTime,
                    object = obj,
                    snapshot = visualsSnapshot
                })
            end
        end
    end)
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ Visuals
    local visualsRemovedConnection = visuals.ChildRemoved:Connect(function(obj)
        if obj == TransformData.visualsModel then
            transformLog("STAGE", "üìç –≠–¢–ê–ü: VISUALS_DISAPPEARED")
            transformLog("DISAPPEAR", string.format("üí® –ú–û–î–ï–õ–¨ –ò–°–ß–ï–ó–õ–ê –ò–ó VISUALS: %s", obj.Name))
            
            table.insert(TransformData.transformSequence, {
                stage = "VISUALS_DISAPPEARED",
                timestamp = tick(),
                relativeTime = tick() - TransformData.startTime,
                object = obj
            })
        end
    end)
    
    table.insert(TransformData.connections, visualsAddedConnection)
    table.insert(TransformData.connections, visualsRemovedConnection)
end

-- üë§ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ï–†–°–û–ù–ê–ñ–ê –ò–ì–†–û–ö–ê
local function monitorPlayerCharacter()
    transformLog("PLAYER", "üë§ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–ï–†–°–û–ù–ê–ñ–ê –ò–ì–†–û–ö–ê")
    
    local function setupCharacterMonitoring(character)
        if not character then return end
        
        transformLog("PLAYER", "üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " .. character.Name)
        
        -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è Tool –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        local characterAddedConnection = character.ChildAdded:Connect(function(obj)
            if obj:IsA("Tool") then
                local name = obj.Name:lower()
                if name:find("bunny") or name:find("dog") or name:find("lab") or 
                   name:find("cat") or name:find("rabbit") or name:find("kg") or name:find("age") then
                    
                    transformLog("STAGE", "üìç –≠–¢–ê–ü: TOOL_CREATED")
                    transformLog("TOOL", string.format("üîß TOOL –°–û–ó–î–ê–ù –í –ü–ï–†–°–û–ù–ê–ñ–ï: %s", obj.Name))
                    
                    TransformData.playerTool = obj
                    local toolSnapshot = createDetailedSnapshot(obj, "player_tool", "TOOL_CREATED")
                    TransformData.snapshots["tool"] = toolSnapshot
                    
                    table.insert(TransformData.transformSequence, {
                        stage = "TOOL_CREATED",
                        timestamp = tick(),
                        relativeTime = tick() - TransformData.startTime,
                        object = obj,
                        snapshot = toolSnapshot
                    })
                    
                    -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –º–æ–¥–µ–ª—å—é –∏–∑ Visuals
                    if TransformData.snapshots["visuals"] then
                        compareSnapshots(TransformData.snapshots["visuals"], toolSnapshot, "VISUALS ‚Üí TOOL")
                    end
                    
                    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ Tool
                    obj.Equipped:Connect(function()
                        transformLog("STAGE", "üìç –≠–¢–ê–ü: TOOL_EQUIPPED")
                        transformLog("TOOL", string.format("üîß TOOL –≠–ö–ò–ü–ò–†–û–í–ê–ù: %s", obj.Name))
                        
                        table.insert(TransformData.transformSequence, {
                            stage = "TOOL_EQUIPPED",
                            timestamp = tick(),
                            relativeTime = tick() - TransformData.startTime,
                            object = obj
                        })
                    end)
                    
                    obj.Unequipped:Connect(function()
                        transformLog("TOOL", string.format("üîß TOOL –°–ù–Ø–¢: %s", obj.Name))
                    end)
                end
            end
        end)
        
        table.insert(TransformData.connections, characterAddedConnection)
    end
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if player.Character then
        setupCharacterMonitoring(player.Character)
    end
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    local characterAddedConnection = player.CharacterAdded:Connect(function(character)
        setupCharacterMonitoring(character)
    end)
    
    table.insert(TransformData.connections, characterAddedConnection)
end

-- üåç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ò–†–ê –ò–ì–†–û–ö–ê
local function monitorPlayerWorld()
    transformLog("WORLD", "üåç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ú–ò–†–ê –ò–ì–†–û–ö–ê")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ –º–∏—Ä–µ –∏–≥—Ä–æ–∫–∞
    local workspaceConnection = Workspace.ChildAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name:find(player.Name) then
            -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –∏–≥—Ä–æ–∫–∞
            local playerFolderConnection = obj.ChildAdded:Connect(function(child)
                if child:IsA("Model") then
                    local name = child.Name:lower()
                    if name:find("bunny") or name:find("dog") or name:find("lab") or 
                       name:find("cat") or name:find("rabbit") or name:find("kg") or name:find("age") then
                        
                        transformLog("STAGE", "üìç –≠–¢–ê–ü: WORLD_MODEL_CREATED")
                        transformLog("WORLD", string.format("üåç –ú–û–î–ï–õ–¨ –í –ú–ò–†–ï: %s", child.Name))
                        
                        TransformData.worldModel = child
                        local worldSnapshot = createDetailedSnapshot(child, "world_model", "WORLD_MODEL_CREATED")
                        TransformData.snapshots["world"] = worldSnapshot
                        
                        table.insert(TransformData.transformSequence, {
                            stage = "WORLD_MODEL_CREATED",
                            timestamp = tick(),
                            relativeTime = tick() - TransformData.startTime,
                            object = child,
                            snapshot = worldSnapshot
                        })
                        
                        -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å Tool
                        if TransformData.snapshots["tool"] then
                            compareSnapshots(TransformData.snapshots["tool"], worldSnapshot, "TOOL ‚Üí WORLD")
                        end
                    end
                end
            end)
            
            table.insert(TransformData.connections, playerFolderConnection)
        end
    end)
    
    table.insert(TransformData.connections, workspaceConnection)
end

-- üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø
local function startTransformAnalysis()
    transformLog("TRANSFORM", "üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø")
    transformLog("TRANSFORM", "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: Visuals ‚Üí Tool ‚Üí World")
    
    TransformData.isAnalyzing = true
    TransformData.startTime = tick()
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
    monitorVisuals()
    monitorPlayerCharacter()
    monitorPlayerWorld()
    
    transformLog("TRANSFORM", "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω!")
    transformLog("TRANSFORM", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø!")
end

-- üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –ü–†–ï–í–†–ê–©–ï–ù–ò–ò
local function generateTransformReport()
    transformLog("CRITICAL", "üìã === –û–¢–ß–ï–¢ –û –ü–†–ï–í–†–ê–©–ï–ù–ò–ò ===")
    
    transformLog("INFO", string.format("üîÑ –í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è: %d", #TransformData.transformSequence))
    
    if #TransformData.transformSequence > 0 then
        transformLog("CRITICAL", "üîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø:")
        
        for i, stage in ipairs(TransformData.transformSequence) do
            transformLog("SEQUENCE", string.format("üîÑ %d. %s", i, stage.stage), {
                Object = stage.object and stage.object.Name or "nil",
                Time = string.format("%.3f —Å–µ–∫", stage.relativeTime)
            })
        end
    end
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–Ω–∏–º–∫–æ–≤
    if TransformData.snapshots["visuals"] and TransformData.snapshots["tool"] then
        transformLog("CRITICAL", "üî• –ö–õ–Æ–ß–ï–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: VISUALS ‚Üí TOOL")
        compareSnapshots(TransformData.snapshots["visuals"], TransformData.snapshots["tool"], "–ü–û–õ–ù–û–ï –ü–†–ï–í–†–ê–©–ï–ù–ò–ï")
    end
    
    if TransformData.snapshots["tool"] and TransformData.snapshots["world"] then
        transformLog("CRITICAL", "üî• –ö–õ–Æ–ß–ï–í–û–ï –°–†–ê–í–ù–ï–ù–ò–ï: TOOL ‚Üí WORLD")
        compareSnapshots(TransformData.snapshots["tool"], TransformData.snapshots["world"], "–†–ê–ó–ú–ï–©–ï–ù–ò–ï –í –ú–ò–†–ï")
    end
    
    transformLog("CRITICAL", "üîÑ –ê–ù–ê–õ–ò–ó –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
end

-- üõë –û–°–¢–ê–ù–û–í–ö–ê –ê–ù–ê–õ–ò–ó–ê
local function stopTransformAnalysis()
    transformLog("TRANSFORM", "üõë –û–°–¢–ê–ù–û–í–ö–ê –ê–ù–ê–õ–ò–ó–ê –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø")
    
    for _, connection in ipairs(TransformData.connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    TransformData.connections = {}
    TransformData.isAnalyzing = false
    
    transformLog("TRANSFORM", "‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createTransformGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VisualsToToolTransformGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 420, 0, 200)
    frame.Position = UDim2.new(1, -440, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.05)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(1, 0.2, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üîÑ VISUALS ‚Üí TOOL ANALYZER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(1, 0.2, 0.5)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üîÑ –ê–ù–ê–õ–ò–ó –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø"
    startBtn.TextColor3 = Color3.new(1, 1, 1)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local reportBtn = Instance.new("TextButton")
    reportBtn.Size = UDim2.new(0.48, 0, 0, 30)
    reportBtn.Position = UDim2.new(0, 10, 0, 90)
    reportBtn.BackgroundColor3 = Color3.new(0.6, 0.1, 0.3)
    reportBtn.BorderSizePixel = 0
    reportBtn.Text = "üìã –û–¢–ß–ï–¢"
    reportBtn.TextColor3 = Color3.new(1, 1, 1)
    reportBtn.TextScaled = true
    reportBtn.Font = Enum.Font.SourceSans
    reportBtn.Parent = frame
    
    local stopBtn = Instance.new("TextButton")
    stopBtn.Size = UDim2.new(0.48, 0, 0, 30)
    stopBtn.Position = UDim2.new(0.52, 0, 0, 90)
    stopBtn.BackgroundColor3 = Color3.new(0.6, 0.1, 0.1)
    stopBtn.BorderSizePixel = 0
    stopBtn.Text = "üõë –°–¢–û–ü"
    stopBtn.TextColor3 = Color3.new(1, 1, 1)
    stopBtn.TextScaled = true
    stopBtn.Font = Enum.Font.SourceSans
    stopBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 70)
    status.Position = UDim2.new(0, 10, 0, 130)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è\nVisuals ‚Üí Tool ‚Üí World\n–û—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üîÑ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω!\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è..."
        status.TextColor3 = Color3.new(1, 0.2, 0.5)
        startBtn.Text = "‚úÖ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù"
        startBtn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
        startBtn.Active = false
        
        startTransformAnalysis()
    end)
    
    reportBtn.MouseButton1Click:Connect(function()
        generateTransformReport()
    end)
    
    stopBtn.MouseButton1Click:Connect(function()
        stopTransformAnalysis()
        status.Text = "üõë –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        status.TextColor3 = Color3.new(1, 0.5, 0.5)
        startBtn.Text = "üîÑ –ê–ù–ê–õ–ò–ó –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø"
        startBtn.BackgroundColor3 = Color3.new(1, 0.2, 0.5)
        startBtn.Active = true
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createTransformConsole()
createTransformGUI()

transformLog("TRANSFORM", "‚úÖ VisualsToToolTransformAnalyzer –≥–æ—Ç–æ–≤!")
transformLog("TRANSFORM", "üîÑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
transformLog("TRANSFORM", "üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: Visuals ‚Üí Tool ‚Üí World")
transformLog("TRANSFORM", "üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä")
transformLog("TRANSFORM", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ê–ù–ê–õ–ò–ó –ü–†–ï–í–†–ê–©–ï–ù–ò–Ø' –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
