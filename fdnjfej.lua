-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º PetScaler)
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 3.0,
    TWEEN_TIME = 3.0,
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Attachment —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
local function fixAttachmentParenting(model)
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é Attachment —Å–≤—è–∑–∏...")
    
    local attachments = {}
    local fixedCount = 0
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ Attachments
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Attachment") then
            table.insert(attachments, obj)
        end
    end
    
    -- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–≤—è–∑–∏
    for _, attachment in pairs(attachments) do
        if attachment.Parent and not attachment.Parent:IsA("BasePart") then
            -- –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π BasePart –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
            local parent = attachment.Parent
            while parent and not parent:IsA("BasePart") do
                parent = parent.Parent
            end
            
            if parent and parent:IsA("BasePart") then
                attachment.Parent = parent
                fixedCount = fixedCount + 1
            else
                -- –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ BasePart, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment
                print("‚ö†Ô∏è –£–¥–∞–ª—è—é –ø—Ä–æ–±–ª–µ–º–Ω—ã–π Attachment:", attachment.Name)
                attachment:Destroy()
            end
        end
    end
    
    print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Attachment —Å–≤—è–∑–µ–π:", fixedCount)
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ò–°–ü–†–ê–í–õ–Ø–ï–ú ATTACHMENT –°–í–Ø–ó–ò –°–†–ê–ó–£ –ü–û–°–õ–ï –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Ø
    fixAttachmentParenting(copy)
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (—Å—Ç–æ—è—á–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
            local upVector = Vector3.new(0, 1, 0) -- –í–≤–µ—Ä—Ö
            local lookVector = originalCFrame.LookVector
            -- –û–±–Ω—É–ª—è–µ–º Y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á—Ç–æ–±—ã –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–∫–ª–æ–Ω—è–ª—Å—è
            lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
            local newCFrame = CFrame.lookAt(finalPosition, finalPosition + lookVector, upVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        else
            -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –±–µ–∑ –∑–µ–º–ª–∏
            local newPosition = originalCFrame.Position + offset
            local upVector = Vector3.new(0, 1, 0)
            local lookVector = Vector3.new(originalCFrame.LookVector.X, 0, originalCFrame.LookVector.Z).Unit
            local newCFrame = CFrame.lookAt(newPosition, newPosition + lookVector, upVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê PETSCALER)
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function copyMotorState(originalMotor, copyMotor, scaleFactor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Motor6D
    -- Transform —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –µ–≥–æ
    local originalTransform = originalMotor.Transform
    local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
    copyMotor.Transform = scaledTransform
    
    -- C0 –∏ C1 - –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–æ–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    local originalC0 = originalMotor.C0
    local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
    copyMotor.C0 = scaledC0
    
    local originalC1 = originalMotor.C1
    local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
    copyMotor.C1 = scaledC1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ CFrame (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        local newSize = originalSize * scaleFactor
        
        -- –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π CFrame –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleFactor) * (relativeCFrame - relativeCFrame.Position)
        local newCFrame = centerCFrame * scaledRelativeCFrame
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∏ CFrame
        local tween = TweenService:Create(part, tweenInfo, {
            Size = newSize,
            CFrame = newCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("üéâ –í—Å–µ " .. #parts .. " —á–∞—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω—ã –≤ " .. scaleFactor .. "x")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
    return true
end

-- === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===
-- –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ Motor6DIdleForcer.lua

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —á–∏—Å—Ç—ã—Ö idle –ø–æ–∑
local function recordPureIdlePoses(petModel)
    print("\nüé¨ === –ó–ê–ü–ò–°–¨ –ß–ò–°–¢–´–• IDLE –ü–û–ó ===")
    
    local motor6Ds = {}
    local idlePoses = {}
    
    -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Motor6D
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motor6Ds, obj)
        end
    end
    
    print("üîß –ù–∞–π–¥–µ–Ω–æ Motor6D:", #motor6Ds)
    
    if #motor6Ds == 0 then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    -- –ù–∞—Ö–æ–¥–∏–º RootPart –∏ —è–∫–æ—Ä–∏–º –¥–ª—è –∑–∞–ø–∏—Å–∏
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    local originalPosition = nil
    
    if rootPart then
        originalPosition = rootPart.Position
        rootPart.Anchored = true
        print("‚öì RootPart –∑–∞—è–∫–æ—Ä–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏")
    end
    
    -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Animator") then
            local tracks = obj:GetPlayingAnimationTracks()
            for _, track in pairs(tracks) do
                local name = track.Animation.Name:lower()
                if name:find("walk") or name:find("run") or name:find("move") then
                    track:Stop()
                    print("üíÄ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                end
            end
        end
    end
    
    -- –û–ñ–ò–î–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –ü–ï–†–ï–•–û–î–ê –ö IDLE
    print("‚è≥ –û–∂–∏–¥–∞—é 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ idle...")
    wait(3) -- –î–∞–µ–º –≤—Ä–µ–º—è –ø–∏—Ç–æ–º—Ü—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–π—Ç–∏ –≤ idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ (–£–í–ï–õ–ò–ß–ï–ù–û –î–õ–Ø –ü–û–õ–ù–û–ô IDLE –ê–ù–ò–ú–ê–¶–ò–ò)
    local recordingTime = 8 -- 8 —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ idle —Ü–∏–∫–ª–∞
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local totalFrames = recordingTime * frameRate
    
    print("üìπ –ó–∞–ø–∏—Å—ã–≤–∞—é –ü–û–õ–ù–£–Æ idle –∞–Ω–∏–º–∞—Ü–∏—é:", recordingTime, "—Å–µ–∫—É–Ω–¥ (", totalFrames, "–∫–∞–¥—Ä–æ–≤)")
    
    local currentFrame = 0
    local startTime = tick()
    
    local recordConnection
    recordConnection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        if elapsed >= frameInterval * currentFrame then
            currentFrame = currentFrame + 1
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑—ã Motor6D
            local framePoses = {}
            for _, motor in pairs(motor6Ds) do
                framePoses[motor.Name] = {
                    C0 = motor.C0,
                    C1 = motor.C1,
                    Transform = motor.Transform
                }
            end
            
            table.insert(idlePoses, framePoses)
            
            if currentFrame >= totalFrames then
                recordConnection:Disconnect()
                print("üìπ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–ø–∏—Å–∞–Ω–æ –∫–∞–¥—Ä–æ–≤:", #idlePoses)
            end
        end
    end)
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    while #idlePoses < totalFrames and recordConnection.Connected do
        wait(0.1)
    end
    
    return idlePoses, motor6Ds, originalPosition
end

-- –§—É–Ω–∫—Ü–∏—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ idle
local function forceOnlyIdleAnimation(idlePoses, motor6Ds, petModel, originalPosition)
    print("\nüî• === –ê–ì–†–ï–°–°–ò–í–ù–û–ï –§–û–†–°–ò–†–û–í–ê–ù–ò–ï –¢–û–õ–¨–ö–û IDLE ===")
    
    if not idlePoses or #idlePoses == 0 then
        print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö idle –ø–æ–∑!")
        return nil
    end
    
    local humanoid = petModel:FindFirstChild("Humanoid")
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("HumanoidRootPart")
    
    local currentFrame = 1
    local frameRate = 60
    local frameInterval = 1 / frameRate
    local lastFrameTime = tick()
    
    local forceConnection
    forceConnection = RunService.Heartbeat:Connect(function()
        local now = tick()
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid.JumpPower = 0
            humanoid.PlatformStand = true
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
        if rootPart and originalPosition then
            if rootPart.Position ~= originalPosition then
                rootPart.Position = originalPosition
                print("üîÑ –ü–∏—Ç–æ–º–µ—Ü —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ")
            end
        end
        
        -- –ê–ì–†–ï–°–°–ò–í–ù–û —É–Ω–∏—á—Ç–æ–∂–∞–µ–º walking –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
        for _, obj in pairs(petModel:GetDescendants()) do
            if obj:IsA("Animator") then
                local tracks = obj:GetPlayingAnimationTracks()
                for _, track in pairs(tracks) do
                    local name = track.Animation.Name:lower()
                    if name:find("walk") or name:find("run") or name:find("move") then
                        track:Stop()
                        print("üíÄ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ walking –∞–Ω–∏–º–∞—Ü–∏—è:", track.Animation.Name)
                    end
                end
            end
        end
        
        -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã
        if now - lastFrameTime >= frameInterval then
            lastFrameTime = now
            
            local framePoses = idlePoses[currentFrame]
            
            if framePoses then
                -- –ü—Ä–∏–º–µ–Ω—è–µ–º idle –ø–æ–∑—ã –∫–æ –≤—Å–µ–º Motor6D
                for _, motor in pairs(motor6Ds) do
                    local pose = framePoses[motor.Name]
                    if pose then
                        pcall(function()
                            motor.C0 = pose.C0
                            motor.C1 = pose.C1
                            motor.Transform = pose.Transform
                        end)
                    end
                end
            end
            
            -- –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–∞–¥—Ä—É —Å –ü–õ–ê–í–ù–´–ú –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º
            currentFrame = currentFrame + 1
            if currentFrame > #idlePoses then
                currentFrame = 1  -- –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º idle
                print("üîÑ –ü–æ–ª–Ω—ã–π idle —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ")
            end
        end
    end)
    
    print("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üî• –ü–∏—Ç–æ–º–µ—Ü –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¢–û–õ–¨–ö–û idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    print("üíÄ –í–°–ï walking –∞–Ω–∏–º–∞—Ü–∏–∏ —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä!")
    
    return forceConnection
end

-- –§—É–Ω–∫—Ü–∏—è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô IDLE –°–ò–°–¢–ï–ú–´ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
local function startForceIdleSystem(originalModel, copyModel)
    print("\nüî• === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø IDLE –°–ò–°–¢–ï–ú–ê ===")  
    
    -- –ù–∞—Ö–æ–¥–∏–º Motor6D –≤ –æ–±–µ–∏—Ö –º–æ–¥–µ–ª—è—Ö
    local originalMotors = {}
    local copyMotors = {}
    
    for _, obj in pairs(originalModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(originalMotors, obj)
        end
    end
    
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(copyMotors, obj)
        end
    end
    
    print("üîß Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D!")
        return nil
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    -- –ù–∞–π–¥–µ–º rootPart –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ idle
    local originalRootPart = originalModel:FindFirstChild("RootPart") or originalModel:FindFirstChild("HumanoidRootPart") or originalModel:FindFirstChild("Torso")
    
    if not originalRootPart then
        print("‚ùå rootPart –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ!")
        return nil
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω rootPart –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏:", originalRootPart.Name)
    
    -- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ idle
    local idleFrames = {}
    local isRecording = false
    local isLooping = false
    local recordingStartTime = 0
    local lastPosition = originalRootPart.Position
    local idleFrameCount = 0
    local requiredIdleFrames = 30 -- 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç–∏
    local recordingTime = 3.0 -- 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–ø–∏—Å–∏
    
    print("üí° –ñ–¥—É –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º–µ—Ü –≤—Å—Ç–∞–Ω–µ—Ç –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∑–∞–ø–∏—Å–∏ idle...")
    
    local connection = RunService.Heartbeat:Connect(function()
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not originalModel.Parent or not copyModel.Parent or not originalRootPart.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏—Å—Ç–µ–º—É")
            connection:Disconnect()
            return
        end
        
        -- === –≠–¢–ê–ü 1: –ó–ê–ü–ò–°–¨ IDLE –ê–ù–ò–ú–ê–¶–ò–ò ===
        if not isLooping then
            -- –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º idle —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            local currentPosition = originalRootPart.Position
            local positionChange = (currentPosition - lastPosition).Magnitude
            
            if positionChange < 0.05 then -- –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥
                idleFrameCount = idleFrameCount + 1
            else
                idleFrameCount = 0
                if isRecording then
                    print("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ø—Ä–µ—Ä–≤–∞–Ω–∞ - –ø–∏—Ç–æ–º–µ—Ü –Ω–∞—á–∞–ª –¥–≤–∏–≥–∞—Ç—å—Å—è")
                    isRecording = false
                    idleFrames = {}
                    recordingStartTime = 0
                end
            end
            
            lastPosition = currentPosition
            
            -- –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º–µ—Ü —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
            if not isRecording and idleFrameCount >= requiredIdleFrames then
                print("üé¨ –ù–ê–ß–ò–ù–ê–Æ –ó–ê–ü–ò–°–¨ IDLE –ê–ù–ò–ú–ê–¶–ò–ò!")
                isRecording = true
                idleFrames = {}
                recordingStartTime = tick()
            end
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã idle –∞–Ω–∏–º–∞—Ü–∏–∏
            if isRecording and idleFrameCount >= requiredIdleFrames then
                local frame = {}
                
                for key, originalMotor in pairs(originalMap) do
                    if originalMotor.Parent then
                        frame[key] = {
                            C0 = originalMotor.C0,
                            C1 = originalMotor.C1
                        }
                    end
                end
                
                table.insert(idleFrames, frame)
                
                -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                if tick() - recordingStartTime >= recordingTime then
                    print("‚úÖ –ó–ê–ü–ò–°–¨ –ó–ê–í–ï–†–®–ï–ù–ê! –ó–∞–ø–∏—Å–∞–Ω–æ:", #idleFrames, "–∫–∞–¥—Ä–æ–≤ idle")
                    print("üîÑ –ù–ê–ß–ò–ù–ê–Æ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–ï!")
                    isRecording = false
                    isLooping = true
                end
            end
        end
        
        -- === –≠–¢–ê–ü 2: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–¶–ò–ö–õ–ò–í–ê–ù–ò–ï IDLE –ù–ê –ö–û–ü–ò–ò ===
        if isLooping and #idleFrames > 0 then
            -- –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –¥–ª—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
            local frameIndex = (tick() * 30) % #idleFrames -- 30 FPS
            frameIndex = math.floor(frameIndex) + 1
            
            local currentFrame = idleFrames[frameIndex]
            
            -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º idle –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –∫ –∫–æ–ø–∏–∏
            for key, motorData in pairs(currentFrame) do
                local copyMotor = copyMap[key]
                if copyMotor and copyMotor.Parent then
                    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                    local originalC0 = motorData.C0
                    local originalC1 = motorData.C1
                    
                    local scaledC0 = CFrame.new(originalC0.Position * CONFIG.SCALE_FACTOR) * (originalC0 - originalC0.Position)
                    local scaledC1 = CFrame.new(originalC1.Position * CONFIG.SCALE_FACTOR) * (originalC1 - originalC1.Position)
                    
                    copyMotor.C0 = scaledC0
                    copyMotor.C1 = scaledC1
                end
            end
        end
    end)
    
    print("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø IDLE –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
    print("üìç –ö–æ–ø–∏—è –±—É–¥–µ—Ç –í–°–ï–ì–î–ê –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ idle –∞–Ω–∏–º–∞—Ü–∏—é!")
    print("üî• –ù–∏–∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ö–æ–¥—å–±–µ!")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –®–∞–≥ 3: –°–ù–ê–ß–ê–õ–ê –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï ===")
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –®–∞–≥ 4: –ü–û–°–õ–ï –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
    wait(CONFIG.TWEEN_TIME + 1) -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π idle —Å–∏—Å—Ç–µ–º—ã
    print("\nüî• === –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø IDLE –°–ò–°–¢–ï–ú–ê ===")
    
    local idleConnection = startForceIdleSystem(petModel, petCopy)
    
    if idleConnection then
        print("üéâ === –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è idle —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        print("üìç –ö–æ–ø–∏—è –í–°–ï–ì–î–ê –∏–≥—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ idle –∞–Ω–∏–º–∞—Ü–∏—é")
        print("üöÄ –ù–∏–∫–∞–∫–æ–π —Å—Ç–∞—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ö–æ–¥—å–±–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞!")
        print("üî• –ö–æ–ø–∏—è –ù–ò–ö–û–ì–î–ê –Ω–µ –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å!")
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ idle —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
