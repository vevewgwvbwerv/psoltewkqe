-- üéØ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï
-- –ò–∑—É—á–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—É—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é idle –∞–Ω–∏–º–∞—Ü–∏—é –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

-- üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
local CONFIG = {
    ANALYSIS_DURATION = 30,  -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º 30 —Å–µ–∫—É–Ω–¥
    LOG_INTERVAL = 0.5,      -- –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
    MOTOR6D_PRECISION = 3    -- –¢–æ—á–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —É–≥–ª–æ–≤
}

-- üîç –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï
local function findHandPet()
    local character = player.Character
    if not character then
        return nil
    end
    
    -- –ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ (–æ–±—ã—á–Ω–æ –≤ Backpack –∏–ª–∏ –∫–∞–∫ Tool)
    local backpack = player.Backpack
    local handTool = character:FindFirstChildOfClass("Tool")
    
    print("üîç === –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫–µ
    if handTool then
        print("üéØ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", handTool.Name)
        
        -- –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        for _, child in pairs(handTool:GetChildren()) do
            if child:IsA("Model") and child.Name:find("{") and child.Name:find("}") then
                print("üêï –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ:", child.Name)
                return child
            end
        end
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—é–∫–∑–∞–∫
    if backpack then
        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA("Tool") then
                for _, child in pairs(tool:GetChildren()) do
                    if child:IsA("Model") and child.Name:find("{") and child.Name:find("}") then
                        print("üéí –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –≤ —Ä—é–∫–∑–∞–∫–µ:", child.Name)
                        print("üí° –í–æ–∑—å–º–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                        return child
                    end
                end
            end
        end
    end
    
    print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    return nil
end

-- ü¶¥ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò
local function analyzeModelStructure(petModel)
    print("\nü¶¥ === –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò ===")
    
    local motor6Ds = {}
    local animators = {}
    local humanoids = {}
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motor6Ds, obj)
        elseif obj:IsA("Animator") then
            table.insert(animators, obj)
        elseif obj:IsA("Humanoid") then
            table.insert(humanoids, obj)
        end
    end
    
    print("üìä –ù–∞–π–¥–µ–Ω–æ Motor6D:", #motor6Ds)
    print("üìä –ù–∞–π–¥–µ–Ω–æ Animator:", #animators)
    print("üìä –ù–∞–π–¥–µ–Ω–æ Humanoid:", #humanoids)
    
    -- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Motor6D
    if #motor6Ds > 0 then
        print("\nüîß MOTOR6D –î–ï–¢–ê–õ–ò:")
        for i, motor in ipairs(motor6Ds) do
            print(string.format("  %d. %s (%s ‚Üí %s)", 
                i, motor.Name, 
                motor.Part0 and motor.Part0.Name or "nil",
                motor.Part1 and motor.Part1.Name or "nil"))
        end
    end
    
    -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∏–º–∞—Ç–æ—Ä–∞—Ö
    if #animators > 0 then
        print("\nüé≠ ANIMATOR –î–ï–¢–ê–õ–ò:")
        for i, animator in ipairs(animators) do
            print(string.format("  %d. %s (Parent: %s)", 
                i, animator.Name, animator.Parent.Name))
        end
    end
    
    return motor6Ds, animators, humanoids
end

-- üé¨ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ê–ù–ò–ú–ê–¶–ò–ô
local function analyzeActiveAnimations(animators)
    print("\nüé¨ === –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–´–• –ê–ù–ò–ú–ê–¶–ò–ô ===")
    
    for i, animator in ipairs(animators) do
        print(string.format("\nüé≠ –ê–Ω–∏–º–∞—Ç–æ—Ä %d: %s", i, animator.Name))
        
        -- –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–∏
        local tracks = animator:GetPlayingAnimationTracks()
        print("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤:", #tracks)
        
        for j, track in ipairs(tracks) do
            print(string.format("  üéµ –¢—Ä–µ–∫ %d:", j))
            print(string.format("    ID: %s", track.Animation.AnimationId))
            print(string.format("    –í—Ä–µ–º—è: %.2f / %.2f", track.TimePosition, track.Length))
            print(string.format("    –°–∫–æ—Ä–æ—Å—Ç—å: %.2f", track.Speed))
            print(string.format("    –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ: %s", tostring(track.Looped)))
            print(string.format("    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s", tostring(track.Priority)))
            print(string.format("    –í–µ—Å: %.2f", track.WeightCurrent))
        end
    end
end

-- üìä –ó–ê–ü–ò–°–¨ MOTOR6D –°–û–°–¢–û–Ø–ù–ò–ô
local function recordMotor6DStates(motor6Ds, duration)
    print("\nüìä === –ó–ê–ü–ò–°–¨ MOTOR6D –°–û–°–¢–û–Ø–ù–ò–ô ===")
    print(string.format("‚è±Ô∏è –ó–∞–ø–∏—Å—ã–≤–∞–µ–º %d —Å–µ–∫—É–Ω–¥...", duration))
    
    local recordings = {}
    local startTime = tick()
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Motor6D
    for _, motor in ipairs(motor6Ds) do
        recordings[motor.Name] = {
            motor = motor,
            states = {}
        }
    end
    
    local connection = RunService.Heartbeat:Connect(function()
        local elapsed = tick() - startTime
        
        if elapsed >= duration then
            connection:Disconnect()
            return
        end
        
        -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ Motor6D
        for _, motor in ipairs(motor6Ds) do
            if motor.Parent then
                local c0 = motor.C0
                local c1 = motor.C1
                
                -- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —É–≥–ª—ã –≠–π–ª–µ—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                local x, y, z = c0:ToEulerAnglesXYZ()
                
                table.insert(recordings[motor.Name].states, {
                    time = elapsed,
                    c0 = c0,
                    c1 = c1,
                    angles = {
                        x = math.deg(x),
                        y = math.deg(y),
                        z = math.deg(z)
                    }
                })
            end
        end
        
        -- –ü—Ä–æ–≥—Ä–µ—Å—Å
        if math.floor(elapsed) % 5 == 0 and math.floor(elapsed * 10) % 10 == 0 then
            print(string.format("‚è±Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f/%.1f —Å–µ–∫—É–Ω–¥", elapsed, duration))
        end
    end)
    
    -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    wait(duration + 1)
    
    return recordings
end

-- üìà –ê–ù–ê–õ–ò–ó –ó–ê–ü–ò–°–ê–ù–ù–´–• –î–ê–ù–ù–´–•
local function analyzeRecordings(recordings)
    print("\nüìà === –ê–ù–ê–õ–ò–ó –ó–ê–ü–ò–°–ê–ù–ù–´–• –î–ê–ù–ù–´–• ===")
    
    for motorName, data in pairs(recordings) do
        local states = data.states
        if #states > 0 then
            print(string.format("\nüîß Motor6D: %s", motorName))
            print(string.format("üìä –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: %d", #states))
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤
            local firstState = states[1]
            local lastState = states[#states]
            
            local deltaX = math.abs(lastState.angles.x - firstState.angles.x)
            local deltaY = math.abs(lastState.angles.y - firstState.angles.y)
            local deltaZ = math.abs(lastState.angles.z - firstState.angles.z)
            
            print(string.format("üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–æ–≤:"))
            print(string.format("    X: %.2f¬∞ (%.2f¬∞ ‚Üí %.2f¬∞)", deltaX, firstState.angles.x, lastState.angles.x))
            print(string.format("    Y: %.2f¬∞ (%.2f¬∞ ‚Üí %.2f¬∞)", deltaY, firstState.angles.y, lastState.angles.y))
            print(string.format("    Z: %.2f¬∞ (%.2f¬∞ ‚Üí %.2f¬∞)", deltaZ, firstState.angles.z, lastState.angles.z))
            
            -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            local totalDelta = deltaX + deltaY + deltaZ
            if totalDelta > 5 then
                print("‚úÖ –ê–ö–¢–ò–í–ù–´–ô - —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∞–Ω–∏–º–∞—Ü–∏–∏")
            else
                print("‚ö™ –°–¢–ê–¢–ò–ß–ù–´–ô - –Ω–µ –∞–Ω–∏–º–∏—Ä—É–µ—Ç—Å—è")
            end
        end
    end
end

-- üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
local function startHandPetAnalysis()
    print("üéØ === –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ò–¢–û–ú–¶–ê –í –†–£–ö–ï ===")
    print("üéØ –¶–µ–ª—å: –∏–∑—É—á–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é idle –∞–Ω–∏–º–∞—Ü–∏—é")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ
    local handPet = findHandPet()
    if not handPet then
        return
    end
    
    -- –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    local motor6Ds, animators, humanoids = analyzeModelStructure(handPet)
    
    -- –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π
    if #animators > 0 then
        analyzeActiveAnimations(animators)
    end
    
    -- –®–∞–≥ 4: –ó–∞–ø–∏—Å—å Motor6D —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if #motor6Ds > 0 then
        print(string.format("\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ %d —Å–µ–∫—É–Ω–¥...", CONFIG.ANALYSIS_DURATION))
        local recordings = recordMotor6DStates(motor6Ds, CONFIG.ANALYSIS_DURATION)
        
        -- –®–∞–≥ 5: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        analyzeRecordings(recordings)
    end
    
    print("\nüéâ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===")
    print("üí° –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–∞—è idle –∞–Ω–∏–º–∞—Ü–∏—è!")
end

-- üöÄ –ó–ê–ü–£–°–ö
startHandPetAnalysis()
