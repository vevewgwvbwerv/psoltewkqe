-- üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DRAGONFLY –í –†–£–ö–ï
-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏, Motor6D, CFrame, —Å–∫—Ä–∏–ø—Ç—ã, —Ç—Ä–µ–∫–∏

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

print("üîç === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DRAGONFLY ===")
print("=" .. string.rep("=", 60))

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
local monitoringConnection = nil
local previousStates = {}

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏
local function deepAnalyzeModel(model, indent, path)
    indent = indent or ""
    path = path or model.Name
    
    print(indent .. "üìÅ " .. model.Name .. " (" .. model.ClassName .. ") - Path: " .. path)
    
    -- –ê–Ω–∞–ª–∏–∑ PrimaryPart
    if model.PrimaryPart then
        print(indent .. "  ‚úÖ PrimaryPart: " .. model.PrimaryPart.Name)
    else
        print(indent .. "  ‚ùå PrimaryPart –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    for _, child in pairs(model:GetChildren()) do
        local childPath = path .. "." .. child.Name
        
        if child:IsA("Model") then
            print(indent .. "  üìÅ SUB-MODEL: " .. child.Name)
            deepAnalyzeModel(child, indent .. "    ", childPath)
            
        elseif child:IsA("BasePart") then
            -- –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏
            local meshInfo = ""
            local mesh = child:FindFirstChildOfClass("SpecialMesh") or child:FindFirstChildOfClass("MeshPart")
            if mesh then
                if mesh:IsA("SpecialMesh") then
                    meshInfo = " [Mesh: " .. mesh.MeshType.Name .. ", Scale: " .. tostring(mesh.Scale) .. "]"
                else
                    meshInfo = " [MeshPart: " .. tostring(mesh.MeshId) .. "]"
                end
            end
            
            print(indent .. "  üß± PART: " .. child.Name .. " (" .. child.Material.Name .. ", " .. child.BrickColor.Name .. ")" .. meshInfo)
            print(indent .. "    üìç Position: " .. tostring(child.Position))
            print(indent .. "    üîÑ CFrame: " .. tostring(child.CFrame))
            print(indent .. "    ‚öñÔ∏è Size: " .. tostring(child.Size))
            print(indent .. "    üîí Anchored: " .. tostring(child.Anchored))
            print(indent .. "    üëÅÔ∏è Transparency: " .. child.Transparency)
            
            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            previousStates[childPath] = {
                CFrame = child.CFrame,
                Position = child.Position,
                Rotation = child.Rotation
            }
            
        elseif child:IsA("Motor6D") then
            print(indent .. "  ‚öôÔ∏è MOTOR6D: " .. child.Name)
            print(indent .. "    üîó Part0: " .. (child.Part0 and child.Part0.Name or "NIL"))
            print(indent .. "    üîó Part1: " .. (child.Part1 and child.Part1.Name or "NIL"))
            print(indent .. "    üìç C0: " .. tostring(child.C0))
            print(indent .. "    üìç C1: " .. tostring(child.C1))
            
            -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Motor6D
            previousStates[childPath] = {
                C0 = child.C0,
                C1 = child.C1
            }
            
        elseif child:IsA("Attachment") then
            print(indent .. "  üìé ATTACHMENT: " .. child.Name)
            print(indent .. "    üìç Position: " .. tostring(child.Position))
            print(indent .. "    üîÑ CFrame: " .. tostring(child.CFrame))
            
        elseif child:IsA("Humanoid") then
            print(indent .. "  üë§ HUMANOID: " .. child.Name)
            print(indent .. "    ‚ù§Ô∏è Health: " .. child.Health .. "/" .. child.MaxHealth)
            print(indent .. "    üö∂ WalkSpeed: " .. child.WalkSpeed)
            print(indent .. "    ü¶ò JumpPower: " .. child.JumpPower)
            
            -- –ê–Ω–∞–ª–∏–∑ Animator
            local animator = child:FindFirstChild("Animator")
            if animator then
                print(indent .. "    üé≠ ANIMATOR –ù–ê–ô–î–ï–ù!")
                
                -- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
                local tracks = animator:GetPlayingAnimationTracks()
                print(indent .. "    üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: " .. #tracks)
                
                for i, track in pairs(tracks) do
                    print(indent .. "      üé¨ –¢—Ä–µ–∫ " .. i .. ": " .. (track.Animation and track.Animation.AnimationId or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                    print(indent .. "        ‚èØÔ∏è –ò–≥—Ä–∞–µ—Ç: " .. tostring(track.IsPlaying))
                    print(indent .. "        üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å: " .. track.WeightCurrent)
                    print(indent .. "        ‚è±Ô∏è –í—Ä–µ–º—è: " .. track.TimePosition)
                    print(indent .. "        üîÑ –ó–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ—Å—Ç—å: " .. tostring(track.Looped))
                end
            else
                print(indent .. "    ‚ùå ANIMATOR –ù–ï –ù–ê–ô–î–ï–ù!")
            end
            
        elseif child:IsA("LocalScript") or child:IsA("Script") then
            print(indent .. "  üìú SCRIPT: " .. child.Name .. " (" .. child.ClassName .. ")")
            print(indent .. "    üîß Enabled: " .. tostring(child.Enabled))
            
        elseif child:IsA("RemoteEvent") or child:IsA("RemoteFunction") then
            print(indent .. "  üì° REMOTE: " .. child.Name .. " (" .. child.ClassName .. ")")
            
        else
            print(indent .. "  ‚ùì OTHER: " .. child.Name .. " (" .. child.ClassName .. ")")
        end
    end
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
local function startRealTimeMonitoring(model)
    print("\nüîÑ === –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ===")
    
    local frameCount = 0
    local changeCount = 0
    
    monitoringConnection = RunService.Heartbeat:Connect(function()
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 6 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É)
        if frameCount % 10 == 0 then
            local hasChanges = false
            
            for path, previousState in pairs(previousStates) do
                local parts = string.split(path, ".")
                local currentObj = model
                
                -- –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –ø–æ –ø—É—Ç–∏
                for i = 2, #parts do
                    currentObj = currentObj:FindFirstChild(parts[i])
                    if not currentObj then break end
                end
                
                if currentObj then
                    if currentObj:IsA("BasePart") then
                        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è CFrame –ø–æ–∑–∏—Ü–∏–∏
                        if (currentObj.CFrame.Position - previousState.CFrame.Position).Magnitude > 0.001 then
                            print("üîÑ [" .. frameCount .. "] –î–í–ò–ñ–ï–ù–ò–ï " .. path .. ": " .. tostring(currentObj.CFrame.Position))
                            previousStates[path].CFrame = currentObj.CFrame
                            hasChanges = true
                            changeCount = changeCount + 1
                        end
                        
                        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è CFrame –ø–æ–≤–æ—Ä–æ—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                        local currentAngles = {currentObj.CFrame:ToEulerAnglesXYZ()}
                        local previousAngles = {previousState.CFrame:ToEulerAnglesXYZ()}
                        local angleDiff = math.abs(currentAngles[1] - previousAngles[1]) + math.abs(currentAngles[2] - previousAngles[2]) + math.abs(currentAngles[3] - previousAngles[3])
                        
                        if angleDiff > 0.01 then -- –ü–æ—Ä–æ–≥ –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
                            print("üîÑ [" .. frameCount .. "] –ü–û–í–û–†–û–¢ " .. path .. ": X=" .. math.deg(currentAngles[1]) .. ", Y=" .. math.deg(currentAngles[2]) .. ", Z=" .. math.deg(currentAngles[3]))
                            previousStates[path].CFrame = currentObj.CFrame
                            hasChanges = true
                            changeCount = changeCount + 1
                        end
                        
                        -- –û—Å–æ–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∫—Ä—ã–ª—å–µ–≤
                        if path:find("Wing") or path:find("–ö—Ä—ã–ª–æ") then
                            -- –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫—Ä—ã–ª—å–µ–≤
                            if angleDiff > 0.001 then
                                print("ü¶Ö [" .. frameCount .. "] –ö–†–´–õ–û –ú–ê–•–ê–ï–¢ " .. path .. ": " .. math.deg(angleDiff) .. " –≥—Ä–∞–¥—É—Å–æ–≤")
                            end
                        end
                        
                    elseif currentObj:IsA("Motor6D") then
                        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è Motor6D
                        if (currentObj.C0.Position - previousState.C0.Position).Magnitude > 0.001 then
                            print("‚öôÔ∏è [" .. frameCount .. "] MOTOR6D C0 " .. path .. ": " .. tostring(currentObj.C0))
                            previousStates[path].C0 = currentObj.C0
                            hasChanges = true
                            changeCount = changeCount + 1
                        end
                        
                        if (currentObj.C1.Position - previousState.C1.Position).Magnitude > 0.001 then
                            print("‚öôÔ∏è [" .. frameCount .. "] MOTOR6D C1 " .. path .. ": " .. tostring(currentObj.C1))
                            previousStates[path].C1 = currentObj.C1
                            hasChanges = true
                            changeCount = changeCount + 1
                        end
                    end
                end
            end
            
            -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 300 –∫–∞–¥—Ä–æ–≤ (5 —Å–µ–∫—É–Ω–¥)
            if frameCount % 300 == 0 then
                print("üìä [–°–¢–ê–¢–ò–°–¢–ò–ö–ê " .. frameCount .. "] –ò–∑–º–µ–Ω–µ–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: " .. changeCount)
            end
        end
    end)
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ù–∞–±–ª—é–¥–∞—é –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...")
    print("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑")
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local playerChar = player.Character
    if not playerChar then
        print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    print("üéí –ü–æ–∏—Å–∫ Dragonfly –≤ —Ä—É–∫–∞—Ö...")
    
    for _, tool in pairs(playerChar:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name, "%[") and string.find(tool.Name, "KG%]") then
            print("‚úÖ –ù–∞–π–¥–µ–Ω Tool:", tool.Name)
            
            print("\nüìã –ü–û–õ–ù–û–ï –°–û–î–ï–†–ñ–ò–ú–û–ï TOOL:")
            print("üîç –ü—Ä—è–º—ã–µ –¥–µ—Ç–∏ Tool:")
            
            -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º—ã—Ö –¥–µ—Ç–µ–π Tool
            for _, child in pairs(tool:GetChildren()) do
                print("üìÅ –û–ë–™–ï–ö–¢:", child.Name, "(", child.ClassName, ")")
                
                if child:IsA("Model") then
                    print("  üéØ –ù–ê–ô–î–ï–ù–ê –ú–û–î–ï–õ–¨:", child.Name)
                    deepAnalyzeModel(child, "    ")
                    startRealTimeMonitoring(child)
                elseif child:IsA("BasePart") then
                    print("  üß± –ß–ê–°–¢–¨:", child.Name, "- –ú–∞—Ç–µ—Ä–∏–∞–ª:", child.Material.Name)
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ—à–∏
                    for _, mesh in pairs(child:GetChildren()) do
                        if mesh:IsA("SpecialMesh") or mesh:IsA("MeshPart") then
                            print("    üî≥ –ú–ï–®:", mesh.Name, "(", mesh.ClassName, ")")
                        end
                    end
                elseif child:IsA("LocalScript") or child:IsA("Script") then
                    print("  üìú –°–ö–†–ò–ü–¢:", child.Name, "- –ê–∫—Ç–∏–≤–µ–Ω:", child.Enabled)
                else
                    print("  ‚ùì –î–†–£–ì–û–ï:", child.Name, "(", child.ClassName, ")")
                end
            end
            
            print("\nüîç –í–°–ï –ü–û–¢–û–ú–ö–ò Tool (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ):")
            
            -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï–• –ø–æ—Ç–æ–º–∫–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            for _, descendant in pairs(tool:GetDescendants()) do
                local depth = 0
                local parent = descendant.Parent
                while parent and parent ~= tool do
                    depth = depth + 1
                    parent = parent.Parent
                end
                
                local indent = string.rep("  ", depth)
                print(indent .. "üìÑ " .. descendant.Name .. " (" .. descendant.ClassName .. ")")
                
                if descendant:IsA("Model") and not descendant.Name:find("Handle") then
                    print(indent .. "  üéØ –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê –ù–ê–ô–î–ï–ù–ê!")
                    startRealTimeMonitoring(descendant)
                end
            end
            
            return
        end
    end
    
    print("‚ùå Dragonfly –≤ —Ä—É–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
end

-- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
if monitoringConnection then
    monitoringConnection:Disconnect()
    print("‚èπÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

main()
