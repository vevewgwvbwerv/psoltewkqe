-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 100,
    START_SCALE = 0.3,   -- –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–∞–ª–µ–Ω—å–∫–∏–π)
    FINAL_SCALE = 1.0,   -- –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π)
    TWEEN_TIME = 3.0,    -- –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–æ—Å—Ç–∞ (—Å–µ–∫—É–Ω–¥—ã)
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (—Å—Ç–æ—è—á–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ)
            local upVector = Vector3.new(0, 1, 0) -- –í–≤–µ—Ä—Ö
            local lookVector = originalCFrame.LookVector
            -- –û–±–Ω—É–ª—è–µ–º Y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á—Ç–æ–±—ã –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–∫–ª–æ–Ω—è–ª—Å—è
            lookVector = Vector3.new(lookVector.X, 0, lookVector.Z).Unit
            local newCFrame = CFrame.lookAt(finalPosition, finalPosition + lookVector, upVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        else
            -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –±–µ–∑ –∑–µ–º–ª–∏
            local newPosition = originalCFrame.Position + offset
            local upVector = Vector3.new(0, 1, 0)
            local lookVector = Vector3.new(originalCFrame.LookVector.X, 0, originalCFrame.LookVector.Z).Unit
            local newCFrame = CFrame.lookAt(newPosition, newPosition + lookVector, upVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –≤ —Å—Ç–æ—è—á–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê PETSCALER)
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è: 10-15 —Å–µ–∫ idle, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ö–æ–¥—å–±–∞
local function createSmartBehaviorController(petModel)
    print("üß† –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è: 10-15 —Å–µ–∫ idle, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ö–æ–¥—å–±–∞")
    
    local rootPart = petModel:FindFirstChild("RootPart") or 
                     petModel:FindFirstChild("Torso") or 
                     petModel:FindFirstChild("HumanoidRootPart")
    
    if not rootPart then
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return nil
    end
    
    -- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–æ–≤
    local IDLE_TIME_MIN = 10 -- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è idle (—Å–µ–∫)
    local IDLE_TIME_MAX = 15 -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è idle (—Å–µ–∫)
    local WALK_TIME_MAX = 2  -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ö–æ–¥—å–±—ã (—Å–µ–∫)
    
    -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    local currentState = "IDLE" -- "IDLE" –∏–ª–∏ "WALK"
    local stateStartTime = tick()
    local nextStateChangeTime = tick() + math.random(IDLE_TIME_MIN, IDLE_TIME_MAX)
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    local basePosition = rootPart.Position
    
    print("  üìç –ë–∞–∑–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:", basePosition)
    print("  ‚è∞ –ù–∞—á–∏–Ω–∞—é —Å IDLE —Ä–µ–∂–∏–º–∞ –Ω–∞", math.floor(nextStateChangeTime - tick()), "—Å–µ–∫")
    
    -- –ù–∞—Ö–æ–¥–∏–º Humanoid –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
    local humanoid = petModel:FindFirstChildOfClass("Humanoid")
    
    -- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ IDLE —Ä–µ–∂–∏–º
    local function switchToIdle()
        currentState = "IDLE"
        stateStartTime = tick()
        nextStateChangeTime = tick() + math.random(IDLE_TIME_MIN, IDLE_TIME_MAX)
        
        print("  üò¥ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –≤ IDLE –Ω–∞", math.floor(nextStateChangeTime - tick()), "—Å–µ–∫")
        
        -- –ó–∞—è–∫–æ—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        rootPart.Anchored = true
        
        -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Humanoid
        if humanoid then
            humanoid.WalkSpeed = 0
            humanoid:MoveTo(basePosition)
        end
        
        -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        rootPart.CFrame = CFrame.new(basePosition, basePosition + Vector3.new(0, 0, 1))
    end
    
    -- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ WALK —Ä–µ–∂–∏–º
    local function switchToWalk()
        currentState = "WALK"
        stateStartTime = tick()
        nextStateChangeTime = tick() + math.random(1, WALK_TIME_MAX)
        
        print("  üö∂ –†–∞–∑—Ä–µ—à–∞—é —Ö–æ–¥—å–±—É –Ω–∞", math.floor(nextStateChangeTime - tick()), "—Å–µ–∫")
        
        -- –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∫–æ—Ä–µ–Ω—å –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
        rootPart.Anchored = false
        
        -- –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if humanoid then
            humanoid.WalkSpeed = 4 -- –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ö–æ–¥—å–±–∞
        end
    end
    
    -- –ù–∞—á–∏–Ω–∞–µ–º —Å IDLE
    switchToIdle()
    
    -- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
    local connection = RunService.Heartbeat:Connect(function()
        if not petModel.Parent or not rootPart.Parent then
            connection:Disconnect()
            return
        end
        
        local currentTime = tick()
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if currentTime >= nextStateChangeTime then
            if currentState == "IDLE" then
                switchToWalk()
            else
                switchToIdle()
            end
        end
        
        -- –í IDLE —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if currentState == "IDLE" then
            local distanceFromBase = (rootPart.Position - basePosition).Magnitude
            if distanceFromBase > 3 then -- –ï—Å–ª–∏ —É—à–µ–ª –¥–∞–ª–µ–∫–æ –æ—Ç –±–∞–∑—ã
                rootPart.CFrame = CFrame.new(basePosition, basePosition + Vector3.new(0, 0, 1))
                if humanoid then
                    humanoid:MoveTo(basePosition)
                end
            end
        end
        
        -- –í WALK —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å —Ö–æ–¥—å–±—ã
        if currentState == "WALK" then
            local distanceFromBase = (rootPart.Position - basePosition).Magnitude
            if distanceFromBase > 8 then -- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ö–æ–¥—å–±—ã
                if humanoid then
                    humanoid:MoveTo(basePosition) -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –±–∞–∑–µ
                end
            end
        end
    end)
    
    print("  ‚úÖ –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω - —Ü–∏–∫–ª—ã IDLE/WALK –∑–∞–ø—É—â–µ–Ω—ã")
    return connection
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ò —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∞–Ω–∏–º–∞—Ü–∏–π
local function copyMotorStateFiltered(originalMotor, copyMotor, scaleFactor, originalModel, copyModel)
    if not originalMotor or not copyMotor then
        return false
    end
    
    -- –§–ò–õ–¨–¢–† –ê–ù–ò–ú–ê–¶–ò–ô: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü
    local originalRoot = originalModel:FindFirstChild("RootPart") or 
                        originalModel:FindFirstChild("Torso") or 
                        originalModel:FindFirstChild("HumanoidRootPart")
    
    local copyRoot = copyModel:FindFirstChild("RootPart") or 
                    copyModel:FindFirstChild("Torso") or 
                    copyModel:FindFirstChild("HumanoidRootPart")
    
    if originalRoot and copyRoot then
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        local originalVelocity = originalRoot.Velocity.Magnitude
        
        -- –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –±—ã—Å—Ç—Ä–æ –¥–≤–∏–∂–µ—Ç—Å—è (—Ö–æ–¥–∏—Ç) - –ù–ï –∫–æ–ø–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if originalVelocity > 2 then
            -- print("üö´ –ë–ª–æ–∫–∏—Ä—É—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ walking –∞–Ω–∏–º–∞—Ü–∏–∏ (—Å–∫–æ—Ä–æ—Å—Ç—å:", math.floor(originalVelocity), ")")
            return false -- –ù–ï –∫–æ–ø–∏—Ä—É–µ–º walking –¥–≤–∏–∂–µ–Ω–∏—è
        end
    end
    
    -- –ö–û–ü–ò–†–£–ï–ú —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ idle –∞–Ω–∏–º–∞—Ü–∏—è (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
    -- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Motor6D
    local originalTransform = originalMotor.Transform
    local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
    copyMotor.Transform = scaledTransform
    
    -- C0 –∏ C1 - –±–∞–∑–æ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Ç–æ–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    local originalC0 = originalMotor.C0
    local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
    copyMotor.C0 = scaledC0
    
    local originalC1 = originalMotor.C1
    local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
    copyMotor.C1 = scaledC1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –†–û–°–¢–ê –º–æ–¥–µ–ª–∏ (–æ—Ç –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
local function growModelFromSmall(model, startScale, finalScale, tweenTime)
    print("üå± –ù–∞—á–∏–Ω–∞—é –†–û–°–¢ –º–æ–¥–µ–ª–∏:", model.Name)
    print("üìà –û—Ç", startScale .. "x", "–¥–æ", finalScale .. "x", "–∑–∞", tweenTime, "—Å–µ–∫")
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Ç–∞:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –†–û–°–¢–ê: —Å–Ω–∞—á–∞–ª–∞ —É–º–µ–Ω—å—à–∞–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –ø–æ—Ç–æ–º –ø–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
    print("üîÑ –®–∞–≥ 1: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞—é –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ " .. startScale .. "x")
    
    -- –°–Ω–∞—á–∞–ª–∞ –ú–ì–ù–û–í–ï–ù–ù–û —É–º–µ–Ω—å—à–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –£–º–µ–Ω—å—à–∞–µ–º –¥–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ú–ì–ù–û–í–ï–ù–ù–û
        local smallSize = originalSize * startScale
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local smallRelativeCFrame = CFrame.new(relativeCFrame.Position * startScale) * (relativeCFrame - relativeCFrame.Position)
        local smallCFrame = centerCFrame * smallRelativeCFrame
        
        -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —Å—Ä–∞–∑—É
        part.Size = smallSize
        part.CFrame = smallCFrame
    end
    
    print("‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —É–º–µ–Ω—å—à–µ–Ω—ã –¥–æ " .. startScale .. "x")
    print("üîÑ –®–∞–≥ 2: –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é –¥–æ " .. finalScale .. "x –∑–∞ " .. tweenTime .. " —Å–µ–∫")
    
    -- –¢–µ–ø–µ—Ä—å –ü–õ–ê–í–ù–û —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        -- –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        local finalSize = originalSize * finalScale
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local finalRelativeCFrame = CFrame.new(relativeCFrame.Position * finalScale) * (relativeCFrame - relativeCFrame.Position)
        local finalCFrame = centerCFrame * finalRelativeCFrame
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω –¥–ª—è —Ä–æ—Å—Ç–∞ –æ—Ç –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        local tween = TweenService:Create(part, tweenInfo, {
            Size = finalSize,
            CFrame = finalCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–≤–∏–Ω–∞
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –†–û–°–¢ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                print("üéâ –ü–∏—Ç–æ–º–µ—Ü –≤—ã—Ä–æ—Å –æ—Ç " .. startScale .. "x –¥–æ " .. finalScale .. "x!")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞")
    return true
end

-- === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ò —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorStateFiltered(originalMotor, copyMotor, CONFIG.FINAL_SCALE, original, copy)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    local petCopy = deepCopyModel(petModel)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é!")
        return
    end
    
    -- –®–∞–≥ 3: –°–ù–ê–ß–ê–õ–ê –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï ===")
    -- –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = growModelFromSmall(petCopy, CONFIG.START_SCALE, CONFIG.FINAL_SCALE, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –®–∞–≥ 4: –ü–û–°–õ–ï –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ò ===")
    wait(CONFIG.TWEEN_TIME + 1) -- –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ê–ù–ò–ú–ê–¶–ò–ò ===")
    
    local connection = startLiveMotorCopying(petModel, petCopy)
    
    -- –®–∞–≥ 6: –ù–û–í–´–ô –ü–û–î–•–û–î - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ø–∏—Ç–æ–º—Ü–∞!
    print("\nüéØ === –ù–û–í–´–ô –ü–û–î–•–û–î: –ö–û–ù–¢–†–û–õ–¨ –û–†–ò–ì–ò–ù–ê–õ–ê ===")
    print("üí° –ò–¥–µ—è: –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Å—Ç–æ—è—Ç—å, —Ç–æ–≥–¥–∞ –∫–æ–ø–∏—è –±—É–¥–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ idle!")
    wait(0.5)
    
    -- –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    local originalRoot = petModel:FindFirstChild("RootPart") or 
                        petModel:FindFirstChild("Torso") or 
                        petModel:FindFirstChild("HumanoidRootPart")
    
    local originalHumanoid = petModel:FindFirstChildOfClass("Humanoid")
    
    if originalRoot then
        print("  üêï –ù–∞—à–µ–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", petModel.Name)
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        local originalPosition = originalRoot.Position
        
        -- –ó–∞—è–∫–æ—Ä–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
        originalRoot.Anchored = true
        
        -- –û—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ AI
        if originalHumanoid then
            originalHumanoid.WalkSpeed = 0
            originalHumanoid.JumpPower = 0
            originalHumanoid.PlatformStand = true
            print("  ü§ñ –û—Ç–∫–ª—é—á–∏–ª AI –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
        end
        
        print("  ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω - —Ç–µ–ø–µ—Ä—å –∫–æ–ø–∏—è –±—É–¥–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ idle!")
    else
        print("  ‚ö†Ô∏è –ù–µ –Ω–∞—à–µ–ª –∫–æ—Ä–µ–Ω—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
    end
    
    -- –ö–æ–ø–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º —Å –æ–±—ã—á–Ω—ã–º Anchored —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å)
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    print("  üí≠ –¢–µ–ø–µ—Ä—å –æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ —Ö–æ–¥–∏—Ç ‚Üí –∫–æ–ø–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ idle –∞–Ω–∏–º–∞—Ü–∏–∏!")
    
    if connection then
        print("üéâ === –ü–û–õ–ù–´–ô –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        print("‚úÖ –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
        print("üí° –ü–∏—Ç–æ–º–µ—Ü —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Å—Ç–æ—è–Ω–∏—è!")
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
