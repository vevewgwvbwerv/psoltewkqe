-- üî¨ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
-- –§–æ–∫—É—Å –Ω–∞ —Ç–æ–º –ö–ê–ö –∏ –ö–û–ì–î–ê –∏—Å—á–µ–∑–∞—é—Ç/–ø–æ—è–≤–ª—è—é—Ç—Å—è Humanoid –∏ Animator

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî¨ === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ò–¢–û–ú–¶–ê ===")
print("üéØ –¶–µ–ª—å: –û–¢–°–õ–ï–î–ò–¢–¨ –∫–æ–≥–¥–∞ –∏—Å—á–µ–∑–∞—é—Ç/–ø–æ—è–≤–ª—è—é—Ç—Å—è Humanoid –∏ Animator")

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position

-- üêæ –†–ê–ë–û–ß–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–ò–¢–û–ú–¶–ê (–∏–∑ PetScaler_v2.2)

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞
local function findPet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    local SEARCH_RADIUS = 100
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- üî¨ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
local function startEnhancedMonitoring(petModel)
    print("\nüìä === –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")
    
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("Torso") or petModel:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        print("‚ùå RootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    -- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local componentState = {
        humanoid = nil,
        animator = nil,
        humanoidExists = false,
        animatorExists = false,
        lastPosition = rootPart.Position,
        isMoving = false,
        standingTime = 0,
        movingTime = 0
    }
    
    -- üîç –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ü–û–Ø–í–õ–ï–ù–ò–Ø/–ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
    local function trackComponents()
        local currentHumanoid = petModel:FindFirstChildOfClass("Humanoid")
        local currentAnimator = petModel:FindFirstChildOfClass("Animator")
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è Humanoid
        if currentHumanoid ~= componentState.humanoid then
            if currentHumanoid and not componentState.humanoidExists then
                print("üü¢ HUMANOID –ü–û–Ø–í–ò–õ–°–Ø!")
                componentState.humanoidExists = true
            elseif not currentHumanoid and componentState.humanoidExists then
                print("üî¥ HUMANOID –ò–°–ß–ï–ó!")
                componentState.humanoidExists = false
            end
            componentState.humanoid = currentHumanoid
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è Animator
        if currentAnimator ~= componentState.animator then
            if currentAnimator and not componentState.animatorExists then
                print("üü¢ ANIMATOR –ü–û–Ø–í–ò–õ–°–Ø!")
                componentState.animatorExists = true
            elseif not currentAnimator and componentState.animatorExists then
                print("üî¥ ANIMATOR –ò–°–ß–ï–ó!")
                componentState.animatorExists = false
            end
            componentState.animator = currentAnimator
        end
        
        return currentHumanoid, currentAnimator
    end
    
    -- üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–ô
    local function analyzeState(humanoid, animator, isMoving)
        print(string.format("\n‚è∞ === –ê–ù–ê–õ–ò–ó (%.1f —Å–µ–∫) ===", tick()))
        print("üèÉ –î–≤–∏–∂–µ—Ç—Å—è:", isMoving and "–î–ê" or "–ù–ï–¢")
        print("‚è±Ô∏è –°—Ç–æ–∏—Ç:", componentState.standingTime, "–∫–∞–¥—Ä–æ–≤")
        print("üèÉ –î–≤–∏–∂–µ—Ç—Å—è:", componentState.movingTime, "–∫–∞–¥—Ä–æ–≤")
        
        -- –ê–Ω–∞–ª–∏–∑ Humanoid
        if humanoid and humanoid.Parent then
            print("ü§ñ === HUMANOID –ê–ö–¢–ò–í–ï–ù ===")
            print("  üèÉ WalkSpeed:", humanoid.WalkSpeed)
            print("  ü¶ò JumpPower:", humanoid.JumpPower or "nil")
            print("  ü¶ò JumpHeight:", humanoid.JumpHeight or "nil")
            print("  üõë PlatformStand:", humanoid.PlatformStand or "nil")
            print("  üí∫ Sit:", humanoid.Sit or "nil")
            print("  üéØ State:", humanoid:GetState().Name)
            print("  ‚ù§Ô∏è Health:", humanoid.Health)
        else
            print("‚ùå HUMANOID –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        end
        
        -- –ê–Ω–∞–ª–∏–∑ Animator
        if animator and animator.Parent then
            print("üé≠ === ANIMATOR –ê–ö–¢–ò–í–ï–ù ===")
            local tracks = animator:GetPlayingAnimationTracks()
            print("  üìΩÔ∏è –ò–≥—Ä–∞—é—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #tracks)
            
            for i, track in pairs(tracks) do
                print(string.format("    %d. %s", i, track.Animation.Name))
                print(string.format("       üÜî ID: %s", track.Animation.AnimationId))
                print(string.format("       ‚ñ∂Ô∏è Playing: %s", track.IsPlaying))
                print(string.format("       üîÑ Looped: %s", track.Looped))
                print(string.format("       ‚ö° Priority: %s", track.Priority.Name))
                print(string.format("       ‚è±Ô∏è Time: %.2f/%.2f", track.TimePosition, track.Length or 0))
            end
        else
            print("‚ùå ANIMATOR –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        end
        
        -- –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏
        print("üìç === –ü–û–ó–ò–¶–ò–Ø ===")
        print("  üìç Position:", rootPart.Position)
        print("  ‚ö° Velocity:", rootPart.Velocity)
        print("  üåÄ AngularVelocity:", rootPart.AngularVelocity)
        
        -- –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–µ—Ç–µ–π –º–æ–¥–µ–ª–∏
        print("üë• === –í–°–ï –î–ï–¢–ò –ú–û–î–ï–õ–ò ===")
        local children = petModel:GetChildren()
        for i, child in pairs(children) do
            print(string.format("  %d. %s (%s)", i, child.Name, child.ClassName))
        end
    end
    
    -- üîÑ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    local connection
    connection = RunService.Heartbeat:Connect(function()
        
        -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        local humanoid, animator = trackComponents()
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        local currentPos = rootPart.Position
        local distance = (currentPos - componentState.lastPosition).Magnitude
        
        if distance > 0.1 then
            if not componentState.isMoving then
                print("\nüèÉ === –ü–ò–¢–û–ú–ï–¶ –ù–ê–ß–ê–õ –î–í–ò–ì–ê–¢–¨–°–Ø ===")
                componentState.isMoving = true
                componentState.standingTime = 0
            end
            componentState.movingTime = componentState.movingTime + 1
        else
            if componentState.isMoving then
                print("\nüõë === –ü–ò–¢–û–ú–ï–¶ –û–°–¢–ê–ù–û–í–ò–õ–°–Ø ===")
                componentState.isMoving = false
                componentState.movingTime = 0
            end
            componentState.standingTime = componentState.standingTime + 1
        end
        
        componentState.lastPosition = currentPos
        
        -- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤ (0.5 —Å–µ–∫)
        if tick() % 0.5 < 0.02 then
            analyzeState(humanoid, animator, componentState.isMoving)
        end
        
        -- –û–°–û–ë–´–ô –ê–ù–ê–õ–ò–ó –∫–æ–≥–¥–∞ –ø–∏—Ç–æ–º–µ—Ü –¥–æ–ª–≥–æ —Å—Ç–æ–∏—Ç
        if not componentState.isMoving and componentState.standingTime > 60 then
            print("\nüéØ === –ü–ò–¢–û–ú–ï–¶ –î–û–õ–ì–û –°–¢–û–ò–¢ - –û–°–û–ë–´–ô –ê–ù–ê–õ–ò–ó ===")
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            print("üîç === –ü–û–ò–°–ö –°–ö–†–´–¢–´–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")
            for _, obj in pairs(petModel:GetDescendants()) do
                if obj:IsA("Humanoid") then
                    print("ü§ñ –ù–∞–π–¥–µ–Ω Humanoid –≤:", obj.Parent.Name, "->", obj.Name)
                elseif obj:IsA("Animator") then
                    print("üé≠ –ù–∞–π–¥–µ–Ω Animator –≤:", obj.Parent.Name, "->", obj.Name)
                end
            end
        end
    end)
    
    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")
    print("üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 120 —Å–µ–∫—É–Ω–¥
    spawn(function()
        wait(120)
        connection:Disconnect()
        print("\n‚èπÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 120 —Å–µ–∫—É–Ω–¥")
    end)
    
    return connection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local petModel = findPet()
    if not petModel then
        return
    end
    
    print("\nüéÆ === –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì ===")
    print("üí° –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –ø–∏—Ç–æ–º—Ü—É –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
    print("üîç –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–æ–º–µ–Ω—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è Humanoid –∏ Animator")
    
    local connection = startEnhancedMonitoring(petModel)
end

-- üöÄ –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö
print("\nüöÄ === –ó–ê–ü–£–°–ö–ê–Æ –†–ê–°–®–ò–†–ï–ù–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ ===")
print("üí° –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –ø–∏—Ç–æ–º—Ü—É –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å!")
print("üî¨ –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∏–¥—Ç–∏ 120 —Å–µ–∫—É–Ω–¥...")

spawn(function()
    wait(2)
    main()
end)

print("\nüí° === –¶–ï–õ–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
print("üîç 1. –û–¢–°–õ–ï–î–ò–¢–¨ –∫–æ–≥–¥–∞ –∏—Å—á–µ–∑–∞—é—Ç Humanoid –∏ Animator")
print("üîç 2. –ü–û–ù–Ø–¢–¨ —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Ö –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ")
print("üîç 3. –ù–ê–ô–¢–ò —Å–ø–æ—Å–æ–± –∏—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è")
print("üîç 4. –í–´–Ø–°–ù–ò–¢–¨ —Å–≤—è–∑—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ idle –∞–Ω–∏–º–∞—Ü–∏–µ–π")
print("\nüöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–©–ï–ù–ê!")
