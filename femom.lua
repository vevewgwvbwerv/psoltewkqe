-- üî• ULTIMATE SHOVEL REPLACER v1.0
-- –ò–¥–µ–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ Shovel –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞ —Å live –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ —á–∞—Å—Ç–∏ DirectShovelFix.lua + PetScaler_v3.465.lua

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

print("üî• === ULTIMATE SHOVEL REPLACER v1.0 ===")
print("=" .. string.rep("=", 50))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SCALE_FACTOR = 1.0,
    INTERPOLATION_SPEED = 0.3,
    MAX_DISTANCE_FROM_ROOT = 50,
    POSITION_THRESHOLD = 0.01,
    ROTATION_THRESHOLD = 0.01,
    HAND_PET_CHECK_INTERVAL = 0.5
}

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local savedPetModel = nil
local currentTool = nil
local animationConnection = nil
local lastHandPetCheck = 0
local handPetModel = nil
local handPetParts = {}
local previousCFrameStates = {}

-- === –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê –ò –ê–ù–ê–õ–ò–ó–ê ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–∞—Ö –∏–≥—Ä–æ–∫–∞
local function findHandHeldPet()
    local character = player.Character
    if not character then return nil, nil end
    
    local tool = character:FindFirstChildOfClass("Tool")
    if not tool then return nil, nil end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü (—Å–æ–¥–µ—Ä–∂–∏—Ç "Dragonfly" –∏–ª–∏ "KG]")
    if tool.Name:find("Dragonfly") or tool.Name:find("KG]") then
        local handle = tool:FindFirstChild("Handle")
        if handle then
            -- –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤–Ω—É—Ç—Ä–∏ Tool
            for _, child in pairs(tool:GetChildren()) do
                if child:IsA("Model") and child ~= handle then
                    return child, tool
                end
            end
            
            -- –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –∏–∑ Handle
            local petModel = Instance.new("Model")
            petModel.Name = "PetModel"
            petModel.Parent = tool
            handle.Parent = petModel
            petModel.PrimaryPart = handle
            
            return petModel, tool
        end
    end
    
    return nil, nil
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä—É–µ–º—ã—Ö —á–∞—Å—Ç–µ–π –∏–∑ Tool
local function getAnimatedPartsFromTool(petModel)
    if not petModel then return {} end
    
    local parts = {}
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–∏ –≤ –∫–æ–ø–∏–∏
local function findCorrespondingPart(copyModel, partName)
    if not copyModel then return nil end
    
    for _, obj in pairs(copyModel:GetDescendants()) do
        if obj:IsA("BasePart") and obj.Name == partName then
            return obj
        end
    end
    
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è CFrame
local function scaleCFrame(originalCFrame, scaleFactor)
    if scaleFactor == 1.0 then
        return originalCFrame
    end
    
    local position = originalCFrame.Position * scaleFactor
    local rotation = originalCFrame - originalCFrame.Position
    
    return CFrame.new(position) * rotation
end

-- === –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø TOOL ===

-- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
local function savePetModel()
    print("\nüîç === –ü–û–ò–°–ö –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–ò–¢–û–ú–¶–ê ===")
    
    -- –ò—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ Visuals
    local visuals = Workspace:FindFirstChild("Visuals")
    if not visuals then
        print("‚ùå Workspace.Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    local foundPet = nil
    for _, child in pairs(visuals:GetChildren()) do
        if child:IsA("Model") and (child.Name:find("Dragonfly") or child.Name:find("KG]")) then
            foundPet = child
            break
        end
    end
    
    if not foundPet then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Visuals!")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –ø–∏—Ç–æ–º—Ü–∞
    savedPetModel = foundPet:Clone()
    savedPetModel.Name = foundPet.Name .. "_SAVED"
    savedPetModel.Parent = nil -- –•—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏
    
    print("‚úÖ –ü–∏—Ç–æ–º–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", foundPet.Name)
    print("üì¶ –ß–∞—Å—Ç–µ–π –≤ –º–æ–¥–µ–ª–∏:", #savedPetModel:GetDescendants())
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Tool –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
local function createPetTool()
    if not savedPetModel then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞.")
        return nil
    end
    
    print("\nüîß === –°–û–ó–î–ê–ù–ò–ï PET TOOL ===")
    
    -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Tool
    local newTool = Instance.new("Tool")
    newTool.Name = savedPetModel.Name:gsub("_SAVED", "")
    newTool.RequiresHandle = true
    newTool.CanBeDropped = false
    
    -- –°–æ–∑–¥–∞–µ–º Handle
    local handle = Instance.new("Part")
    handle.Name = "Handle"
    handle.Size = Vector3.new(1, 1, 1)
    handle.Material = Enum.Material.Neon
    handle.BrickColor = BrickColor.new("Bright green")
    handle.Shape = Enum.PartType.Ball
    handle.Anchored = false
    handle.CanCollide = false
    handle.TopSurface = Enum.SurfaceType.Smooth
    handle.BottomSurface = Enum.SurfaceType.Smooth
    handle.Parent = newTool
    
    -- –ö–ª–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–∞ –≤ Tool
    local petCopy = savedPetModel:Clone()
    petCopy.Name = "PetModel"
    petCopy.Parent = newTool
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false
            part.CanCollide = false
            
            -- –°–æ–∑–¥–∞–µ–º Weld –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ Handle
            local weld = Instance.new("WeldConstraint")
            weld.Part0 = handle
            weld.Part1 = part
            weld.Parent = handle
        end
    end
    
    print("‚úÖ Pet Tool —Å–æ–∑–¥–∞–Ω:", newTool.Name)
    return newTool
end

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã Shovel –Ω–∞ Pet Tool
local function replaceShovelWithPet()
    print("\nüîÑ === –ó–ê–ú–ï–ù–ê SHOVEL –ù–ê PET TOOL ===")
    
    local character = player.Character
    if not character then
        print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return false
    end
    
    -- –ò—â–µ–º Shovel –≤ —Ä—É–∫–∞—Ö
    local shovelTool = character:FindFirstChildOfClass("Tool")
    if not shovelTool or not shovelTool.Name:find("Shovel") then
        print("‚ùå Shovel –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä—É–∫–∞—Ö!")
        return false
    end
    
    -- –°–æ–∑–¥–∞–µ–º Pet Tool
    local petTool = createPetTool()
    if not petTool then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Pet Tool!")
        return false
    end
    
    -- –£–¥–∞–ª—è–µ–º Shovel –∏ –¥–æ–±–∞–≤–ª—è–µ–º Pet Tool
    shovelTool:Destroy()
    
    -- –î–æ–±–∞–≤–ª—è–µ–º Pet Tool –≤ Backpack, –∑–∞—Ç–µ–º —ç–∫–∏–ø–∏—Ä—É–µ–º
    petTool.Parent = player.Backpack
    wait(0.1)
    
    -- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —ç–∫–∏–ø–∏—Ä—É–µ–º Tool
    character.Humanoid:EquipTool(petTool)
    
    currentTool = petTool
    print("‚úÖ Shovel –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Pet Tool!")
    
    return true
end

-- === –°–ò–°–¢–ï–ú–ê LIVE –ê–ù–ò–ú–ê–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ live –∞–Ω–∏–º–∞—Ü–∏–∏
local function startLiveAnimation()
    if animationConnection then
        animationConnection:Disconnect()
    end
    
    print("\nüé¨ === –ó–ê–ü–£–°–ö LIVE –ê–ù–ò–ú–ê–¶–ò–ò ===")
    
    animationConnection = RunService.Heartbeat:Connect(function()
        local currentTime = tick()
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Tool –≤ —Ä—É–∫–∞—Ö
        if not currentTool or not currentTool.Parent then
            return
        end
        
        local petModel = currentTool:FindFirstChild("PetModel")
        if not petModel then
            return
        end
        
        -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏—â–µ–º –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–∞—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        if currentTime - lastHandPetCheck >= CONFIG.HAND_PET_CHECK_INTERVAL then
            local foundPetModel, foundTool = findHandHeldPet()
            
            if foundPetModel ~= handPetModel then
                handPetModel = foundPetModel
                handPetParts = getAnimatedPartsFromTool(handPetModel)
                
                if handPetModel then
                    print("üéØ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏:", foundTool and foundTool.Name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                    
                    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ CFrame
                    previousCFrameStates = {}
                    for _, part in ipairs(handPetParts) do
                        if part and part.Parent then
                            previousCFrameStates[part.Name] = part.CFrame
                        end
                    end
                end
            end
            
            lastHandPetCheck = currentTime
        end
        
        -- Live –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if handPetModel and #handPetParts > 0 then
            for _, handPart in ipairs(handPetParts) do
                if handPart and handPart.Parent then
                    local partName = handPart.Name
                    local currentCFrame = handPart.CFrame
                    
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ CFrame —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    local hasChanged = false
                    if previousCFrameStates[partName] then
                        local prevCFrame = previousCFrameStates[partName]
                        local positionDiff = (currentCFrame.Position - prevCFrame.Position).Magnitude
                        local rotationDiff = math.abs(currentCFrame.LookVector:Dot(prevCFrame.LookVector) - 1)
                        
                        if positionDiff > CONFIG.POSITION_THRESHOLD or rotationDiff > CONFIG.ROTATION_THRESHOLD then
                            hasChanged = true
                        end
                    end
                    
                    -- –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    previousCFrameStates[partName] = currentCFrame
                    
                    -- –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —á–∞—Å—Ç—å –≤ Pet Tool –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º CFrame
                    local copyPart = findCorrespondingPart(petModel, partName)
                    if copyPart and hasChanged then
                        local success, errorMsg = pcall(function()
                            -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ CFrame
                            local scaledCFrame = scaleCFrame(currentCFrame, CONFIG.SCALE_FACTOR)
                            
                            -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CFrame
                            local handle = currentTool:FindFirstChild("Handle")
                            if handle then
                                local distanceFromHandle = (scaledCFrame.Position - handle.Position).Magnitude
                                if distanceFromHandle > CONFIG.MAX_DISTANCE_FROM_ROOT then
                                    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç Handle
                                    local direction = (scaledCFrame.Position - handle.Position).Unit
                                    local limitedPosition = handle.Position + direction * CONFIG.MAX_DISTANCE_FROM_ROOT
                                    scaledCFrame = CFrame.new(limitedPosition) * (scaledCFrame - scaledCFrame.Position)
                                end
                            end
                            
                            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ CFrame –Ω–µ —è–≤–ª—è–µ—Ç—Å—è NaN –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é
                            if scaledCFrame.Position.X == scaledCFrame.Position.X and 
                               math.abs(scaledCFrame.Position.X) ~= math.huge and
                               math.abs(scaledCFrame.Position.Y) ~= math.huge and
                               math.abs(scaledCFrame.Position.Z) ~= math.huge then
                                
                                -- –ü—Ä–∏–º–µ–Ω—è–µ–º —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                                if not copyPart.Anchored and copyPart.Parent then
                                    copyPart.CFrame = copyPart.CFrame:Lerp(scaledCFrame, CONFIG.INTERPOLATION_SPEED)
                                end
                            end
                        end)
                        
                        if not success then
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ CFrame", partName, ":", errorMsg)
                        end
                    end
                end
            end
        end
    end)
    
    print("‚úÖ Live –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ live –∞–Ω–∏–º–∞—Ü–∏–∏
local function stopLiveAnimation()
    if animationConnection then
        animationConnection:Disconnect()
        animationConnection = nil
        print("‚èπÔ∏è Live –∞–Ω–∏–º–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    end
end

-- === –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    print("\nüöÄ === –ó–ê–ü–£–°–ö ULTIMATE SHOVEL REPLACER ===")
    
    -- –®–∞–≥ 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ç–æ–º—Ü–∞
    if not savePetModel() then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞!")
        return false
    end
    
    -- –®–∞–≥ 2: –ó–∞–º–µ–Ω—è–µ–º Shovel –Ω–∞ Pet Tool
    if not replaceShovelWithPet() then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å Shovel!")
        return false
    end
    
    -- –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º live –∞–Ω–∏–º–∞—Ü–∏—é
    wait(1) -- –î–∞–µ–º –≤—Ä–µ–º—è Tool –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Ä—É–∫–∞—Ö
    startLiveAnimation()
    
    print("üéâ === –£–°–ü–ï–•! ===")
    print("‚úÖ Shovel –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!")
    print("‚úÖ Live –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üî• –ü–∏—Ç–æ–º–µ—Ü –≤ —Ä—É–∫–µ —Ç–µ–ø–µ—Ä—å –∂–∏–≤–æ–π –∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π!")
    
    return true
end

-- === –°–û–ó–î–ê–ù–ò–ï GUI ===

local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π GUI
    local oldGui = playerGui:FindFirstChild("UltimateShovelReplacerGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UltimateShovelReplacerGUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 300, 0, 120)
    frame.Position = UDim2.new(0, 50, 0, 50)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 0, 0)
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    title.BorderSizePixel = 0
    title.Text = "üî• ULTIMATE SHOVEL REPLACER"
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextSize = 14
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local replaceBtn = Instance.new("TextButton")
    replaceBtn.Name = "ReplaceButton"
    replaceBtn.Size = UDim2.new(0, 280, 0, 35)
    replaceBtn.Position = UDim2.new(0, 10, 0, 40)
    replaceBtn.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    replaceBtn.BorderSizePixel = 0
    replaceBtn.Text = "üîÑ –ó–ê–ú–ï–ù–ò–¢–¨ SHOVEL –ù–ê –ü–ò–¢–û–ú–¶–ê"
    replaceBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
    replaceBtn.TextSize = 14
    replaceBtn.Font = Enum.Font.SourceSansBold
    replaceBtn.Parent = frame
    
    local stopBtn = Instance.new("TextButton")
    stopBtn.Name = "StopButton"
    stopBtn.Size = UDim2.new(0, 280, 0, 35)
    stopBtn.Position = UDim2.new(0, 10, 0, 80)
    stopBtn.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    stopBtn.BorderSizePixel = 0
    stopBtn.Text = "‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨ –ê–ù–ò–ú–ê–¶–ò–Æ"
    stopBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
    stopBtn.TextSize = 14
    stopBtn.Font = Enum.Font.SourceSansBold
    stopBtn.Parent = frame
    
    -- –°–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    replaceBtn.MouseButton1Click:Connect(function()
        replaceBtn.Text = "‚è≥ –ó–∞–º–µ–Ω—è—é..."
        replaceBtn.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(2)
            replaceBtn.Text = "üîÑ –ó–ê–ú–ï–ù–ò–¢–¨ SHOVEL –ù–ê –ü–ò–¢–û–ú–¶–ê"
            replaceBtn.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end)
    end)
    
    stopBtn.MouseButton1Click:Connect(function()
        stopLiveAnimation()
        stopBtn.Text = "‚úÖ –ê–ù–ò–ú–ê–¶–ò–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê"
        stopBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
        
        wait(2)
        stopBtn.Text = "‚èπÔ∏è –û–°–¢–ê–ù–û–í–ò–¢–¨ –ê–ù–ò–ú–ê–¶–ò–Æ"
        stopBtn.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    end)
    
    print("üñ•Ô∏è Ultimate Shovel Replacer GUI —Å–æ–∑–¥–∞–Ω!")
end

-- === –ó–ê–ü–£–°–ö ===

createGUI()
print("=" .. string.rep("=", 50))
print("üí° ULTIMATE SHOVEL REPLACER:")
print("   1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ Visuals")
print("   2. –°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Pet Tool")
print("   3. –ó–∞–º–µ–Ω—è–µ—Ç Shovel –Ω–∞ Pet Tool")
print("   4. –ó–∞–ø—É—Å–∫–∞–µ—Ç live –∞–Ω–∏–º–∞—Ü–∏—é")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 50))
