-- ULTIMATE EGG CLONE DIAGNOSTIC SCRIPT
-- –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–π—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

print("ü•ö === ULTIMATE EGG DIAGNOSTIC STARTED ===")
print("üéØ –¶–µ–ª—å: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–π—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 50,
    ANALYSIS_TIME = 30, -- 30 —Å–µ–∫—É–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞
    EGG_NAMES = {
        "Common Egg", "Rare Egg", "Legendary Egg", "Mythical Egg",
        "Bug Egg", "Bee Egg", "Anti Bee Egg", "Night Egg",
        "Oasis Egg", "Paradise Egg", "Dinosaur Egg", "Primal Egg",
        "Common Summer Egg", "Rare Summer Egg", "Zen Egg"
    }
}

-- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —è–π—Ü–∞
local EggData = {
    model = nil,
    position = nil,
    structure = {},
    animations = {},
    effects = {},
    scripts = {},
    sounds = {},
    clickDetector = nil,
    timer = nil,
    petChances = {},
    materials = {},
    textures = {}
}

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —è–π—Ü–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
local function findNearbyEgg()
    local playerChar = player.Character
    if not playerChar or not playerChar:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local playerPos = playerChar.HumanoidRootPart.Position
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local objName = obj.Name
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —è–π—Ü–æ–º
            for _, eggName in pairs(CONFIG.EGG_NAMES) do
                if objName:find(eggName) or objName:lower():find("egg") then
                    local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                    if success then
                        local distance = (modelCFrame.Position - playerPos).Magnitude
                        if distance <= CONFIG.SEARCH_RADIUS then
                            print("ü•ö –ù–ê–ô–î–ï–ù–û –Ø–ô–¶–û:", objName, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏", math.floor(distance))
                            return obj
                        end
                    end
                end
            end
        end
    end
    
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
local function analyzeModelStructure(model)
    print("\nüìê === –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò ===")
    print("üìõ –ò–º—è –º–æ–¥–µ–ª–∏:", model.Name)
    print("üìç –ü–æ–∑–∏—Ü–∏—è:", model:GetModelCFrame().Position)
    print("üìè –†–∞–∑–º–µ—Ä:", model:GetModelSize())
    
    local structure = {
        name = model.Name,
        className = model.ClassName,
        position = model:GetModelCFrame().Position,
        size = model:GetModelSize(),
        children = {}
    }
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π
    for _, child in pairs(model:GetChildren()) do
        local childData = {
            name = child.Name,
            className = child.ClassName,
            properties = {}
        }
        
        -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ BasePart
        if child:IsA("BasePart") then
            childData.properties = {
                size = child.Size,
                material = child.Material.Name,
                color = child.Color,
                transparency = child.Transparency,
                canCollide = child.CanCollide,
                anchored = child.Anchored,
                cframe = child.CFrame
            }
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
            for _, desc in pairs(child:GetChildren()) do
                if desc:IsA("Decal") or desc:IsA("Texture") then
                    childData.properties.texture = desc.Texture
                    print("üé® –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞:", desc.Texture)
                end
            end
        end
        
        table.insert(structure.children, childData)
        print("  üì¶ –†–µ–±–µ–Ω–æ–∫:", child.Name, "(" .. child.ClassName .. ")")
    end
    
    return structure
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
local function analyzeScripts(model)
    print("\nüìú === –ê–ù–ê–õ–ò–ó –°–ö–†–ò–ü–¢–û–í ===")
    local scripts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("LocalScript") or obj:IsA("Script") then
            local scriptData = {
                name = obj.Name,
                className = obj.ClassName,
                source = obj.Source or "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parent = obj.Parent.Name
            }
            
            table.insert(scripts, scriptData)
            print("üìú –°–ö–†–ò–ü–¢:", obj.Name, "(" .. obj.ClassName .. ") –≤", obj.Parent.Name)
            
            -- –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            local success, source = pcall(function() return obj.Source end)
            if success and source and #source > 0 then
                print("  üíª –ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω:", #source, "—Å–∏–º–≤–æ–ª–æ–≤")
                -- –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if source:find("timer") or source:find("Timer") then
                    print("  ‚è∞ –ù–ê–ô–î–ï–ù –¢–ê–ô–ú–ï–† –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
                if source:find("random") or source:find("Random") then
                    print("  üé≤ –ù–ê–ô–î–ï–ù –†–ê–ù–î–û–ú –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
                if source:find("pet") or source:find("Pet") then
                    print("  üêæ –ù–ê–ô–î–ï–ù–´ –ü–ò–¢–û–ú–¶–´ –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
            else
                print("  ‚ùå –ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞—â–∏—â–µ–Ω)")
            end
        end
    end
    
    return scripts
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ ClickDetector
local function analyzeClickDetector(model)
    print("\nüñ±Ô∏è === –ê–ù–ê–õ–ò–ó CLICK DETECTOR ===")
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("ClickDetector") then
            print("üñ±Ô∏è –ù–ê–ô–î–ï–ù ClickDetector –≤:", obj.Parent.Name)
            print("  MaxActivationDistance:", obj.MaxActivationDistance)
            print("  CursorIcon:", obj.CursorIcon)
            
            return {
                maxDistance = obj.MaxActivationDistance,
                cursorIcon = obj.CursorIcon,
                parent = obj.Parent.Name
            }
        end
    end
    
    print("‚ùå ClickDetector –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–≤—É–∫–æ–≤
local function analyzeSounds(model)
    print("\nüéµ === –ê–ù–ê–õ–ò–ó –ó–í–£–ö–û–í ===")
    local sounds = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Sound") then
            local soundData = {
                name = obj.Name,
                soundId = obj.SoundId,
                volume = obj.Volume,
                pitch = obj.Pitch,
                looped = obj.Looped,
                parent = obj.Parent.Name
            }
            
            table.insert(sounds, soundData)
            print("üéµ –ó–í–£–ö:", obj.Name, "ID:", obj.SoundId, "–≤", obj.Parent.Name)
        end
    end
    
    return sounds
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
local function analyzeEffects(model)
    print("\n‚ú® === –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–û–í ===")
    local effects = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("Fire") or obj:IsA("Smoke") or 
           obj:IsA("Sparkles") or obj:IsA("PointLight") or obj:IsA("SpotLight") then
            
            local effectData = {
                name = obj.Name,
                className = obj.ClassName,
                parent = obj.Parent.Name,
                properties = {}
            }
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞
            if obj:IsA("ParticleEmitter") then
                effectData.properties = {
                    texture = obj.Texture,
                    rate = obj.Rate,
                    lifetime = obj.Lifetime,
                    speed = obj.Speed,
                    color = obj.Color
                }
            elseif obj:IsA("PointLight") then
                effectData.properties = {
                    brightness = obj.Brightness,
                    color = obj.Color,
                    range = obj.Range
                }
            end
            
            table.insert(effects, effectData)
            print("‚ú® –≠–§–§–ï–ö–¢:", obj.Name, "(" .. obj.ClassName .. ") –≤", obj.Parent.Name)
        end
    end
    
    return effects
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
local function analyzeGUI(model)
    print("\nüñºÔ∏è === –ê–ù–ê–õ–ò–ó GUI –≠–õ–ï–ú–ï–ù–¢–û–í ===")
    local guiElements = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("SurfaceGui") or obj:IsA("BillboardGui") then
            local guiData = {
                name = obj.Name,
                className = obj.ClassName,
                parent = obj.Parent.Name,
                children = {}
            }
            
            -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ GUI
            for _, child in pairs(obj:GetChildren()) do
                table.insert(guiData.children, {
                    name = child.Name,
                    className = child.ClassName,
                    text = child:IsA("TextLabel") and child.Text or nil
                })
                
                if child:IsA("TextLabel") and child.Text then
                    print("üìù GUI –¢–ï–ö–°–¢:", child.Text, "–≤", child.Name)
                    
                    -- –ò—â–µ–º —Ç–∞–π–º–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
                    if child.Text:find(":") or child.Text:find("timer") or child.Text:find("Timer") then
                        print("‚è∞ –í–û–ó–ú–û–ñ–ù–´–ô –¢–ê–ô–ú–ï–† –Ω–∞–π–¥–µ–Ω –≤ GUI!")
                    end
                end
            end
            
            table.insert(guiElements, guiData)
            print("üñºÔ∏è GUI:", obj.Name, "(" .. obj.ClassName .. ") –≤", obj.Parent.Name)
        end
    end
    
    return guiElements
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
local function findRelatedObjects(eggModel)
    print("\nüîó === –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í ===")
    local related = {}
    
    -- –ò—â–µ–º EggExplode —ç—Ñ—Ñ–µ–∫—Ç—ã
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj.Name:find("EggExplode") or obj.Name:find("Explosion") then
            print("üí• –ù–ê–ô–î–ï–ù –≠–§–§–ï–ö–¢ –í–ó–†–´–í–ê:", obj.Name, "–≤", obj.Parent and obj.Parent.Name or "nil")
            table.insert(related, {
                name = obj.Name,
                type = "explosion",
                className = obj.ClassName,
                parent = obj.Parent and obj.Parent.Name or "nil"
            })
        end
    end
    
    -- –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ ReplicatedStorage
    if ReplicatedStorage then
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                if obj.Name:lower():find("egg") or obj.Name:lower():find("hatch") then
                    print("üì° –ù–ê–ô–î–ï–ù REMOTE:", obj.Name, "(" .. obj.ClassName .. ")")
                    table.insert(related, {
                        name = obj.Name,
                        type = "remote",
                        className = obj.ClassName
                    })
                end
            end
        end
    end
    
    return related
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —è–π—Ü–∞
local function monitorEggOpening(eggModel)
    print("\nüëÅÔ∏è === –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–¢–ö–†–´–¢–ò–Ø –Ø–ô–¶–ê ===")
    print("üéØ –ù–∞–∂–º–∏—Ç–µ E —Ä—è–¥–æ–º —Å —è–π—Ü–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è!")
    
    local openingData = {
        timeline = {},
        startTime = nil,
        endTime = nil,
        petSpawned = nil,
        effectsUsed = {}
    }
    
    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ E
    local keyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.E then
            local playerChar = player.Character
            if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
                local playerPos = playerChar.HumanoidRootPart.Position
                local eggPos = eggModel:GetModelCFrame().Position
                local distance = (eggPos - playerPos).Magnitude
                
                if distance <= 10 then -- –í –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –µ–¥–∏–Ω–∏—Ü –æ—Ç —è–π—Ü–∞
                    if not openingData.startTime then
                        openingData.startTime = tick()
                        print("üöÄ –ù–ê–ñ–ê–¢–ê –ö–õ–ê–í–ò–®–ê E - –ù–ê–ß–ê–õ–û –û–¢–ö–†–´–¢–ò–Ø –Ø–ô–¶–ê!")
                        table.insert(openingData.timeline, {
                            time = 0,
                            event = "e_key_pressed",
                            object = "player_input"
                        })
                    end
                end
            end
        end
    end)
    
    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª–∏
    local connection = RunService.Heartbeat:Connect(function()
        if not eggModel or not eggModel.Parent then
            print("ü•ö –Ø–π—Ü–æ –∏—Å—á–µ–∑–ª–æ!")
            if openingData.startTime then
                openingData.endTime = tick()
                local duration = openingData.endTime - openingData.startTime
                print("‚è±Ô∏è –í–†–ï–ú–Ø –û–¢–ö–†–´–¢–ò–Ø:", string.format("%.2f —Å–µ–∫—É–Ω–¥", duration))
            end
            connection:Disconnect()
            keyConnection:Disconnect()
            return
        end
        
        -- –ò—â–µ–º –Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj.Name:find("EggExplode") and not openingData.effectsUsed[obj.Name] then
                if not openingData.startTime then
                    openingData.startTime = tick()
                    print("üöÄ –ù–ê–ß–ê–õ–û –û–¢–ö–†–´–¢–ò–Ø –Ø–ô–¶–ê!")
                end
                
                openingData.effectsUsed[obj.Name] = true
                table.insert(openingData.timeline, {
                    time = tick() - openingData.startTime,
                    event = "effect_spawned",
                    object = obj.Name
                })
                print("üí• –≠–§–§–ï–ö–¢:", obj.Name, "–≤—Ä–µ–º—è:", string.format("%.2f", tick() - openingData.startTime))
            end
        end
        
        -- –ò—â–µ–º –ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –ø–∏—Ç–æ–º—Ü–µ–≤
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") and obj ~= player.Character then
                local objName = obj.Name:lower()
                local eggPets = {
                    "dog", "bunny", "golden lab", "cat", "rabbit", "crab",
                    "wasp", "snail", "bee", "cow", "monkey", "hedgehog"
                }
                
                for _, petName in pairs(eggPets) do
                    if objName == petName and not openingData.petSpawned then
                        openingData.petSpawned = obj.Name
                        table.insert(openingData.timeline, {
                            time = tick() - (openingData.startTime or tick()),
                            event = "pet_spawned",
                            object = obj.Name
                        })
                        print("üêæ –ü–ò–¢–û–ú–ï–¶ –ü–û–Ø–í–ò–õ–°–Ø:", obj.Name, "–≤—Ä–µ–º—è:", string.format("%.2f", tick() - (openingData.startTime or tick())))
                        break
                    end
                end
            end
        end
    end)
    
    return openingData, connection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
local function runEggDiagnostic()
    print("üîç –ò—â—É —è–π—Ü–æ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º...")
    
    local eggModel = findNearbyEgg()
    if not eggModel then
        print("‚ùå –Ø–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS, "–µ–¥–∏–Ω–∏—Ü")
        print("üí° –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ —è–π—Ü—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", eggModel.Name)
    EggData.model = eggModel
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–∞
    EggData.structure = analyzeModelStructure(eggModel)
    EggData.scripts = analyzeScripts(eggModel)
    EggData.clickDetector = analyzeClickDetector(eggModel)
    EggData.sounds = analyzeSounds(eggModel)
    EggData.effects = analyzeEffects(eggModel)
    EggData.gui = analyzeGUI(eggModel)
    EggData.related = findRelatedObjects(eggModel)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è
    local openingData, connection = monitorEggOpening(eggModel)
    
    print("\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
    print("ü•ö –ú–æ–¥–µ–ª—å:", EggData.model.Name)
    print("üìú –°–∫—Ä–∏–ø—Ç–æ–≤:", #EggData.scripts)
    print("üéµ –ó–≤—É–∫–æ–≤:", #EggData.sounds)
    print("‚ú® –≠—Ñ—Ñ–µ–∫—Ç–æ–≤:", #EggData.effects)
    print("üñºÔ∏è GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", #EggData.gui)
    print("üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:", #EggData.related)
    print("üñ±Ô∏è ClickDetector:", EggData.clickDetector and "–ù–∞–π–¥–µ–Ω" or "–ù–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\nüéØ === –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Æ ===")
    print("üìê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏: ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã")
    print("üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∫–ª–∏–∫–∞: " .. (EggData.clickDetector and "‚úÖ –ù–∞–π–¥–µ–Ω–∞" or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"))
    print("üìú –°–∫—Ä–∏–ø—Ç—ã: " .. (#EggData.scripts > 0 and "‚úÖ –ù–∞–π–¥–µ–Ω—ã" or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã"))
    
    print("\nüí° –ù–∞–∂–º–∏—Ç–µ E —Ä—è–¥–æ–º —Å —è–π—Ü–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è!")
    print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ", CONFIG.ANALYSIS_TIME, "—Å–µ–∫—É–Ω–¥")
    print("üéØ –°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç: –Ω–∞–∂–∞—Ç–∏–µ E, —ç—Ñ—Ñ–µ–∫—Ç—ã, –∑–≤—É–∫–∏, –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞")
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    spawn(function()
        wait(CONFIG.ANALYSIS_TIME)
        if connection then
            connection:Disconnect()
        end
        print("\nüèÅ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print("üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!")
    end)
    
    return EggData
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
local function createDiagnosticGUI()
    -- –°–æ–∑–¥–∞–µ–º ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "EggDiagnosticGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    -- –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 300, 0, 200)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 2
    mainFrame.BorderColor3 = Color3.fromRGB(0, 255, 255)
    mainFrame.Parent = screenGui
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(0, 100, 100)
    titleLabel.Text = "ü•ö EGG CLONE DIAGNOSTIC"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = mainFrame
    
    -- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    local startButton = Instance.new("TextButton")
    startButton.Name = "StartButton"
    startButton.Size = UDim2.new(0.9, 0, 0, 40)
    startButton.Position = UDim2.new(0.05, 0, 0, 40)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    startButton.Text = "üîç –ó–ê–ü–£–°–¢–ò–¢–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.SourceSansBold
    startButton.Parent = mainFrame
    
    -- –°—Ç–∞—Ç—É—Å –ª–µ–π–±–ª
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "Status"
    statusLabel.Size = UDim2.new(0.9, 0, 0, 60)
    statusLabel.Position = UDim2.new(0.05, 0, 0, 90)
    statusLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    statusLabel.Text = "üìç –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —è–π—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É"
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextWrapped = true
    statusLabel.Parent = mainFrame
    
    -- –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0.9, 0, 0, 30)
    closeButton.Position = UDim2.new(0.05, 0, 0, 160)
    closeButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
    closeButton.Text = "‚ùå –ó–ê–ö–†–´–¢–¨"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = mainFrame
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞
    startButton.MouseButton1Click:Connect(function()
        statusLabel.Text = "üîç –ò—â—É —è–π—Ü–æ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º..."
        statusLabel.BackgroundColor3 = Color3.fromRGB(100, 100, 0)
        
        spawn(function()
            local eggModel = findNearbyEgg()
            if not eggModel then
                statusLabel.Text = "‚ùå –Ø–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ"
                statusLabel.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
                return
            end
            
            statusLabel.Text = "‚úÖ –Ø–π—Ü–æ –Ω–∞–π–¥–µ–Ω–æ: " .. eggModel.Name
            statusLabel.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            
            -- –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            runEggDiagnosticWithGUI(eggModel, statusLabel)
        end)
    end)
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    return screenGui, statusLabel
end

-- –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å GUI –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
local function runEggDiagnosticWithGUI(eggModel, statusLabel)
    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", eggModel.Name)
    EggData.model = eggModel
    
    statusLabel.Text = "üìê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏..."
    wait(0.5)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–∞
    EggData.structure = analyzeModelStructure(eggModel)
    statusLabel.Text = "üìú –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä–∏–ø—Ç—ã..."
    wait(0.5)
    
    EggData.scripts = analyzeScripts(eggModel)
    statusLabel.Text = "üñ±Ô∏è –ò—â—É ClickDetector..."
    wait(0.5)
    
    EggData.clickDetector = analyzeClickDetector(eggModel)
    statusLabel.Text = "üéµ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–≤—É–∫–∏..."
    wait(0.5)
    
    EggData.sounds = analyzeSounds(eggModel)
    statusLabel.Text = "‚ú® –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç—Ñ—Ñ–µ–∫—Ç—ã..."
    wait(0.5)
    
    EggData.effects = analyzeEffects(eggModel)
    statusLabel.Text = "üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é GUI —ç–ª–µ–º–µ–Ω—Ç—ã..."
    wait(0.5)
    
    EggData.gui = analyzeGUI(eggModel)
    statusLabel.Text = "üîó –ò—â—É —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã..."
    wait(0.5)
    
    EggData.related = findRelatedObjects(eggModel)
    
    statusLabel.Text = "üëÅÔ∏è –ì–û–¢–û–í! –ù–∞–∂–º–∏—Ç–µ E –Ω–∞ —è–π—Ü–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
    statusLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 150)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è
    local openingData, connection = monitorEggOpening(eggModel)
    
    print("\nüìä === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===")
    print("ü•ö –ú–æ–¥–µ–ª—å:", EggData.model.Name)
    print("üìú –°–∫—Ä–∏–ø—Ç–æ–≤:", #EggData.scripts)
    print("üéµ –ó–≤—É–∫–æ–≤:", #EggData.sounds)
    print("‚ú® –≠—Ñ—Ñ–µ–∫—Ç–æ–≤:", #EggData.effects)
    print("üñºÔ∏è GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", #EggData.gui)
    print("üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:", #EggData.related)
    print("üñ±Ô∏è ClickDetector:", EggData.clickDetector and "–ù–∞–π–¥–µ–Ω" or "–ù–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\nüéØ === –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–Æ ===")
    print("üìê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏: ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üé® –í–∏–∑—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω—ã")
    print("üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∫–ª–∏–∫–∞: " .. (EggData.clickDetector and "‚úÖ –ù–∞–π–¥–µ–Ω–∞" or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"))
    print("üìú –°–∫—Ä–∏–ø—Ç—ã: " .. (#EggData.scripts > 0 and "‚úÖ –ù–∞–π–¥–µ–Ω—ã" or "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã"))
    
    print("\nüí° –ù–∞–∂–º–∏—Ç–µ E —Ä—è–¥–æ–º —Å —è–π—Ü–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è!")
    print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ", CONFIG.ANALYSIS_TIME, "—Å–µ–∫—É–Ω–¥")
    print("üéØ –°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç: –Ω–∞–∂–∞—Ç–∏–µ E, —ç—Ñ—Ñ–µ–∫—Ç—ã, –∑–≤—É–∫–∏, –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞")
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    spawn(function()
        wait(CONFIG.ANALYSIS_TIME)
        if connection then
            connection:Disconnect()
        end
        statusLabel.Text = "üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        statusLabel.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        print("\nüèÅ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print("üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!")
    end)
    
    return EggData
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI –∏ –∑–∞–ø—É—Å–∫
createDiagnosticGUI()
print("üéÆ GUI —Å–æ–∑–¥–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π.")
