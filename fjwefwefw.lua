-- CORRECTED EGG CLONE DIAGNOSTIC SCRIPT
-- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–π—Ü–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º Workspace.Visuals

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

print("ü•ö === CORRECTED EGG DIAGNOSTIC STARTED ===")
print("üéØ –¶–µ–ª—å: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —è–π—Ü–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º Workspace.Visuals")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 50,
    ANALYSIS_TIME = 60, -- 60 —Å–µ–∫—É–Ω–¥ –∞–Ω–∞–ª–∏–∑–∞
    EGG_NAMES = {
        "Common Egg", "Rare Egg", "Legendary Egg", "Mythical Egg",
        "Bug Egg", "Bee Egg", "Anti Bee Egg", "Night Egg",
        "Oasis Egg", "Paradise Egg", "Dinosaur Egg", "Primal Egg",
        "Common Summer Egg", "Rare Summer Egg", "Zen Egg"
    }
}

-- –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –∏–∑ —è–∏—Ü (–∏–∑ PetScaler_v222222234.lua)
local eggPets = {
    -- Anti Bee Egg
    "wasp", "tarantula hawk", "moth", "butterfly", "disco bee (divine)",
    -- Bee Egg  
    "bee", "honey bee", "bear bee", "petal bee", "queen bee",
    -- Bug Egg
    "snail", "giant ant", "caterpillar", "praying mantis", "dragonfly (divine)",
    -- Common Egg
    "dog", "bunny", "golden lab",
    -- Common Summer Egg
    "starfish", "seagull", "crab",
    -- Dinosaur Egg
    "raptor", "triceratops", "stegosaurus", "pterodactyl", "brontosaurus", "t-rex (divine)",
    -- Legendary Egg
    "cow", "silver monkey", "sea otter", "turtle", "polar bear",
    -- Mythical Egg
    "grey mouse", "brown mouse", "squirrel", "red giant ant", "red fox",
    -- Night Egg
    "hedgehog", "mole", "frog", "echo frog", "night owl", "raccoon",
    -- Oasis Egg
    "camel", "armadillo", "lizard", "roadrunner", "fennec fox", "desert fox",
    -- Paradise Egg
    "parrot", "toucan", "flamingo", "peacock", "rainbow macaw", "phoenix (divine)",
    -- Primal Egg
    "mammoth", "saber tooth", "dodo", "giant sloth", "cave bear", "primal dragon (divine)",
    -- Rare Egg
    "cat", "rabbit", "pig", "chicken", "sheep",
    -- Rare Summer Egg
    "dolphin", "seahorse", "jellyfish", "octopus", "whale", "kraken (divine)",
    -- Zen Egg
    "panda", "red panda", "koala", "sloth", "zen monkey", "enlightened owl (divine)"
}

-- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —è–π—Ü–∞
local EggData = {
    model = nil,
    position = nil,
    structure = {},
    animations = {},
    effects = {},
    scripts = {},
    sounds = {},
    clickDetector = nil,
    timer = nil,
    petChances = {},
    materials = {},
    textures = {},
    petLifecycle = {} -- –ù–û–í–û–ï: –¥–∞–Ω–Ω—ã–µ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –ø–∏—Ç–æ–º—Ü–∞
}

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–æ–¥–µ–ª—å –ø–∏—Ç–æ–º—Ü–µ–º –∏–∑ —è–π—Ü–∞
local function isPetFromEgg(model)
    if not model or not model:IsA("Model") then
        return false
    end
    
    local modelName = model.Name:lower()
    
    for _, petName in pairs(eggPets) do
        if modelName == petName:lower() then
            return true
        end
    end
    
    return false
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —è–π—Ü–∞ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
local function findNearbyEgg()
    local playerChar = player.Character
    if not playerChar or not playerChar:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local playerPos = playerChar.HumanoidRootPart.Position
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") then
            local objName = obj.Name
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —è–π—Ü–æ–º
            for _, eggName in pairs(CONFIG.EGG_NAMES) do
                if objName:find(eggName) or objName:lower():find("egg") then
                    local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
                    if success then
                        local distance = (modelCFrame.Position - playerPos).Magnitude
                        if distance <= CONFIG.SEARCH_RADIUS then
                            print("ü•ö –ù–ê–ô–î–ï–ù–û –Ø–ô–¶–û:", objName, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏", math.floor(distance))
                            return obj
                        end
                    end
                end
            end
        end
    end
    
    return nil
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
local function analyzeModelStructure(model)
    print("\nüìê === –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò ===")
    print("üìõ –ò–º—è –º–æ–¥–µ–ª–∏:", model.Name)
    print("üìç –ü–æ–∑–∏—Ü–∏—è:", model:GetModelCFrame().Position)
    print("üìè –†–∞–∑–º–µ—Ä:", model:GetModelSize())
    
    local structure = {
        name = model.Name,
        className = model.ClassName,
        position = model:GetModelCFrame().Position,
        size = model:GetModelSize(),
        children = {}
    }
    
    -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π
    for _, child in pairs(model:GetChildren()) do
        local childData = {
            name = child.Name,
            className = child.ClassName,
            properties = {}
        }
        
        -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ BasePart
        if child:IsA("BasePart") then
            childData.properties = {
                size = child.Size,
                material = child.Material.Name,
                color = child.Color,
                transparency = child.Transparency,
                canCollide = child.CanCollide,
                anchored = child.Anchored,
                cframe = child.CFrame
            }
            
            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
            for _, desc in pairs(child:GetChildren()) do
                if desc:IsA("Decal") or desc:IsA("Texture") then
                    childData.properties.texture = desc.Texture
                    print("üé® –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞:", desc.Texture)
                end
            end
        end
        
        table.insert(structure.children, childData)
        print("  üì¶ –†–µ–±–µ–Ω–æ–∫:", child.Name, "(" .. child.ClassName .. ")")
    end
    
    return structure
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
local function analyzeScripts(model)
    print("\nüìú === –ê–ù–ê–õ–ò–ó –°–ö–†–ò–ü–¢–û–í ===")
    local scripts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("LocalScript") or obj:IsA("Script") then
            local scriptData = {
                name = obj.Name,
                className = obj.ClassName,
                source = "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                parent = obj.Parent.Name
            }
            
            table.insert(scripts, scriptData)
            print("üìú –°–ö–†–ò–ü–¢:", obj.Name, "(" .. obj.ClassName .. ") –≤", obj.Parent.Name)
            
            -- –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            local success, source = pcall(function() return obj.Source end)
            if success and source and #source > 0 then
                scriptData.source = source
                print("  üíª –ö–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω:", #source, "—Å–∏–º–≤–æ–ª–æ–≤")
                -- –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if source:find("timer") or source:find("Timer") then
                    print("  ‚è∞ –ù–ê–ô–î–ï–ù –¢–ê–ô–ú–ï–† –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
                if source:find("random") or source:find("Random") then
                    print("  üé≤ –ù–ê–ô–î–ï–ù –†–ê–ù–î–û–ú –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
                if source:find("pet") or source:find("Pet") then
                    print("  üêæ –ù–ê–ô–î–ï–ù–´ –ü–ò–¢–û–ú–¶–´ –≤ —Å–∫—Ä–∏–ø—Ç–µ!")
                end
            else
                print("  ‚ùå –ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞—â–∏—â–µ–Ω)")
            end
        end
    end
    
    return scripts
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Workspace.Visuals (–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê!)
local function monitorWorkspaceVisuals()
    print("\nüëÅÔ∏è === –ú–û–ù–ò–¢–û–†–ò–ù–ì WORKSPACE.VISUALS ===")
    print("üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ Workspace.Visuals!")
    
    local visualsFolder = Workspace:FindFirstChild("Visuals")
    if not visualsFolder then
        print("‚ùå Workspace.Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return nil, nil
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω Workspace.Visuals, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    
    local petLifecycleData = {
        pets = {},
        timeline = {},
        totalPets = 0
    }
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ (ChildAdded)
    local childAddedConnection = visualsFolder.ChildAdded:Connect(function(child)
        if child:IsA("Model") and isPetFromEgg(child) then
            local spawnTime = tick()
            local petId = tostring(child)
            
            print("‚ö° –ü–ò–¢–û–ú–ï–¶ –ü–û–Ø–í–ò–õ–°–Ø –í VISUALS:", child.Name, "–≤—Ä–µ–º—è:", os.date("%H:%M:%S"))
            
            -- –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–æ–º—Ü–µ
            petLifecycleData.pets[petId] = {
                name = child.Name,
                spawnTime = spawnTime,
                despawnTime = nil,
                lifetime = nil,
                model = child
            }
            
            petLifecycleData.totalPets = petLifecycleData.totalPets + 1
            
            table.insert(petLifecycleData.timeline, {
                time = spawnTime,
                event = "pet_spawned",
                petName = child.Name,
                petId = petId
            })
            
            -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
            spawn(function()
                while child and child.Parent do
                    wait(0.1) -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
                end
                
                -- –ü–∏—Ç–æ–º–µ—Ü –∏—Å—á–µ–∑
                local despawnTime = tick()
                local lifetime = despawnTime - spawnTime
                
                print("üíÄ –ü–ò–¢–û–ú–ï–¶ –ò–°–ß–ï–ó:", petLifecycleData.pets[petId].name, 
                      "–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏:", string.format("%.2f —Å–µ–∫—É–Ω–¥", lifetime))
                
                -- –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                petLifecycleData.pets[petId].despawnTime = despawnTime
                petLifecycleData.pets[petId].lifetime = lifetime
                
                table.insert(petLifecycleData.timeline, {
                    time = despawnTime,
                    event = "pet_despawned",
                    petName = petLifecycleData.pets[petId].name,
                    petId = petId,
                    lifetime = lifetime
                })
            end)
        end
    end)
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–∂–∞—Ç–∏—è E –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —è–π—Ü–∞
    local keyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.E then
            print("üîë –ù–ê–ñ–ê–¢–ê –ö–õ–ê–í–ò–®–ê E - –í–û–ó–ú–û–ñ–ù–û–ï –û–¢–ö–†–´–¢–ò–ï –Ø–ô–¶–ê!")
            table.insert(petLifecycleData.timeline, {
                time = tick(),
                event = "e_key_pressed",
                petName = "N/A",
                petId = "player_input"
            })
        end
    end)
    
    return petLifecycleData, childAddedConnection, keyConnection
end

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤–∑—Ä—ã–≤–∞
local function monitorExplosionEffects()
    print("\nüí• === –ú–û–ù–ò–¢–û–†–ò–ù–ì –≠–§–§–ï–ö–¢–û–í –í–ó–†–´–í–ê ===")
    
    local explosionData = {
        effects = {},
        timeline = []
    }
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ EggExplode —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    local effectConnection = Workspace.DescendantAdded:Connect(function(obj)
        if obj.Name:find("EggExplode") or obj.Name:find("Explosion") then
            local effectTime = tick()
            print("üí• –≠–§–§–ï–ö–¢ –í–ó–†–´–í–ê:", obj.Name, "–≤—Ä–µ–º—è:", os.date("%H:%M:%S"))
            
            table.insert(explosionData.effects, {
                name = obj.Name,
                className = obj.ClassName,
                spawnTime = effectTime,
                parent = obj.Parent and obj.Parent.Name or "nil"
            })
            
            table.insert(explosionData.timeline, {
                time = effectTime,
                event = "explosion_effect",
                effectName = obj.Name
            })
        end
    end)
    
    return explosionData, effectConnection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å GUI
local function runCorrectedDiagnostic(eggModel, statusLabel)
    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —è–π—Ü–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", eggModel.Name)
    EggData.model = eggModel
    
    statusLabel.Text = "üìê –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–µ–ª–∏..."
    wait(0.5)
    
    -- –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —è–π—Ü–∞
    EggData.structure = analyzeModelStructure(eggModel)
    statusLabel.Text = "üìú –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∫—Ä–∏–ø—Ç—ã..."
    wait(0.5)
    
    EggData.scripts = analyzeScripts(eggModel)
    statusLabel.Text = "üëÅÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Workspace.Visuals..."
    wait(0.5)
    
    -- –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Workspace.Visuals
    local petLifecycleData, childConnection, keyConnection = monitorWorkspaceVisuals()
    statusLabel.Text = "üí• –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤–∑—Ä—ã–≤–∞..."
    wait(0.5)
    
    local explosionData, effectConnection = monitorExplosionEffects()
    
    statusLabel.Text = "‚úÖ –ì–û–¢–û–í! –ù–∞–∂–º–∏—Ç–µ E –Ω–∞ —è–π—Ü–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
    statusLabel.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
    
    print("\nüìä === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ï–ù ===")
    print("ü•ö –Ø–π—Ü–æ:", EggData.model.Name)
    print("üëÅÔ∏è Workspace.Visuals: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
    print("üí• –≠—Ñ—Ñ–µ–∫—Ç—ã –≤–∑—Ä—ã–≤–∞: –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è")
    print("‚å®Ô∏è –ù–∞–∂–∞—Ç–∏–µ E: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
    print("\nüí° –ù–∞–∂–º–∏—Ç–µ E —Ä—è–¥–æ–º —Å —è–π—Ü–æ–º –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è!")
    print("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ", CONFIG.ANALYSIS_TIME, "—Å–µ–∫—É–Ω–¥")
    
    -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    spawn(function()
        wait(CONFIG.ANALYSIS_TIME)
        
        -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if childConnection then childConnection:Disconnect() end
        if keyConnection then keyConnection:Disconnect() end
        if effectConnection then effectConnection:Disconnect() end
        
        statusLabel.Text = "üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        statusLabel.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
        
        print("\nüèÅ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
        print("üìä –ò–¢–û–ì–û–í–´–ï –î–ê–ù–ù–´–ï:")
        print("üêæ –í—Å–µ–≥–æ –ø–∏—Ç–æ–º—Ü–µ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:", petLifecycleData.totalPets)
        print("üí• –≠—Ñ—Ñ–µ–∫—Ç–æ–≤ –≤–∑—Ä—ã–≤–∞:", #explosionData.effects)
        print("üìú –°–æ–±—ã—Ç–∏—è –≤ —Ç–∞–π–º–ª–∞–π–Ω–µ:", #petLifecycleData.timeline + #explosionData.timeline)
        
        -- –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∏—Ç–æ–º—Ü–∞–º
        for petId, petData in pairs(petLifecycleData.pets) do
            if petData.lifetime then
                print(string.format("üêæ %s: –∂–∏–ª %.2f —Å–µ–∫—É–Ω–¥", petData.name, petData.lifetime))
            end
        end
        
        -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
        EggData.petLifecycle = petLifecycleData
        EggData.explosionData = explosionData
        
        print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞!")
    end)
    
    return EggData
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createCorrectedGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CorrectedEggDiagnosticGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 350, 0, 250)
    mainFrame.Position = UDim2.new(0, 10, 0, 10)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderSizePixel = 2
    mainFrame.BorderColor3 = Color3.fromRGB(255, 100, 0)
    mainFrame.Parent = screenGui
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(255, 100, 0)
    titleLabel.Text = "ü•ö CORRECTED EGG DIAGNOSTIC"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.Parent = mainFrame
    
    local startButton = Instance.new("TextButton")
    startButton.Name = "StartButton"
    startButton.Size = UDim2.new(0.9, 0, 0, 40)
    startButton.Position = UDim2.new(0.05, 0, 0, 40)
    startButton.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    startButton.Text = "üîç –ó–ê–ü–£–°–¢–ò–¢–¨ –ü–†–ê–í–ò–õ–¨–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£"
    startButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    startButton.TextScaled = true
    startButton.Font = Enum.Font.SourceSansBold
    startButton.Parent = mainFrame
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Name = "Status"
    statusLabel.Size = UDim2.new(0.9, 0, 0, 80)
    statusLabel.Position = UDim2.new(0.05, 0, 0, 90)
    statusLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    statusLabel.Text = "üìç –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ —è–π—Ü—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\nüéØ –ë—É–¥–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å—Å—è Workspace.Visuals!"
    statusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    statusLabel.TextScaled = true
    statusLabel.Font = Enum.Font.SourceSans
    statusLabel.TextWrapped = true
    statusLabel.Parent = mainFrame
    
    local infoLabel = Instance.new("TextLabel")
    infoLabel.Name = "Info"
    infoLabel.Size = UDim2.new(0.9, 0, 0, 50)
    infoLabel.Position = UDim2.new(0.05, 0, 0, 180)
    infoLabel.BackgroundColor3 = Color3.fromRGB(0, 100, 200)
    infoLabel.Text = "‚ö° –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\nWorkspace.Visuals –∏ —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ø–∏—Ç–æ–º—Ü–µ–≤!"
    infoLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    infoLabel.TextScaled = true
    infoLabel.Font = Enum.Font.SourceSans
    infoLabel.TextWrapped = true
    infoLabel.Parent = mainFrame
    
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0.9, 0, 0, 30)
    closeButton.Position = UDim2.new(0.05, 0, 0, 240)
    closeButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    closeButton.Text = "‚ùå –ó–ê–ö–†–´–¢–¨"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.Parent = mainFrame
    
    -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    startButton.MouseButton1Click:Connect(function()
        statusLabel.Text = "üîç –ò—â—É —è–π—Ü–æ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º..."
        statusLabel.BackgroundColor3 = Color3.fromRGB(100, 100, 0)
        
        spawn(function()
            local eggModel = findNearbyEgg()
            if not eggModel then
                statusLabel.Text = "‚ùå –Ø–π—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ"
                statusLabel.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
                return
            end
            
            statusLabel.Text = "‚úÖ –Ø–π—Ü–æ –Ω–∞–π–¥–µ–Ω–æ: " .. eggModel.Name
            statusLabel.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            
            runCorrectedDiagnostic(eggModel, statusLabel)
        end)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    return screenGui
end

-- –ó–∞–ø—É—Å–∫
createCorrectedGUI()
print("üéÆ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô GUI —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è Workspace.Visuals!")
