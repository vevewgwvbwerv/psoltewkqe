-- üéÆ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ANIMATIONCONTROLLER - –§–û–ö–£–° –ù–ê –£–ü–†–ê–í–õ–ï–ù–ò–ò –ê–ù–ò–ú–ê–¶–ò–ï–ô
-- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AnimationController –∏ –µ–≥–æ Animator

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üéÆ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ANIMATIONCONTROLLER ===")
print("üéØ –¶–µ–ª—å: –ò–ó–£–ß–ò–¢–¨ AnimationController –∏ –µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–µ–π")

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position

-- üêæ –†–ê–ë–û–ß–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–ò–¢–û–ú–¶–ê (–∏–∑ PetScaler_v2.2)

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞
local function hasPetVisuals(model)
    local meshCount = 0
    local petMeshes = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or ""
            }
            if meshData.meshId ~= "" then
                table.insert(petMeshes, meshData)
            end
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or ""
            }
            if meshData.meshId ~= "" or meshData.textureId ~= "" then
                table.insert(petMeshes, meshData)
            end
        end
    end
    
    return meshCount > 0, petMeshes
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∏—Ç–æ–º—Ü–∞
local function findPet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    local SEARCH_RADIUS = 100
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- üéÆ –§–û–ö–£–° –ù–ê ANIMATIONCONTROLLER
local function analyzeAnimationController(petModel)
    print("\nüéÆ === –ê–ù–ê–õ–ò–ó ANIMATIONCONTROLLER ===")
    
    -- –ü–æ–∏—Å–∫ –≤—Å–µ—Ö AnimationController –≤ –º–æ–¥–µ–ª–∏
    local controllers = {}
    for _, obj in pairs(petModel:GetDescendants()) do
        if obj:IsA("AnimationController") then
            table.insert(controllers, obj)
        end
    end
    
    print("üéÆ –ù–∞–π–¥–µ–Ω–æ AnimationController:", #controllers)
    
    for i, controller in pairs(controllers) do
        print(string.format("\nüéÆ === CONTROLLER %d ===", i))
        print("üìç –ü—É—Ç—å:", controller:GetFullName())
        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å:", controller.Parent.Name)
        
        -- –ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–µ–π AnimationController
        local children = controller:GetChildren()
        print("üë• –î–µ—Ç–µ–π:", #children)
        
        for j, child in pairs(children) do
            print(string.format("  %d. %s (%s)", j, child.Name, child.ClassName))
            
            -- –ï—Å–ª–∏ —ç—Ç–æ Animator - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if child:IsA("Animator") then
                print("    üé≠ === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ANIMATOR ===")
                
                local tracks = child:GetPlayingAnimationTracks()
                print("    üìΩÔ∏è –ò–≥—Ä–∞—é—â–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π:", #tracks)
                
                for k, track in pairs(tracks) do
                    print(string.format("      %d. %s", k, track.Animation.Name))
                    print(string.format("         üÜî ID: %s", track.Animation.AnimationId))
                    print(string.format("         ‚ñ∂Ô∏è Playing: %s", track.IsPlaying))
                    print(string.format("         üîÑ Looped: %s", track.Looped))
                    print(string.format("         ‚ö° Priority: %s", track.Priority.Name))
                    print(string.format("         ‚è±Ô∏è Time: %.2f/%.2f", track.TimePosition, track.Length or 0))
                    print(string.format("         üîä Weight: %.2f", track.WeightCurrent))
                    print(string.format("         üìà Speed: %.2f", track.Speed))
                end
                
                -- –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –∏–≥—Ä–∞—é—â–∏–µ)
                print("    üîç === –ü–û–ò–°–ö –í–°–ï–• –ê–ù–ò–ú–ê–¶–ò–ô ===")
                local allTracks = child:GetChildren()
                for l, item in pairs(allTracks) do
                    if item:IsA("AnimationTrack") then
                        print(string.format("      –¢—Ä–µ–∫ %d: %s", l, item.Animation.Name))
                    end
                end
            end
        end
    end
    
    return controllers
end

-- üîÑ –ú–û–ù–ò–¢–û–†–ò–ù–ì ANIMATIONCONTROLLER –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò
local function startControllerMonitoring(petModel)
    print("\nüìä === –ú–û–ù–ò–¢–û–†–ò–ù–ì ANIMATIONCONTROLLER ===")
    
    local rootPart = petModel:FindFirstChild("RootPart") or petModel:FindFirstChild("Torso") or petModel:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        print("‚ùå RootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    end
    
    local lastPosition = rootPart.Position
    local isMoving = false
    local standingTime = 0
    local movingTime = 0
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        local currentPos = rootPart.Position
        local distance = (currentPos - lastPosition).Magnitude
        
        if distance > 0.1 then
            if not isMoving then
                print("\nüèÉ === –ü–ò–¢–û–ú–ï–¶ –ù–ê–ß–ê–õ –î–í–ò–ì–ê–¢–¨–°–Ø ===")
                isMoving = true
                standingTime = 0
                
                -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º AnimationController –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
                print("üéÆ === ANIMATIONCONTROLLER –ü–†–ò –î–í–ò–ñ–ï–ù–ò–ò ===")
                analyzeAnimationController(petModel)
            end
            movingTime = movingTime + 1
        else
            if isMoving then
                print("\nüõë === –ü–ò–¢–û–ú–ï–¶ –û–°–¢–ê–ù–û–í–ò–õ–°–Ø ===")
                isMoving = false
                movingTime = 0
                
                -- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º AnimationController –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                print("üéÆ === ANIMATIONCONTROLLER –ü–†–ò –û–°–¢–ê–ù–û–í–ö–ï ===")
                analyzeAnimationController(petModel)
            end
            standingTime = standingTime + 1
        end
        
        lastPosition = currentPos
        
        -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        if tick() % 2 < 0.02 then
            print(string.format("\n‚è∞ === –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (%.1f —Å–µ–∫) ===", tick()))
            print("üèÉ –î–≤–∏–∂–µ—Ç—Å—è:", isMoving and "–î–ê" or "–ù–ï–¢")
            print("‚è±Ô∏è –°—Ç–æ–∏—Ç:", standingTime, "–∫–∞–¥—Ä–æ–≤")
            print("üèÉ –î–≤–∏–∂–µ—Ç—Å—è:", movingTime, "–∫–∞–¥—Ä–æ–≤")
            
            -- –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ AnimationController
            local controllers = {}
            for _, obj in pairs(petModel:GetDescendants()) do
                if obj:IsA("AnimationController") then
                    table.insert(controllers, obj)
                end
            end
            
            print("üéÆ AnimationController –Ω–∞–π–¥–µ–Ω–æ:", #controllers)
            
            for i, controller in pairs(controllers) do
                local animators = {}
                for _, child in pairs(controller:GetChildren()) do
                    if child:IsA("Animator") then
                        table.insert(animators, child)
                    end
                end
                
                print(string.format("  Controller %d: %d Animator(s)", i, #animators))
                
                for j, animator in pairs(animators) do
                    local tracks = animator:GetPlayingAnimationTracks()
                    print(string.format("    Animator %d: %d –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π", j, #tracks))
                    
                    for k, track in pairs(tracks) do
                        print(string.format("      %d. %s (Looped: %s, Playing: %s)", 
                            k, track.Animation.Name, track.Looped, track.IsPlaying))
                    end
                end
            end
        end
        
        -- –û–°–û–ë–´–ô –ê–ù–ê–õ–ò–ó –∫–æ–≥–¥–∞ –¥–æ–ª–≥–æ —Å—Ç–æ–∏—Ç
        if not isMoving and standingTime > 120 then -- 2 —Å–µ–∫—É–Ω–¥—ã —Å—Ç–æ—è–Ω–∏—è
            print("\nüéØ === –î–û–õ–ì–û–ï –°–¢–û–Ø–ù–ò–ï - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CONTROLLER ===")
            analyzeAnimationController(petModel)
            standingTime = 0 -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        end
    end)
    
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AnimationController –∑–∞–ø—É—â–µ–Ω!")
    
    -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 120 —Å–µ–∫—É–Ω–¥
    spawn(function()
        wait(120)
        connection:Disconnect()
        print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AnimationController –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    end)
    
    return connection
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    local petModel = findPet()
    if not petModel then
        return
    end
    
    print("\nüéÆ === –ù–ê–ß–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ANIMATIONCONTROLLER ===")
    analyzeAnimationController(petModel)
    
    print("\nüéÆ === –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===")
    print("üí° –ü–æ–¥–æ–π–¥–∏—Ç–µ –∫ –ø–∏—Ç–æ–º—Ü—É –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ AnimationController")
    print("üîç –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –º–æ–º–µ–Ω—Ç —Å—Ç–æ—è–Ω–∏—è –∏ –¥–≤–∏–∂–µ–Ω–∏—è")
    
    local connection = startControllerMonitoring(petModel)
end

-- üöÄ –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö
print("\nüöÄ === –ó–ê–ü–£–°–ö–ê–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ ANIMATIONCONTROLLER ===")
print("üí° –§–æ–∫—É—Å –Ω–∞ AnimationController –∏ –µ–≥–æ Animator!")
print("üî¨ –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –∏–¥—Ç–∏ 120 —Å–µ–∫—É–Ω–¥...")

spawn(function()
    wait(2)
    main()
end)

print("\nüí° === –¶–ï–õ–¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
print("üéÆ 1. –ò–ó–£–ß–ò–¢–¨ —Å—Ç—Ä—É–∫—Ç—É—Ä—É AnimationController")
print("üé≠ 2. –ù–ê–ô–¢–ò –≤—Å–µ Animator –≤–Ω—É—Ç—Ä–∏ AnimationController")
print("üìΩÔ∏è 3. –û–¢–°–õ–ï–î–ò–¢–¨ –∫–∞–∫–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞—é—Ç –≤ idle –∏ walking")
print("üîÑ 4. –ü–û–ù–Ø–¢–¨ –∫–∞–∫ –∑–∞—Ü–∏–∫–ª–∏—Ç—å idle –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ AnimationController")
print("üéØ 5. –ù–ê–ô–¢–ò —Å–ø–æ—Å–æ–± –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–µ–π")
print("\nüöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–ü–£–©–ï–ù–ê!")
