-- ModelExpansionAnalyzer.lua
-- –ê–ù–ê–õ–ò–ó–ê–¢–û–† –†–ê–°–®–ò–†–ï–ù–ò–Ø –ú–û–î–ï–õ–ò: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ö–ê–ö –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø–æ–ª–Ω—É—é
-- –§–∏–∫—Å–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–µ–π, Motor6D, –∞–Ω–∏–º–∞—Ü–∏–π –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî¨ === MODEL EXPANSION ANALYZER ===")
print("üéØ –¶–µ–ª—å: –ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–æ –ø–æ–ª–Ω–æ–π")
print("=" .. string.rep("=", 60))

-- üìä –î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –†–ê–°–®–ò–†–ï–ù–ò–Ø
local ExpansionData = {
    baseModel = nil,
    expandedModel = nil,
    expansionSteps = {},
    snapshots = {},
    scripts = {},
    startTime = nil,
    isAnalyzing = false
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –†–ê–°–®–ò–†–ï–ù–ò–Ø
local ExpansionConsole = nil
local ConsoleLines = {}
local MaxLines = 150

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createExpansionConsole()
    if ExpansionConsole then ExpansionConsole:Destroy() end
    
    ExpansionConsole = Instance.new("ScreenGui")
    ExpansionConsole.Name = "ModelExpansionAnalyzerConsole"
    ExpansionConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 850, 0, 650)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.02, 0.1, 0.05)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(0.2, 1, 0.5)
    frame.Parent = ExpansionConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(0.2, 1, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üî¨ MODEL EXPANSION ANALYZER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.01, 0.05, 0.02)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üî¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≥–æ—Ç–æ–≤..."
    textLabel.TextColor3 = Color3.new(0.9, 1, 0.9)
    textLabel.TextSize = 10
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
local function expansionLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local relativeTime = ExpansionData.startTime and string.format("+%.3f", tick() - ExpansionData.startTime) or "0.000"
    
    local prefixes = {
        EXPANSION = "üî¨", BASE = "üì¶", STEP = "üîß", SNAPSHOT = "üì∏",
        SCRIPT = "üìú", FOUND = "üéØ", CRITICAL = "üî•", SUCCESS = "‚úÖ", 
        ERROR = "‚ùå", INFO = "‚ÑπÔ∏è", DETAIL = "üìù", COMPARE = "‚öñÔ∏è"
    }
    
    local logLine = string.format("[%s] (%s) %s %s", timestamp, relativeTime, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if ExpansionConsole then
        local textLabel = ExpansionConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üì¶ –ü–û–ò–°–ö –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò
local function findBaseModel(petName)
    expansionLog("BASE", "üì¶ –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è: " .. petName)
    
    -- –ü–æ–∏—Å–∫ –≤ ReplicatedStorage.Skins
    local skins = ReplicatedStorage:FindFirstChild("Skins")
    if skins then
        local baseModel = skins:FindFirstChild(petName)
        if baseModel then
            ExpansionData.baseModel = baseModel
            
            expansionLog("SUCCESS", "‚úÖ –ë–ê–ó–û–í–ê–Ø –ú–û–î–ï–õ–¨ –ù–ê–ô–î–ï–ù–ê!", {
                Name = baseModel.Name,
                Path = baseModel:GetFullName(),
                Children = #baseModel:GetChildren(),
                Descendants = #baseModel:GetDescendants(),
                ClassName = baseModel.ClassName
            })
            
            -- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            analyzeBaseModel(baseModel)
            return baseModel
        end
    end
    
    -- –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö ReplicatedStorage
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == petName then
            ExpansionData.baseModel = obj
            
            expansionLog("SUCCESS", "‚úÖ –ë–ê–ó–û–í–ê–Ø –ú–û–î–ï–õ–¨ –ù–ê–ô–î–ï–ù–ê –í –î–†–£–ì–û–ú –ú–ï–°–¢–ï!", {
                Name = obj.Name,
                Path = obj:GetFullName(),
                Children = #obj:GetChildren(),
                Descendants = #obj:GetDescendants()
            })
            
            analyzeBaseModel(obj)
            return obj
        end
    end
    
    expansionLog("ERROR", "‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    return nil
end

-- üìù –ê–ù–ê–õ–ò–ó –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò
local function analyzeBaseModel(baseModel)
    expansionLog("DETAIL", "üìù –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ê–ó–û–í–û–ô –ú–û–î–ï–õ–ò: " .. baseModel.Name)
    
    local baseStructure = {}
    local baseParts = {}
    
    for _, obj in pairs(baseModel:GetDescendants()) do
        baseStructure[obj.ClassName] = (baseStructure[obj.ClassName] or 0) + 1
        
        if obj:IsA("BasePart") then
            table.insert(baseParts, {
                Name = obj.Name,
                Size = tostring(obj.Size),
                Material = tostring(obj.Material)
            })
        end
    end
    
    expansionLog("DETAIL", "üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏:", baseStructure)
    
    if #baseParts > 0 then
        expansionLog("DETAIL", "üìù –ß–∞—Å—Ç–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏:")
        for i, part in ipairs(baseParts) do
            expansionLog("DETAIL", string.format("  –ß–∞—Å—Ç—å %d: %s", i, part.Name), part)
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–Ω–∏–º–æ–∫ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    ExpansionData.snapshots["base"] = {
        time = tick(),
        structure = baseStructure,
        parts = baseParts,
        children = #baseModel:GetChildren(),
        descendants = #baseModel:GetDescendants()
    }
end

-- üì∏ –°–û–ó–î–ê–ù–ò–ï –°–ù–ò–ú–ö–ê –ú–û–î–ï–õ–ò
local function takeModelSnapshot(model, snapshotName)
    local structure = {}
    local parts = {}
    local motor6ds = {}
    local scripts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        structure[obj.ClassName] = (structure[obj.ClassName] or 0) + 1
        
        if obj:IsA("BasePart") then
            table.insert(parts, {
                Name = obj.Name,
                Size = tostring(obj.Size),
                Material = tostring(obj.Material),
                Anchored = obj.Anchored
            })
        elseif obj:IsA("Motor6D") then
            table.insert(motor6ds, {
                Name = obj.Name,
                Part0 = obj.Part0 and obj.Part0.Name or "NIL",
                Part1 = obj.Part1 and obj.Part1.Name or "NIL"
            })
        elseif obj:IsA("Script") or obj:IsA("LocalScript") then
            table.insert(scripts, {
                Name = obj.Name,
                ClassName = obj.ClassName,
                Parent = obj.Parent and obj.Parent.Name or "NIL"
            })
        end
    end
    
    local snapshot = {
        time = tick(),
        relativeTime = ExpansionData.startTime and (tick() - ExpansionData.startTime) or 0,
        structure = structure,
        parts = parts,
        motor6ds = motor6ds,
        scripts = scripts,
        children = #model:GetChildren(),
        descendants = #model:GetDescendants()
    }
    
    ExpansionData.snapshots[snapshotName] = snapshot
    
    expansionLog("SNAPSHOT", "üì∏ –°–ù–ò–ú–û–ö –ú–û–î–ï–õ–ò: " .. snapshotName, {
        Children = snapshot.children,
        Descendants = snapshot.descendants,
        RelativeTime = string.format("%.3f —Å–µ–∫", snapshot.relativeTime)
    })
    
    return snapshot
end

-- ‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï –°–ù–ò–ú–ö–û–í
local function compareSnapshots(snapshot1Name, snapshot2Name)
    local snap1 = ExpansionData.snapshots[snapshot1Name]
    local snap2 = ExpansionData.snapshots[snapshot2Name]
    
    if not snap1 or not snap2 then
        expansionLog("ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–Ω–∏–º–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        return
    end
    
    expansionLog("COMPARE", string.format("‚öñÔ∏è –°–†–ê–í–ù–ï–ù–ò–ï: %s VS %s", snapshot1Name, snapshot2Name))
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    local childrenDiff = snap2.children - snap1.children
    local descendantsDiff = snap2.descendants - snap1.descendants
    
    expansionLog("COMPARE", "‚öñÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:", {
        ChildrenBefore = snap1.children,
        ChildrenAfter = snap2.children,
        ChildrenDiff = childrenDiff,
        DescendantsBefore = snap1.descendants,
        DescendantsAfter = snap2.descendants,
        DescendantsDiff = descendantsDiff
    })
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    local structureDiff = {}
    
    -- –ù–æ–≤—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
    for className, count in pairs(snap2.structure) do
        local oldCount = snap1.structure[className] or 0
        if count > oldCount then
            structureDiff[className] = string.format("+%d (–±—ã–ª–æ %d, —Å—Ç–∞–ª–æ %d)", count - oldCount, oldCount, count)
        end
    end
    
    -- –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
    for className, count in pairs(snap1.structure) do
        if not snap2.structure[className] then
            structureDiff[className] = string.format("-%d (—É–¥–∞–ª–µ–Ω–æ)", count)
        end
    end
    
    if next(structureDiff) then
        expansionLog("COMPARE", "‚öñÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", structureDiff)
    else
        expansionLog("COMPARE", "‚öñÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    end
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Motor6D
    if #snap2.motor6ds > #snap1.motor6ds then
        expansionLog("COMPARE", string.format("‚öñÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ Motor6D: %d", #snap2.motor6ds - #snap1.motor6ds))
        for i = #snap1.motor6ds + 1, #snap2.motor6ds do
            local motor = snap2.motor6ds[i]
            expansionLog("DETAIL", string.format("  –ù–æ–≤—ã–π Motor6D: %s", motor.Name), motor)
        end
    end
    
    -- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
    if #snap2.scripts > #snap1.scripts then
        expansionLog("COMPARE", string.format("‚öñÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–≤: %d", #snap2.scripts - #snap1.scripts))
        for i = #snap1.scripts + 1, #snap2.scripts do
            local script = snap2.scripts[i]
            expansionLog("DETAIL", string.format("  –ù–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç: %s", script.Name), script)
        end
    end
end

-- üîß –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ê–°–®–ò–†–ï–ù–ò–Ø –ú–û–î–ï–õ–ò
local function monitorModelExpansion(model)
    expansionLog("EXPANSION", "üîß –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ê–°–®–ò–†–ï–ù–ò–Ø –ú–û–î–ï–õ–ò: " .. model.Name)
    
    ExpansionData.expandedModel = model
    
    -- –ù–∞—á–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫
    takeModelSnapshot(model, "initial")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    local stepCounter = 1
    
    local childAddedConnection = model.DescendantAdded:Connect(function(obj)
        local relativeTime = ExpansionData.startTime and (tick() - ExpansionData.startTime) or 0
        
        expansionLog("STEP", string.format("üîß –®–ê–ì %d: –î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç %s", stepCounter, obj.Name), {
            ClassName = obj.ClassName,
            Parent = obj.Parent and obj.Parent.Name or "NIL",
            RelativeTime = string.format("%.3f —Å–µ–∫", relativeTime)
        })
        
        -- –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if obj:IsA("BasePart") or obj:IsA("Motor6D") or obj:IsA("Script") or obj:IsA("LocalScript") then
            local snapshotName = string.format("step_%d", stepCounter)
            takeModelSnapshot(model, snapshotName)
            
            -- –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–Ω–∏–º–∫–æ–º
            if stepCounter == 1 then
                compareSnapshots("initial", snapshotName)
            else
                compareSnapshots(string.format("step_%d", stepCounter - 1), snapshotName)
            end
        end
        
        stepCounter = stepCounter + 1
    end)
    
    -- –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    spawn(function()
        wait(5) -- –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        takeModelSnapshot(model, "final")
        compareSnapshots("initial", "final")
        
        expansionLog("CRITICAL", "üî• –ê–ù–ê–õ–ò–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù!")
        generateExpansionReport()
        
        childAddedConnection:Disconnect()
    end)
    
    return childAddedConnection
end

-- üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –†–ê–°–®–ò–†–ï–ù–ò–ò
local function generateExpansionReport()
    expansionLog("CRITICAL", "üìã === –û–¢–ß–ï–¢ –û –†–ê–°–®–ò–†–ï–ù–ò–ò –ú–û–î–ï–õ–ò ===")
    
    if ExpansionData.baseModel then
        expansionLog("INFO", "üì¶ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: " .. ExpansionData.baseModel:GetFullName())
    end
    
    if ExpansionData.expandedModel then
        expansionLog("INFO", "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: " .. ExpansionData.expandedModel:GetFullName())
    end
    
    local initialSnap = ExpansionData.snapshots["initial"]
    local finalSnap = ExpansionData.snapshots["final"]
    
    if initialSnap and finalSnap then
        expansionLog("CRITICAL", "üî• –ò–¢–û–ì–û–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:", {
            ChildrenBefore = initialSnap.children,
            ChildrenAfter = finalSnap.children,
            ChildrenIncrease = finalSnap.children - initialSnap.children,
            DescendantsBefore = initialSnap.descendants,
            DescendantsAfter = finalSnap.descendants,
            DescendantsIncrease = finalSnap.descendants - initialSnap.descendants
        })
    end
    
    expansionLog("CRITICAL", string.format("üìä –í—Å–µ–≥–æ —Å–Ω–∏–º–∫–æ–≤: %d", #ExpansionData.snapshots))
    expansionLog("CRITICAL", "üî¨ –ê–ù–ê–õ–ò–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –ó–ê–í–ï–†–®–ï–ù!")
end

-- üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –†–ê–°–®–ò–†–ï–ù–ò–Ø
local function startExpansionAnalysis()
    expansionLog("EXPANSION", "üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –†–ê–°–®–ò–†–ï–ù–ò–Ø –ú–û–î–ï–õ–ò")
    expansionLog("EXPANSION", "üî¨ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ –ø–æ–ª–Ω—É—é")
    
    ExpansionData.isAnalyzing = true
    ExpansionData.startTime = tick()
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –≤ Visuals
    local visuals = Workspace:FindFirstChild("Visuals")
    if not visuals then
        expansionLog("ERROR", "‚ùå –ü–∞–ø–∫–∞ Visuals –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    end
    
    expansionLog("SUCCESS", "‚úÖ –ü–∞–ø–∫–∞ Visuals –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    
    local visualsConnection = visuals.ChildAdded:Connect(function(obj)
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" or
               name == "goldenlab" or name:find("lab") then
                
                expansionLog("FOUND", "üéØ –ü–ò–¢–û–ú–ï–¶ –û–ë–ù–ê–†–£–ñ–ï–ù –í VISUALS: " .. obj.Name)
                
                -- –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                local baseModel = findBaseModel(obj.Name)
                
                -- –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                monitorModelExpansion(obj)
                
                -- –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Visuals
                visualsConnection:Disconnect()
            end
        end
    end)
    
    expansionLog("EXPANSION", "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω!")
    expansionLog("EXPANSION", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê!")
    
    -- –ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
    spawn(function()
        wait(180)
        if visualsConnection then
            visualsConnection:Disconnect()
        end
        ExpansionData.isAnalyzing = false
        expansionLog("EXPANSION", "‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
    end)
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createExpansionGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ModelExpansionAnalyzerGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 350, 0, 120)
    frame.Position = UDim2.new(1, -370, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.02, 0.1, 0.05)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(0.2, 1, 0.5)
    title.BorderSizePixel = 0
    title.Text = "üî¨ EXPANSION ANALYZER"
    title.TextColor3 = Color3.new(0, 0, 0)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(0.2, 1, 0.5)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üî¨ –ê–ù–ê–õ–ò–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø"
    startBtn.TextColor3 = Color3.new(0, 0, 0)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 30)
    status.Position = UDim2.new(0, 10, 0, 90)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üî¨ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω!"
        status.TextColor3 = Color3.new(0.2, 1, 0.5)
        startBtn.Text = "‚úÖ –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ï–ù"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startExpansionAnalysis()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createExpansionConsole()
createExpansionGUI()

expansionLog("EXPANSION", "‚úÖ ModelExpansionAnalyzer –≥–æ—Ç–æ–≤!")
expansionLog("EXPANSION", "üî¨ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ—Ç –±–∞–∑–æ–≤–æ–π –¥–æ –ø–æ–ª–Ω–æ–π")
expansionLog("EXPANSION", "üì∏ –°–Ω–∏–º–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ + —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
expansionLog("EXPANSION", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ê–ù–ê–õ–ò–ó –†–ê–°–®–ò–†–ï–ù–ò–Ø' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ!")
