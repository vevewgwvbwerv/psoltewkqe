-- üî• PET SCALER v2.0 - –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
-- –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PetScaler + SmartMotorCopier
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –ò —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER v2.0 - –° –ê–ù–ò–ú–ê–¶–ò–ï–ô ===")
print("=" .. string.rep("=", 60))

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø - –∞–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞)
local CONFIG = {
    SEARCH_RADIUS = 100,
    START_SCALE = 0.3,      -- –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–º–∞–ª–µ–Ω—å–∫–∏–π)
    END_SCALE = 1.0,        -- –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π)
    TWEEN_TIME = 3.0,       -- –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–æ—Å—Ç–∞
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞: –æ—Ç", CONFIG.START_SCALE .. "x –¥–æ", CONFIG.END_SCALE .. "x")
print("‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏:", CONFIG.TWEEN_TIME .. " —Å–µ–∫")
print()

-- === –§–£–ù–ö–¶–ò–ò –ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û PETSCALER ===

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–æ–º—Ü–∞ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function hasPetVisuals(model)
    local visualCount = 0
    local petVisuals = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        local visualData = nil
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º MeshPart (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if obj:IsA("MeshPart") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                type = "MeshPart"
            }
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º SpecialMesh (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        elseif obj:IsA("SpecialMesh") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                meshId = obj.MeshId or "",
                textureId = obj.TextureId or "",
                type = "SpecialMesh"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ Part —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏/–¥–µ–∫–∞–ª—è–º–∏
        elseif obj:IsA("Part") then
            -- –ò—â–µ–º Decal –∏–ª–∏ Texture –Ω–∞ Part
            local hasDecal = obj:FindFirstChildOfClass("Decal")
            local hasTexture = obj:FindFirstChildOfClass("Texture")
            
            if hasDecal or hasTexture or obj.Material ~= Enum.Material.Plastic then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    material = obj.Material.Name,
                    hasDecal = hasDecal ~= nil,
                    hasTexture = hasTexture ~= nil,
                    type = "Part"
                }
            end
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º UnionOperation (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏)
        elseif obj:IsA("UnionOperation") then
            visualCount = visualCount + 1
            visualData = {
                name = obj.Name,
                className = obj.ClassName,
                type = "UnionOperation"
            }
        
        -- –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º Attachment —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        elseif obj:IsA("Attachment") then
            local hasEffect = #obj:GetChildren() > 0
            if hasEffect then
                visualCount = visualCount + 1
                visualData = {
                    name = obj.Name,
                    className = obj.ClassName,
                    effectCount = #obj:GetChildren(),
                    type = "Attachment"
                }
            end
        end
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if visualData then
            table.insert(petVisuals, visualData)
        end
    end
    
    -- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç BasePart'—ã, —Å—á–∏—Ç–∞–µ–º –µ—ë –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–∏—Ç–æ–º—Ü–µ–º
    if visualCount == 0 then
        local partCount = 0
        for _, obj in pairs(model:GetDescendants()) do
            if obj:IsA("BasePart") then
                partCount = partCount + 1
            end
        end
        
        -- –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü
        if partCount >= 2 then
            visualCount = partCount
            table.insert(petVisuals, {
                name = "BaseParts",
                className = "Multiple",
                partCount = partCount,
                type = "BasePart"
            })
            print("  üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü —Å " .. partCount .. " —á–∞—Å—Ç—è–º–∏: " .. model.Name)
        end
    end
    
    return visualCount > 0, petVisuals
end

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        
        local targetPosition = originalCFrame.Position + offset
        
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = {copy, originalModel}
        
        local rayOrigin = Vector3.new(targetPosition.X, targetPosition.Y + 100, targetPosition.Z)
        local rayDirection = Vector3.new(0, -200, 0)
        
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local groundY = raycastResult.Position.Y
            local finalPosition = Vector3.new(targetPosition.X, groundY, targetPosition.Z)
            local newCFrame = CFrame.new(finalPosition, originalCFrame.LookVector)
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∑–µ–º–ª–µ")
        else
            local newCFrame = originalCFrame + offset
            copy:SetPrimaryPartCFrame(newCFrame)
            print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        end
    elseif copy:FindFirstChild("RootPart") and originalModel:FindFirstChild("RootPart") then
        local originalPos = originalModel.RootPart.Position
        local offset = Vector3.new(15, 0, 0)
        copy.RootPart.Position = originalPos + offset
        print("üìç –ö–æ–ø–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–µ—Ä–µ–∑ RootPart")
    else
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—é")
    end
    
    -- –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Anchored –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç SmartAnchoredManagement
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Å—Ä–∞–∑—É –≤ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ
local function createSmallCopy(originalModel, startScale)
    print("üê£ –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é —Å—Ä–∞–∑—É –≤ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ (" .. startScale .. "x)")
    
    -- –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–ø–∏—é
    local copy = deepCopyModel(originalModel)
    if not copy then
        return nil
    end
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored
    local copyParts = getAllParts(copy)
    if not copyParts or #copyParts == 0 then
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å—Ç–∏ –∫–æ–ø–∏–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        return copy -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Anchored
    end
    smartAnchoredManagement(copyParts)
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
    local centerCFrame
    if copy.PrimaryPart then
        centerCFrame = copy.PrimaryPart.CFrame
    else
        local success, modelCFrame = pcall(function() return copy:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –∫–æ–ø–∏–∏!")
            return copy -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        end
    end
    
    -- –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–æ startScale
    for _, part in ipairs(copyParts) do
        local originalSize = part.Size
        local originalCFrame = part.CFrame
        
        -- –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
        part.Size = originalSize * startScale
        
        -- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * startScale) * (relativeCFrame - relativeCFrame.Position)
        part.CFrame = centerCFrame * scaledRelativeCFrame
    end
    
    print("‚úÖ –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–ø–∏—è –≥–æ—Ç–æ–≤–∞!")
    return copy
end

-- === –§–£–ù–ö–¶–ò–ò –ò–ó SMARTMOTORCOPIER ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Motor6D –∏–∑ –º–æ–¥–µ–ª–∏
local function getMotor6Ds(model)
    local motors = {}
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            table.insert(motors, obj)
        end
    end
    
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã Motor6D
local function createMotorMap(motors)
    local map = {}
    
    for _, motor in ipairs(motors) do
        local key = motor.Name
        if motor.Part0 then
            key = key .. "_" .. motor.Part0.Name
        end
        if motor.Part1 then
            key = key .. "_" .. motor.Part1.Name
        end
        
        map[key] = motor
    end
    
    return map
end

-- –§—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Anchored (–∏–∑ SmartMotorCopier)
local function smartAnchoredManagement(copyParts)
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Anchored...")
    
    -- –ù–∞—Ö–æ–¥–∏–º "–∫–æ—Ä–Ω–µ–≤—É—é" —á–∞—Å—Ç—å
    local rootPart = nil
    local rootCandidates = {"RootPart", "Torso", "HumanoidRootPart", "UpperTorso", "LowerTorso"}
    
    for _, candidate in ipairs(rootCandidates) do
        for _, part in ipairs(copyParts) do
            if part.Name == candidate then
                rootPart = part
                break
            end
        end
        if rootPart then break end
    end
    
    if not rootPart then
        rootPart = copyParts[1]
        print("  ‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é:", rootPart.Name)
    else
        print("  ‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è —á–∞—Å—Ç—å:", rootPart.Name)
    end
    
    -- –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—ã–π Anchored
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true -- –¢–æ–ª—å–∫–æ –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω
        else
            part.Anchored = false -- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è
        end
    end
    
    print("  ‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –∫–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    copyMotor.Transform = originalMotor.Transform
    copyMotor.C0 = originalMotor.C0
    copyMotor.C1 = originalMotor.C1
    
    return true
end

-- === –§–£–ù–ö–¶–ò–ò –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï) ===

-- –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–æ—Å—Ç–∞ –º–æ–¥–µ–ª–∏ (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–∂–µ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é)
local function animateModelGrowth(model, startScale, endScale, tweenTime)
    print("üå± –ù–∞—á–∏–Ω–∞—é –∞–Ω–∏–º–∞—Ü–∏—é —Ä–æ—Å—Ç–∞ –º–æ–¥–µ–ª–∏:", model.Name)
    print("üìè –†–∞–∑–º–µ—Ä: –æ—Ç " .. startScale .. "x –¥–æ " .. endScale .. "x")
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
        print("üéØ –¶–µ–Ω—Ç—Ä —Ä–æ—Å—Ç–∞: PrimaryPart (" .. model.PrimaryPart.Name .. ")")
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
            print("üéØ –¶–µ–Ω—Ç—Ä —Ä–æ—Å—Ç–∞: –¶–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏")
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä —Ä–æ—Å—Ç–∞!")
            return false
        end
    end
    
    -- –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–º–æ–¥–µ–ª—å —É–∂–µ –≤ –º–∞–ª–µ–Ω—å–∫–æ–º —Ä–∞–∑–º–µ—Ä–µ)
    local scaleRatio = endScale / startScale -- –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    print("üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", scaleRatio .. "x")
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π (–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)
    local currentData = {}
    for _, part in ipairs(parts) do
        currentData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç startScale –¥–æ endScale
    print("üîº –ü–ª–∞–≤–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é –æ—Ç " .. startScale .. "x –¥–æ " .. endScale .. "x...")
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo –¥–ª—è —Ä–æ—Å—Ç–∞
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0, -- –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        false, -- –û–±—Ä–∞—Ç–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        0 -- –ó–∞–¥–µ—Ä–∂–∫–∞
    )
    
    -- –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local currentSize = currentData[part].size
        local currentCFrame = currentData[part].cframe
        
        -- –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π)
        local finalSize = currentSize * scaleRatio
        
        -- –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π CFrame (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞)
        local relativeCFrame = centerCFrame:Inverse() * currentCFrame
        local finalRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleRatio) * (relativeCFrame - relativeCFrame.Position)
        local finalCFrame = centerCFrame * finalRelativeCFrame
        
        -- –°–æ–∑–¥–∞–µ–º —Ç–≤–∏–Ω —Ä–æ—Å—Ç–∞
        local tween = TweenService:Create(part, tweenInfo, {
            Size = finalSize,
            CFrame = finalCFrame
        })
        
        -- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                print("üéâ –ü–∏—Ç–æ–º–µ—Ü –≤—ã—Ä–æ—Å –æ—Ç " .. startScale .. "x –¥–æ " .. endScale .. "x —Ä–∞–∑–º–µ—Ä–∞")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–æ " .. #tweens .. " —Ç–≤–∏–Ω–æ–≤ —Ä–æ—Å—Ç–∞")
    return true
end

-- === –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ñ–ò–í–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø ===

local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    print("  Motor6D - –û—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–ö–æ–ø–∏—è:", #copyMotors)
    
    if #originalMotors == 0 or #copyMotors == 0 then
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Motor6D –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return nil
    end
    
    local originalMap = createMotorMap(originalMotors)
    local copyMap = createMotorMap(copyMotors)
    
    local connection = nil
    local isRunning = true
    local frameCount = 0
    
    connection = RunService.Heartbeat:Connect(function()
        if not isRunning then
            connection:Disconnect()
            return
        end
        
        frameCount = frameCount + 1
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if not original.Parent or not copy.Parent then
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
            isRunning = false
            return
        end
        
        -- –ö–æ–ø–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
        for key, originalMotor in pairs(originalMap) do
            local copyMotor = copyMap[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor)
            end
        end
        
        -- –°—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        if frameCount % 180 == 0 then
            print("üìä –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–∫–∞–¥—Ä " .. frameCount .. ")")
        end
    end)
    
    print("‚úÖ –ñ–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Motor6D –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üí° –ö–æ–ø–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
    
    return connection
end

-- === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PetScaler)
local function findAndScalePet()
    print("üîç –ü–æ–∏—Å–∫ UUID –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–µ–≤...")
    
    local foundPets = {}
    
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj.Name:find("%{") and obj.Name:find("%}") then
            local success, modelCFrame = pcall(function() return obj:GetModelCFrame() end)
            if success then
                local distance = (modelCFrame.Position - playerPos).Magnitude
                if distance <= CONFIG.SEARCH_RADIUS then
                    local hasVisuals, meshes = hasPetVisuals(obj)
                    if hasVisuals then
                        table.insert(foundPets, {
                            model = obj,
                            distance = distance,
                            meshes = meshes
                        })
                    end
                end
            end
        end
    end
    
    if #foundPets == 0 then
        print("‚ùå –ü–∏—Ç–æ–º—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    local targetPet = foundPets[1]
    print("üéØ –í—ã–±—Ä–∞–Ω –ø–∏—Ç–æ–º–µ—Ü:", targetPet.model.Name)
    
    return targetPet.model
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è v2.0 (–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê)
local function main()
    print("üöÄ PetScaler v2.0 –∑–∞–ø—É—â–µ–Ω!")
    
    -- –®–∞–≥ 1: –ù–∞–π—Ç–∏ –ø–∏—Ç–æ–º—Ü–∞
    local petModel = findAndScalePet()
    if not petModel then
        return
    end
    
    -- –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ–ø–∏—é —Å—Ä–∞–∑—É (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
    print("\nüê£ === –°–û–ó–î–ê–ù–ò–ï –ú–ê–õ–ï–ù–¨–ö–û–ô –ö–û–ü–ò–ò ===")
    local petCopy = createSmallCopy(petModel, CONFIG.START_SCALE)
    if not petCopy then
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–ª–µ–Ω—å–∫—É—é –∫–æ–ø–∏—é!")
        return
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Workspace
    if not petCopy or not petCopy.Parent then
        print("‚ùå –ö–æ–ø–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return
    end
    
    -- –®–∞–≥ 3: –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ (–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!)
    print("\nüîÑ === –ó–ê–ü–£–°–ö –ñ–ò–í–û–ô –ê–ù–ò–ú–ê–¶–ò–ò ===")
    local animationConnection = nil
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–µ –º–æ–¥–µ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if petModel and petModel.Parent and petCopy and petCopy.Parent then
        animationConnection = startLiveMotorCopying(petModel, petCopy)
    end
    
    if not animationConnection then
        print("‚ö†Ô∏è –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    else
        print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è!")
    end
    
    -- –®–∞–≥ 4: –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä–æ—Å—Ç–∞
    print("\nüå± === –ê–ù–ò–ú–ê–¶–ò–Ø –†–û–°–¢–ê ===")
    wait(0.3) -- –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ø–∏—è –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not petCopy or not petCopy.Parent then
        print("‚ùå –ö–æ–ø–∏—è –∏—Å—á–µ–∑–ª–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ä–æ—Å—Ç–∞!")
        return
    end
    
    local growthSuccess = animateModelGrowth(petCopy, CONFIG.START_SCALE, CONFIG.END_SCALE, CONFIG.TWEEN_TIME)
    
    if not growthSuccess then
        print("‚ùå –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        return
    end
    
    -- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    print("\nüéâ === –£–°–ü–ï–•! ===")
    print("‚úÖ –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    print("‚úÖ –ñ–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Å—Ä–∞–∑—É")
    print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    print("üí° –ü–∏—Ç–æ–º–µ—Ü –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–∑—É –¥–≤–∏–≥–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏!")
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerV2GUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerV2GUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 150) -- –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º PetScaler
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(0, 255, 0) -- –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
    button.TextColor3 = Color3.fromRGB(0, 0, 0)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            local success, errorMsg = pcall(function()
                main()
            end)
            
            if success then
                wait(3)
                button.Text = "üî• PetScaler v2.0 + –ê–Ω–∏–º–∞—Ü–∏—è"
                button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            else
                print("‚ùå –û—à–∏–±–∫–∞ –≤ main():", errorMsg)
                button.Text = "‚ùå –û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
                button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            end
        end)
    end)
    
    button.MouseEnter:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 255, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 220, 0)
        end
    end)
    
    button.MouseLeave:Connect(function()
        if button.BackgroundColor3 == Color3.fromRGB(0, 220, 0) then
            button.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
        end
    end)
    
    print("üñ•Ô∏è PetScaler v2.0 GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("=" .. string.rep("=", 60))
print("üí° PETSCALER v2.0 - –í–°–ï –í –û–î–ù–û–ú:")
print("   1. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é")
print("   2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Anchored —Å–æ—Å—Ç–æ—è–Ω–∏—è")
print("   3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("üéØ –ù–∞–∂–º–∏—Ç–µ –∑–µ–ª–µ–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
print("=" .. string.rep("=", 60))
