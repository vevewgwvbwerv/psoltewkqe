-- AssemblyLocationDetector.lua
-- –î–ï–¢–ï–ö–¢–û–† –ú–ï–°–¢–ê –°–ë–û–†–ö–ò: –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–∏—Ç–æ–º—Ü–∞
-- –ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏ –î–û –ø–æ—è–≤–ª–µ–Ω–∏—è –≤ Visuals
-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–±–µ–∑ –ø–æ–º–µ—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local StarterGui = game:GetService("StarterGui")
local StarterPack = game:GetService("StarterPack")
local StarterPlayer = game:GetService("StarterPlayer")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

print("üîç === ASSEMBLY LOCATION DETECTOR ===")
print("üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –¢–û–ß–ù–û–ï –º–µ—Å—Ç–æ —Å–±–æ—Ä–∫–∏ –ø–æ–ª–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞")
print("üè† –†–µ–∂–∏–º: –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è (–±–µ–∑ –ø–æ–º–µ—Ö)")
print("=" .. string.rep("=", 70))

-- üìä –î–ê–ù–ù–´–ï –î–ï–¢–ï–ö–¢–û–†–ê –ú–ï–°–¢–ê –°–ë–û–†–ö–ò
local DetectorData = {
    monitoredServices = {},
    detectedModels = {},
    assemblyLocations = {},
    petSequence = {},
    isActive = false,
    startTime = 0,
    connections = {},
    scanDepth = 0
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –î–ï–¢–ï–ö–¢–û–†–ê
local DetectorConsole = nil
local ConsoleLines = {}
local MaxLines = 200

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createDetectorConsole()
    if DetectorConsole then DetectorConsole:Destroy() end
    
    DetectorConsole = Instance.new("ScreenGui")
    DetectorConsole.Name = "AssemblyLocationDetectorConsole"
    DetectorConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 1000, 0, 800)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.05, 0.02, 0.1)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(0.5, 0.1, 1)
    frame.Parent = DetectorConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(0.5, 0.1, 1)
    title.BorderSizePixel = 0
    title.Text = "üîç ASSEMBLY LOCATION DETECTOR"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.02, 0.01, 0.05)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –º–µ—Å—Ç–∞ —Å–±–æ—Ä–∫–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ..."
    textLabel.TextColor3 = Color3.new(0.9, 0.8, 1)
    textLabel.TextSize = 10
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
local function detectorLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local relativeTime = DetectorData.startTime > 0 and string.format("(+%.3f)", tick() - DetectorData.startTime) or ""
    
    local prefixes = {
        DETECTOR = "üîç", LOCATION = "üìç", MODEL = "üéØ", ASSEMBLY = "üîß",
        MONITOR = "üëÅÔ∏è", FOUND = "‚úÖ", CRITICAL = "üî•", SUCCESS = "üíé", 
        ERROR = "‚ùå", INFO = "‚ÑπÔ∏è", DETAIL = "üìù", SEQUENCE = "üîÑ",
        SERVICE = "üè¢", CONTAINER = "üì¶", CREATION = "‚ö°", MOVEMENT = "üöö"
    }
    
    local logLine = string.format("[%s] %s %s %s", timestamp, relativeTime, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if DetectorConsole then
        local textLabel = DetectorConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üìä –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ò –ù–ê –ü–†–ï–î–ú–ï–¢ –ü–ò–¢–û–ú–¶–ê
local function isPetModel(model)
    if not model:IsA("Model") then return false end
    
    local name = model.Name:lower()
    local petNames = {
        "dog", "bunny", "golden lab", "goldenlab", "cat", "rabbit", 
        "puppy", "kitten", "lab", "retriever", "beagle", "poodle",
        "hamster", "guinea pig", "bird", "parrot", "fish", "turtle"
    }
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏
    for _, petName in ipairs(petNames) do
        if name == petName or name:find(petName) then
            return true, petName
        end
    end
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —á–∞—Å—Ç–µ–π –ø–∏—Ç–æ–º—Ü–∞)
    local hasBodyParts = false
    local bodyParts = {"head", "torso", "body", "tail", "leg", "arm", "paw"}
    
    for _, child in pairs(model:GetChildren()) do
        local childName = child.Name:lower()
        for _, bodyPart in ipairs(bodyParts) do
            if childName:find(bodyPart) then
                hasBodyParts = true
                break
            end
        end
        if hasBodyParts then break end
    end
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É Motor6D (–ø–∏—Ç–æ–º—Ü—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
    local motor6dCount = 0
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            motor6dCount = motor6dCount + 1
        end
    end
    
    if hasBodyParts and motor6dCount >= 5 then
        return true, "structure_based"
    end
    
    return false, nil
end

-- üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò
local function analyzeModelStructure(model, location)
    local structure = {
        name = model.Name,
        location = location,
        path = model:GetFullName(),
        children = #model:GetChildren(),
        descendants = #model:GetDescendants(),
        timestamp = tick(),
        relativeTime = tick() - DetectorData.startTime,
        components = {}
    }
    
    -- –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    local componentCounts = {}
    for _, obj in pairs(model:GetDescendants()) do
        local className = obj.ClassName
        componentCounts[className] = (componentCounts[className] or 0) + 1
    end
    
    structure.components = componentCounts
    
    -- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    local motor6ds = componentCounts["Motor6D"] or 0
    local baseParts = componentCounts["BasePart"] or 0
    
    if structure.children == 3 and structure.descendants == 3 then
        structure.modelType = "BASE"
    elseif structure.children >= 15 and motor6ds >= 10 then
        structure.modelType = "FULL"
    elseif structure.children >= 5 and motor6ds >= 3 then
        structure.modelType = "PARTIAL"
    else
        structure.modelType = "UNKNOWN"
    end
    
    return structure
end

-- üîç –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ù–¢–ï–ô–ù–ï–†–ê –ù–ê –ü–û–Ø–í–õ–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô
local function monitorContainer(container, containerName, serviceName)
    detectorLog("MONITOR", string.format("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %s.%s", serviceName, containerName))
    
    local connection = container.ChildAdded:Connect(function(obj)
        if obj:IsA("Model") then
            local isPet, petType = isPetModel(obj)
            if isPet then
                local structure = analyzeModelStructure(obj, serviceName .. "." .. containerName)
                
                detectorLog("FOUND", string.format("‚úÖ –ú–û–î–ï–õ–¨ –ü–ò–¢–û–ú–¶–ê –ù–ê–ô–î–ï–ù–ê: %s", obj.Name), {
                    Location = serviceName .. "." .. containerName,
                    Path = obj:GetFullName(),
                    Type = structure.modelType,
                    Children = structure.children,
                    Descendants = structure.descendants,
                    Motor6Ds = structure.components["Motor6D"] or 0,
                    PetType = petType,
                    RelativeTime = string.format("%.3f —Å–µ–∫", structure.relativeTime)
                })
                
                -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                table.insert(DetectorData.petSequence, structure)
                
                -- –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Å—Ç–æ —Å–±–æ—Ä–∫–∏!
                if structure.modelType == "FULL" then
                    detectorLog("CRITICAL", string.format("üî• –ü–û–õ–ù–ê–Ø –ú–û–î–ï–õ–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –í: %s", serviceName .. "." .. containerName), {
                        Model = obj.Name,
                        Children = structure.children,
                        Motor6Ds = structure.components["Motor6D"] or 0,
                        Location = "–í–û–ó–ú–û–ñ–ù–û–ï –ú–ï–°–¢–û –°–ë–û–†–ö–ò!"
                    })
                    
                    DetectorData.assemblyLocations[serviceName .. "." .. containerName] = structure
                end
                
                -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
                local modelConnection = obj.DescendantAdded:Connect(function(descendant)
                    detectorLog("DETAIL", string.format("üìù –î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç –≤ %s: %s (%s)", 
                        obj.Name, descendant.Name, descendant.ClassName))
                end)
                
                table.insert(DetectorData.connections, modelConnection)
            end
        end
    end)
    
    table.insert(DetectorData.connections, connection)
    return connection
end

-- üè¢ –ì–õ–£–ë–û–ö–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê
local function deepScanService(service, serviceName)
    detectorLog("SERVICE", string.format("üè¢ –ì–õ–£–ë–û–ö–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: %s", serviceName))
    
    local scannedCount = 0
    local foundCount = 0
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞
    monitorContainer(service, "ROOT", serviceName)
    
    -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local function scanRecursive(container, path, depth)
        if depth > 5 then return end -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        
        for _, obj in pairs(container:GetChildren()) do
            scannedCount = scannedCount + 1
            
            -- –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞
            if obj:IsA("Model") then
                local isPet, petType = isPetModel(obj)
                if isPet then
                    local structure = analyzeModelStructure(obj, path)
                    foundCount = foundCount + 1
                    
                    detectorLog("MODEL", string.format("üéØ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å: %s", obj.Name), {
                        Location = path,
                        Type = structure.modelType,
                        Children = structure.children,
                        Motor6Ds = structure.components["Motor6D"] or 0
                    })
                end
            end
            
            -- –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –º–æ–Ω–∏—Ç–æ—Ä–∏–º –µ–≥–æ –∏ —Å–∫–∞–Ω–∏—Ä—É–µ–º –≥–ª—É–±–∂–µ
            if obj:IsA("Folder") or obj:IsA("Model") or obj:IsA("Configuration") then
                local newPath = path .. "." .. obj.Name
                monitorContainer(obj, obj.Name, serviceName)
                scanRecursive(obj, newPath, depth + 1)
            end
        end
    end
    
    scanRecursive(service, serviceName, 0)
    
    detectorLog("SERVICE", string.format("üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ %s –∑–∞–≤–µ—Ä—à–µ–Ω–æ", serviceName), {
        ScannedObjects = scannedCount,
        FoundPets = foundCount
    })
end

-- üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
local function startFullMonitoring()
    detectorLog("DETECTOR", "üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–°–ï–• –°–ï–†–í–ò–°–û–í")
    detectorLog("DETECTOR", "üè† –†–µ–∂–∏–º: –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è")
    
    DetectorData.isActive = true
    DetectorData.startTime = tick()
    
    -- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    local services = {
        {name = "Workspace", service = Workspace},
        {name = "ReplicatedStorage", service = ReplicatedStorage},
        {name = "ReplicatedFirst", service = ReplicatedFirst},
        {name = "StarterGui", service = StarterGui},
        {name = "StarterPack", service = StarterPack},
        {name = "StarterPlayer", service = StarterPlayer}
    }
    
    -- –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å ServerStorage
    local success, serverStorage = pcall(function() return game:GetService("ServerStorage") end)
    if success and serverStorage then
        table.insert(services, {name = "ServerStorage", service = serverStorage})
    end
    
    -- –î–æ–±–∞–≤–ª—è–µ–º Character –∏–≥—Ä–æ–∫–∞
    if player.Character then
        table.insert(services, {name = "PlayerCharacter", service = player.Character})
    end
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ Character
    player.CharacterAdded:Connect(function(character)
        detectorLog("MONITOR", "üëÅÔ∏è –ù–æ–≤—ã–π Character –∏–≥—Ä–æ–∫–∞ –ø–æ—è–≤–∏–ª—Å—è")
        monitorContainer(character, "Character", "Player")
    end)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª—É–±–æ–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    for _, serviceData in ipairs(services) do
        local success, result = pcall(function()
            deepScanService(serviceData.service, serviceData.name)
        end)
        
        if not success then
            detectorLog("ERROR", string.format("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è %s: %s", serviceData.name, tostring(result)))
        end
    end
    
    detectorLog("DETECTOR", string.format("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω! –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è %d –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", #DetectorData.connections))
    detectorLog("DETECTOR", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –î–ï–¢–ï–ö–¶–ò–ò –ú–ï–°–¢–ê –°–ë–û–†–ö–ò!")
end

-- üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê –û –ú–ï–°–¢–ê–• –°–ë–û–†–ö–ò
local function generateAssemblyReport()
    detectorLog("CRITICAL", "üìã === –û–¢–ß–ï–¢ –û –ú–ï–°–¢–ê–• –°–ë–û–†–ö–ò ===")
    
    detectorLog("INFO", string.format("üîç –í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: %d", #DetectorData.petSequence))
    detectorLog("INFO", string.format("üîß –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç —Å–±–æ—Ä–∫–∏: %d", #DetectorData.assemblyLocations))
    
    if #DetectorData.petSequence > 0 then
        detectorLog("CRITICAL", "üîÑ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û–Ø–í–õ–ï–ù–ò–Ø –ú–û–î–ï–õ–ï–ô:")
        
        for i, model in ipairs(DetectorData.petSequence) do
            detectorLog("SEQUENCE", string.format("üîÑ %d. %s (%s)", i, model.name, model.modelType), {
                Location = model.location,
                Time = string.format("%.3f —Å–µ–∫", model.relativeTime),
                Children = model.children,
                Motor6Ds = model.components["Motor6D"] or 0
            })
        end
    end
    
    if next(DetectorData.assemblyLocations) then
        detectorLog("CRITICAL", "üî• –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ú–ï–°–¢–ê –°–ë–û–†–ö–ò:")
        
        for location, model in pairs(DetectorData.assemblyLocations) do
            detectorLog("ASSEMBLY", string.format("üîß –ú–ï–°–¢–û –°–ë–û–†–ö–ò: %s", location), {
                Model = model.name,
                Type = model.modelType,
                Children = model.children,
                Motor6Ds = model.components["Motor6D"] or 0,
                Time = string.format("%.3f —Å–µ–∫", model.relativeTime)
            })
        end
    else
        detectorLog("INFO", "‚ÑπÔ∏è –ú–µ—Å—Ç–∞ —Å–±–æ—Ä–∫–∏ –ø–æ–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    end
    
    detectorLog("CRITICAL", "üîç –î–ï–¢–ï–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
end

-- üõë –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
local function stopMonitoring()
    detectorLog("DETECTOR", "üõë –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
    
    for _, connection in ipairs(DetectorData.connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    DetectorData.connections = {}
    DetectorData.isActive = false
    
    detectorLog("DETECTOR", "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createDetectorGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AssemblyLocationDetectorGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 400, 0, 180)
    frame.Position = UDim2.new(1, -420, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.05, 0.02, 0.1)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(0.5, 0.1, 1)
    title.BorderSizePixel = 0
    title.Text = "üîç ASSEMBLY LOCATION DETECTOR"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(0.5, 0.1, 1)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üîç –ó–ê–ü–£–°–ö –î–ï–¢–ï–ö–¶–ò–ò"
    startBtn.TextColor3 = Color3.new(1, 1, 1)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local reportBtn = Instance.new("TextButton")
    reportBtn.Size = UDim2.new(0.48, 0, 0, 30)
    reportBtn.Position = UDim2.new(0, 10, 0, 90)
    reportBtn.BackgroundColor3 = Color3.new(0.3, 0.1, 0.6)
    reportBtn.BorderSizePixel = 0
    reportBtn.Text = "üìã –û–¢–ß–ï–¢"
    reportBtn.TextColor3 = Color3.new(1, 1, 1)
    reportBtn.TextScaled = true
    reportBtn.Font = Enum.Font.SourceSans
    reportBtn.Parent = frame
    
    local stopBtn = Instance.new("TextButton")
    stopBtn.Size = UDim2.new(0.48, 0, 0, 30)
    stopBtn.Position = UDim2.new(0.52, 0, 0, 90)
    stopBtn.BackgroundColor3 = Color3.new(0.6, 0.1, 0.1)
    stopBtn.BorderSizePixel = 0
    stopBtn.Text = "üõë –°–¢–û–ü"
    stopBtn.TextColor3 = Color3.new(1, 1, 1)
    stopBtn.TextScaled = true
    stopBtn.Font = Enum.Font.SourceSans
    stopBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 50)
    status.Position = UDim2.new(0, 10, 0, 130)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–µ—Å—Ç–∞ —Å–±–æ—Ä–∫–∏\n–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üîç –î–µ—Ç–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞!\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        status.TextColor3 = Color3.new(0.5, 0.1, 1)
        startBtn.Text = "‚úÖ –î–ï–¢–ï–ö–¶–ò–Ø –ê–ö–¢–ò–í–ù–ê"
        startBtn.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
        startBtn.Active = false
        
        startFullMonitoring()
    end)
    
    reportBtn.MouseButton1Click:Connect(function()
        generateAssemblyReport()
    end)
    
    stopBtn.MouseButton1Click:Connect(function()
        stopMonitoring()
        status.Text = "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        status.TextColor3 = Color3.new(1, 0.5, 0.5)
        startBtn.Text = "üîç –ó–ê–ü–£–°–ö –î–ï–¢–ï–ö–¶–ò–ò"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.1, 1)
        startBtn.Active = true
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createDetectorConsole()
createDetectorGUI()

detectorLog("DETECTOR", "‚úÖ AssemblyLocationDetector –≥–æ—Ç–æ–≤!")
detectorLog("DETECTOR", "üîç –î–µ—Ç–µ–∫—Ç–æ—Ä –º–µ—Å—Ç–∞ —Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞")
detectorLog("DETECTOR", "üè† –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
detectorLog("DETECTOR", "üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–°–ï–• —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
detectorLog("DETECTOR", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ó–ê–ü–£–°–ö –î–ï–¢–ï–ö–¶–ò–ò' –¥–ª—è –Ω–∞—á–∞–ª–∞!")
