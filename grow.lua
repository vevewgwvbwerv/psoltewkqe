-- Pet Structure Analyzer v4.0 - –°–û–í–†–ï–ú–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ï–í
-- –°–∫–∞–Ω–∏—Ä—É–µ—Ç UUID –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
-- Motor6D, Meshes, Attachments, Animations, Parts - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local gui = nil
local autoStartMonitoring = false -- –∫–æ–Ω—Ñ–∏–≥: –∞–≤—Ç–æ—Å–∫–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω
local consoleOutput = {}
local petDatabase = {} -- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
local scriptRunning = true
local connections = {}

print("üöÄ Pet Structure Analyzer v4.0 - –ó–∞–ø—É—Å–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")

-- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UUID –∏–º–µ–Ω–∏
local function isUUIDName(name)
    if not name then return false end
    return name:find("%{") and name:find("%}") and name:find("%-")
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
local function logEvent(eventType, message, data)
    local timestamp = os.date("%H:%M:%S")
    local logMessage = string.format("[%s] %s: %s", timestamp, eventType, message or "")
    
    print(logMessage)
    table.insert(consoleOutput, logMessage)
    
    if data then
        for key, value in pairs(data) do
            local detailMsg = string.format("  ‚Ä¢ %s: %s", key, tostring(value))
            print(detailMsg)
            table.insert(consoleOutput, detailMsg)
        end
    end
    
    -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫)
    if #consoleOutput > 200 then
        table.remove(consoleOutput, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º GUI –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if gui and gui.Parent then
        local success = pcall(function()
            local consoleFrame = gui:FindFirstChild("ConsoleFrame", true)
            local consoleText = gui:FindFirstChild("ConsoleText", true)
            if consoleText and consoleFrame then
                -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                local displayText = table.concat(consoleOutput, "\n")
                consoleText.Text = displayText
                
                -- –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                local textHeight = consoleText.TextBounds.Y
                consoleFrame.CanvasSize = UDim2.new(0, 0, 0, math.max(textHeight + 100, 1000))
                
                -- –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
                consoleFrame.CanvasPosition = Vector2.new(0, math.max(0, textHeight - consoleFrame.AbsoluteSize.Y + 100))
            end
        end)
    end
end

-- === –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ô –î–õ–Ø GUI ===

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è UUID –ø–∏—Ç–æ–º—Ü–µ–≤ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º (–ü–ï–†–ï–ù–ï–°–ï–ù–ê –°–Æ–î–ê)
local function findAndScanNearbyUUIDPets()
    if not scriptRunning then return end
    
    logEvent("üîç SEARCH", "Searching for UUID pets near player...")
    
    local playerChar = player.Character
    if not playerChar or not playerChar:FindFirstChild("HumanoidRootPart") then
        logEvent("‚ùå ERROR", "Player character or HumanoidRootPart not found")
        return
    end
    
    local playerPosition = playerChar.HumanoidRootPart.Position
    local foundPets = {}
    local searchRadius = 100 -- 100 —Å—Ç–∞–¥–æ–≤ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞
    
    -- –ò—â–µ–º UUID –º–æ–¥–µ–ª–∏ –≤ Workspace
    for _, obj in pairs(Workspace:GetDescendants()) do
        if not scriptRunning then break end
        
        if obj:IsA("Model") and isUUIDName(obj.Name) then
            local success, modelCFrame = pcall(function() 
                return obj:GetModelCFrame() 
            end)
            
            if success then
                local distance = (modelCFrame.Position - playerPosition).Magnitude
                
                if distance <= searchRadius then
                    table.insert(foundPets, {
                        model = obj,
                        distance = distance,
                        name = obj.Name
                    })
                end
            end
        end
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    table.sort(foundPets, function(a, b) return a.distance < b.distance end)
    
    logEvent("üéØ SEARCH_RESULT", "Found " .. #foundPets .. " UUID pets within " .. searchRadius .. " studs")
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –±–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–∏–ª–∞—Å—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏)
    for i, petInfo in ipairs(foundPets) do
        if not scriptRunning then break end
        
        logEvent("üî¨ SCANNING", "Pet " .. i .. "/" .. #foundPets, {
            Name = petInfo.name,
            Distance = string.format("%.1f studs", petInfo.distance)
        })
        
        if scanUUIDPet then
            local success, err = pcall(scanUUIDPet, petInfo.model)
            if success then
                logEvent("‚úÖ SCAN_SUCCESS", "Pet scanned successfully", { PetName = petInfo.name })
            else
                logEvent("‚ùå SCAN_ERROR", "Failed to scan pet: " .. tostring(err), { PetName = petInfo.name })
            end
        else
            logEvent("‚ö†Ô∏è SCAN_SKIP", "scanUUIDPet function not available yet", { PetName = petInfo.name })
        end
        
        wait(0.05)
    end
    
    -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    local databaseSize = 0
    for _ in pairs(petDatabase) do
        databaseSize = databaseSize + 1
    end
    
    logEvent("‚úÖ SCAN_COMPLETE", "All nearby UUID pets scanned successfully", {
        TotalScanned = #foundPets,
        DatabaseSize = databaseSize
    })
end

-- –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ –±–∞–∑—ã (–ü–ï–†–ï–ù–ï–°–ï–ù–ê –°–Æ–î–ê)
local function recreateNearestPet()
    if not scriptRunning then return end
    
    -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    local databaseSize = 0
    for _ in pairs(petDatabase) do
        databaseSize = databaseSize + 1
    end
    
    if databaseSize == 0 then
        logEvent("‚ö†Ô∏è RECREATE_WARNING", "Pet database is empty! Scan some pets first.", {
            DatabaseSize = databaseSize
        })
        return
    end
    
    logEvent("üìä DATABASE_STATUS", "Database contains pets", {
        DatabaseSize = databaseSize
    })
    
    -- –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ –±–∞–∑–µ
    local petName = next(petDatabase)
    
    -- –ü–æ–∑–∏—Ü–∏—è —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º
    local playerChar = player.Character
    if not playerChar or not playerChar:FindFirstChild("HumanoidRootPart") then
        logEvent("‚ùå RECREATE_ERROR", "Player character not found")
        return
    end
    
    local playerPos = playerChar.HumanoidRootPart.Position
    local spawnPos = playerPos + Vector3.new(5, 0, 5) -- 5 —Å—Ç–∞–¥–æ–≤ –æ—Ç –∏–≥—Ä–æ–∫–∞
    
    logEvent("üöÄ RECREATE_ATTEMPT", "Attempting to recreate pet", {
        PetName = petName,
        SpawnPosition = tostring(spawnPos)
    })
    
    -- –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è (–±—É–¥–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)
    if recreatePetFromDatabase then
        local recreatedPet = recreatePetFromDatabase(petName, spawnPos)
        
        if recreatedPet then
            logEvent("üéâ RECREATE_COMPLETE", "Pet successfully recreated from database!")
            return recreatedPet
        else
            logEvent("‚ùå RECREATE_FAILED", "Failed to recreate pet from database")
            return nil
        end
    else
        logEvent("‚ùå RECREATE_ERROR", "Recreation function not available yet")
        return nil
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ GUI
local function createModernGUI()
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ GUI...")
    
    -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π GUI
    local oldGui = playerGui:FindFirstChild("PetStructureAnalyzerGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π GUI
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetStructureAnalyzerGUI"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–ú–û–ë–ò–õ–¨–ù–û-–ê–î–ê–ü–¢–ò–í–ù–û–ï)
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0.9, 0, 0.8, 0) -- 90% —à–∏—Ä–∏–Ω—ã, 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
    mainFrame.Position = UDim2.new(0.05, 0, 0.1, 0) -- –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35) -- –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–º–∫–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = mainFrame
    
    local uiStroke = Instance.new("UIStroke")
    uiStroke.Color = Color3.fromRGB(0, 150, 255)
    uiStroke.Thickness = 2
    uiStroke.Parent = mainFrame
    
    -- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º (–ö–û–ú–ü–ê–ö–¢–ù–´–ô)
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 35) -- –£–º–µ–Ω—å—à–µ–Ω —Å 50 –¥–æ 35
    titleLabel.Position = UDim2.new(0, 0, 0, 0)
    titleLabel.BackgroundColor3 = Color3.fromRGB(0, 120, 215)
    titleLabel.BorderSizePixel = 0
    titleLabel.Text = "üî¨ Pet Analyzer v4.0" -- –ö–æ—Ä–æ—á–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleLabel
    
    -- –ö–æ–Ω—Å–æ–ª—å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º (–ú–û–ë–ò–õ–¨–ù–û-–ê–î–ê–ü–¢–ò–í–ù–ê–Ø)
    local consoleFrame = Instance.new("ScrollingFrame")
    consoleFrame.Name = "ConsoleFrame"
    consoleFrame.Size = UDim2.new(1, -10, 1, -80) -- –ö–æ–º–ø–∞–∫—Ç–Ω–µ–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
    consoleFrame.Position = UDim2.new(0, 5, 0, 40) -- –ë–ª–∏–∂–µ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
    consoleFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20) -- –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω
    consoleFrame.BorderSizePixel = 0
    consoleFrame.ScrollBarThickness = 8 -- –¢–æ–Ω—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
    consoleFrame.ScrollBarImageColor3 = Color3.fromRGB(0, 150, 255)
    consoleFrame.CanvasSize = UDim2.new(0, 0, 0, 2000)
    consoleFrame.Parent = mainFrame
    
    local consoleCorner = Instance.new("UICorner")
    consoleCorner.CornerRadius = UDim.new(0, 8)
    consoleCorner.Parent = consoleFrame
    
    local consoleStroke = Instance.new("UIStroke")
    consoleStroke.Color = Color3.fromRGB(50, 50, 60)
    consoleStroke.Thickness = 1
    consoleStroke.Parent = consoleFrame
    
    local consoleText = Instance.new("TextLabel")
    consoleText.Name = "ConsoleText"
    consoleText.Size = UDim2.new(1, -15, 0, 2000)
    consoleText.Position = UDim2.new(0, 8, 0, 5)
    consoleText.BackgroundTransparency = 1
    consoleText.Text = "üî¨ Pet Analyzer Console Ready...\n‚ö° Waiting for UUID pets to analyze..."
    consoleText.TextColor3 = Color3.fromRGB(0, 255, 150) -- –Ø—Ä–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
    consoleText.TextScaled = false
    consoleText.TextSize = 12 -- –ú–µ–Ω—å—à–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
    consoleText.Font = Enum.Font.RobotoMono -- –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–æ–¥–∞
    consoleText.TextXAlignment = Enum.TextXAlignment.Left
    consoleText.TextYAlignment = Enum.TextYAlignment.Top
    consoleText.TextWrapped = true
    consoleText.Parent = consoleFrame
    
    -- –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ (–ú–û–ë–ò–õ–¨–ù–û-–ê–î–ê–ü–¢–ò–í–ù–ê–Ø)
    local buttonPanel = Instance.new("Frame")
    buttonPanel.Name = "ButtonPanel"
    buttonPanel.Size = UDim2.new(1, -10, 0, 35) -- –ö–æ–º–ø–∞–∫—Ç–Ω–µ–µ: –≤—ã—Å–æ—Ç–∞ 35 –≤–º–µ—Å—Ç–æ 50
    buttonPanel.Position = UDim2.new(0, 5, 1, -40) -- –ë–ª–∏–∂–µ –∫ –∫—Ä–∞—é
    buttonPanel.BackgroundColor3 = Color3.fromRGB(35, 35, 45)
    buttonPanel.BorderSizePixel = 0
    buttonPanel.Parent = mainFrame
    
    local panelCorner = Instance.new("UICorner")
    panelCorner.CornerRadius = UDim.new(0, 8)
    panelCorner.Parent = buttonPanel
    
    -- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    local function createModernButton(name, text, color, position, size)
        local button = Instance.new("TextButton")
        button.Name = name
        button.Size = size
        button.Position = position
        button.BackgroundColor3 = color
        button.BorderSizePixel = 0
        button.Text = text
        button.TextColor3 = Color3.new(1, 1, 1)
        button.TextScaled = true
        button.Font = Enum.Font.GothamBold
        button.Parent = buttonPanel
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = button
        
        local buttonStroke = Instance.new("UIStroke")
        buttonStroke.Color = Color3.fromRGB(255, 255, 255)
        buttonStroke.Thickness = 1
        buttonStroke.Transparency = 0.8
        buttonStroke.Parent = button
        
        -- –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        button.MouseEnter:Connect(function()
            button.BackgroundColor3 = Color3.new(
                math.min(color.R + 0.1, 1),
                math.min(color.G + 0.1, 1),
                math.min(color.B + 0.1, 1)
            )
            buttonStroke.Transparency = 0.5
        end)
        
        button.MouseLeave:Connect(function()
            button.BackgroundColor3 = color
            buttonStroke.Transparency = 0.8
        end)
        
        return button
    end
    
    -- –ö–Ω–æ–ø–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º (6 –∫–Ω–æ–ø–æ–∫)
    local scanButton = createModernButton("ScanButton", "üîç SCAN PETS", 
        Color3.fromRGB(0, 150, 255), UDim2.new(0, 2, 0, 5), UDim2.new(0.15, 0, 1, -10))
    
    local createButton = createModernButton("CreateButton", "üöÄ CREATE PET", 
        Color3.fromRGB(255, 0, 150), UDim2.new(0.16, 0, 0, 5), UDim2.new(0.15, 0, 1, -10))
    
    local copyButton = createModernButton("CopyButton", "üìã COPY CONSOLE", 
        Color3.fromRGB(255, 150, 0), UDim2.new(0.32, 0, 0, 5), UDim2.new(0.15, 0, 1, -10))
    
    local clearButton = createModernButton("ClearButton", "üóëÔ∏è CLEAR LOG", 
        Color3.fromRGB(255, 100, 100), UDim2.new(0.48, 0, 0, 5), UDim2.new(0.15, 0, 1, -10))
    
    local exportButton = createModernButton("ExportButton", "üíæ EXPORT DATA", 
        Color3.fromRGB(100, 255, 100), UDim2.new(0.64, 0, 0, 5), UDim2.new(0.15, 0, 1, -10))
    
    local closeButton = createModernButton("CloseButton", "‚ùå CLOSE", 
        Color3.fromRGB(200, 50, 50), UDim2.new(0.8, 0, 0, 5), UDim2.new(0.18, 0, 1, -10))
    
    -- –°–æ–±—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫ (–ü–û–î–ö–õ–Æ–ß–ï–ù–´ –ö –†–ï–ê–õ–¨–ù–´–ú –§–£–ù–ö–¶–ò–Ø–ú)
    scanButton.MouseButton1Click:Connect(function()
        logEvent("üîç SCAN", "Starting pet structure scan...")
        scanButton.Text = "‚è≥ SCANNING..."
        
        findAndScanNearbyUUIDPets()
        
        scanButton.Text = "üîç SCAN PETS"
    end)
    
    createButton.MouseButton1Click:Connect(function()
        logEvent("üöÄ CREATE", "Attempting to create pet from database...")
        createButton.Text = "‚è≥ CREATING..."
        
        spawn(function()
            local createdPet = recreateNearestPet()
            if createdPet then
                createButton.Text = "‚úÖ CREATED!"
                spawn(function()
                    wait(2)
                    createButton.Text = "üöÄ CREATE PET"
                end)
            else
                createButton.Text = "‚ùå FAILED!"
                spawn(function()
                    wait(2)
                    createButton.Text = "üöÄ CREATE PET"
                end)
            end
        end)
    end)
    
    copyButton.MouseButton1Click:Connect(function()
        logEvent("üìã COPY", "Preparing console text for manual copy...")
        copyButton.Text = "‚è≥ PREPARING..."
        
        local screenGui = gui or playerGui:FindFirstChild("PetStructureAnalyzerGUI")
        if not screenGui then
            copyButton.Text = "üìã COPY CONSOLE"
            return
        end
        
        -- –°–æ–∑–¥–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å TextBox
        local copyFrame = screenGui:FindFirstChild("CopyDialog")
        if not copyFrame then
            copyFrame = Instance.new("Frame")
            copyFrame.Name = "CopyDialog"
            copyFrame.Size = UDim2.new(0.8, 0, 0.6, 0)
            copyFrame.Position = UDim2.new(0.1, 0, 0.2, 0)
            copyFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
            copyFrame.BorderSizePixel = 0
            copyFrame.Parent = screenGui
            
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 10)
            corner.Parent = copyFrame
            
            local title = Instance.new("TextLabel")
            title.Name = "Title"
            title.Size = UDim2.new(1, -10, 0, 30)
            title.Position = UDim2.new(0, 5, 0, 5)
            title.BackgroundTransparency = 1
            title.Text = "üìã Console Export (Ctrl+A then Ctrl+C)"
            title.TextColor3 = Color3.fromRGB(255, 255, 255)
            title.Font = Enum.Font.GothamBold
            title.TextSize = 16
            title.TextXAlignment = Enum.TextXAlignment.Left
            title.Parent = copyFrame
            
            local textBox = Instance.new("TextBox")
            textBox.Name = "CopyText"
            textBox.Size = UDim2.new(1, -10, 1, -50)
            textBox.Position = UDim2.new(0, 5, 0, 40)
            textBox.BackgroundColor3 = Color3.fromRGB(10, 10, 15)
            textBox.TextColor3 = Color3.fromRGB(200, 255, 200)
            textBox.ClearTextOnFocus = false
            textBox.MultiLine = true
            textBox.TextXAlignment = Enum.TextXAlignment.Left
            textBox.TextYAlignment = Enum.TextYAlignment.Top
            textBox.TextWrapped = false
            textBox.Font = Enum.Font.RobotoMono
            textBox.TextSize = 12
            textBox.Parent = copyFrame
            
            local closeBtn = Instance.new("TextButton")
            closeBtn.Name = "Close"
            closeBtn.Size = UDim2.new(0, 100, 0, 30)
            closeBtn.Position = UDim2.new(1, -110, 1, -40)
            closeBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
            closeBtn.TextColor3 = Color3.new(1, 1, 1)
            closeBtn.Text = "Close"
            closeBtn.Font = Enum.Font.GothamBold
            closeBtn.TextSize = 14
            closeBtn.Parent = copyFrame
            
            closeBtn.MouseButton1Click:Connect(function()
                copyFrame.Visible = false
            end)
        end
        
        -- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ–∫—É—Å
        local textBox = copyFrame:FindFirstChild("CopyText")
        local data = table.concat(consoleOutput, "\n")
        textBox.Text = data
        copyFrame.Visible = true
        
        textBox:CaptureFocus()
        textBox.SelectionStart = 1
        textBox.CursorPosition = #data + 1
        
        copyButton.Text = "üìã COPY CONSOLE"
        logEvent("‚úÖ COPY_READY", "Text ready in CopyDialog; use Ctrl+A then Ctrl+C")
    end)
    
    clearButton.MouseButton1Click:Connect(function()
        logEvent("üóëÔ∏è CLEAR", "Clearing console log...")
        consoleOutput = {}
        consoleText.Text = "üî¨ Console cleared!\n‚ö° Ready for new analysis..."
        clearButton.Text = "‚úÖ CLEARED"
        
        spawn(function()
            wait(1)
            clearButton.Text = "üóëÔ∏è CLEAR LOG"
        end)
    end)
    
    exportButton.MouseButton1Click:Connect(function()
        logEvent("üíæ EXPORT", "Exporting pet database...")
        exportButton.Text = "‚è≥ EXPORTING..."
        
        spawn(function()
            exportPetDatabase()
            exportButton.Text = "üíæ EXPORT DATA"
        end)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        logEvent("‚ùå SYSTEM", "COMPLETE SHUTDOWN - Pet Structure Analyzer terminating...")
        
        -- –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        scriptRunning = false
        
        -- –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for i, connection in ipairs(connections) do
            if connection then
                pcall(function() connection:Disconnect() end)
            end
        end
        connections = {}
        
        -- –ó–∞–∫—Ä—ã–≤–∞–µ–º GUI
        pcall(function() screenGui:Destroy() end)
        gui = nil
        
        print("üî¥ Pet Structure Analyzer –ü–û–õ–ù–û–°–¢–¨–Æ –í–´–ö–õ–Æ–ß–ï–ù!")
        print("üîå –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        print("üíÄ –°–∫—Ä–∏–ø—Ç –£–ë–ò–¢ –Ω–∞–≤—Å–µ–≥–¥–∞")
        
        -- –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –°–ö–†–ò–ü–¢–ê
        spawn(function()
            wait(0.1)
            error("üî¥ PET STRUCTURE ANALYZER TERMINATED BY USER - COMPLETE SHUTDOWN üíÄ")
        end)
    end)
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –≤ PlayerGui
    screenGui.Parent = playerGui
    gui = screenGui
    
    print("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    logEvent("üé® SYSTEM", "Modern GUI created with enhanced console and buttons")
    
    return screenGui
end

-- === –°–ò–°–¢–ï–ú–ê –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ü–ò–¢–û–ú–¶–ï–í ===

-- –§—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
local function scanMotor6D(model)
    local motors = {}
    local motorCount = 0
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            motorCount = motorCount + 1
            local motorData = {
                name = obj.Name,
                part0 = obj.Part0 and obj.Part0.Name or "nil",
                part1 = obj.Part1 and obj.Part1.Name or "nil",
                c0 = obj.C0,
                c1 = obj.C1,
                parent = obj.Parent and obj.Parent.Name or "nil"
            }
            table.insert(motors, motorData)
        end
    end
    
    return motors, motorCount
end

-- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Mesh –¥–∞–Ω–Ω—ã—Ö
local function scanMeshData(model)
    local meshes = {}
    local meshCount = 0
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("MeshPart") then
            meshCount = meshCount + 1
            local meshData = {
                type = "MeshPart",
                name = obj.Name,
                meshId = obj.MeshId,
                textureId = obj.TextureID,
                size = obj.Size,
                material = obj.Material.Name,
                color = obj.Color,
                parent = obj.Parent and obj.Parent.Name or "nil"
            }
            table.insert(meshes, meshData)
        elseif obj:IsA("SpecialMesh") then
            meshCount = meshCount + 1
            local meshData = {
                type = "SpecialMesh",
                name = obj.Name,
                meshId = obj.MeshId,
                textureId = obj.TextureId,
                meshType = obj.MeshType.Name,
                scale = obj.Scale,
                parent = obj.Parent and obj.Parent.Name or "nil"
            }
            table.insert(meshes, meshData)
        end
    end
    
    return meshes, meshCount
end

-- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Attachments
local function scanAttachments(model)
    local attachments = {}
    local attachmentCount = 0
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Attachment") then
            attachmentCount = attachmentCount + 1
            local attachmentData = {
                name = obj.Name,
                cframe = obj.CFrame,
                worldCFrame = obj.WorldCFrame,
                parent = obj.Parent and obj.Parent.Name or "nil",
                visible = obj.Visible
            }
            table.insert(attachments, attachmentData)
        end
    end
    
    return attachments, attachmentCount
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ Animation ID –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
local function scanAnimations(model)
    local animations = {}
    local animationCount = 0
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Animation") then
            animationCount = animationCount + 1
            local animData = {
                name = obj.Name,
                animationId = obj.AnimationId,
                parent = obj.Parent and obj.Parent.Name or "nil"
            }
            table.insert(animations, animData)
        elseif obj:IsA("LocalScript") or obj:IsA("Script") then
            -- –ò—â–µ–º Animation ID –≤ –∫–æ–¥–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
            local success, source = pcall(function() return obj.Source end)
            if success and source then
                for animId in source:gmatch("rbxassetid://(%d+)") do
                    animationCount = animationCount + 1
                    local animData = {
                        name = "Found in " .. obj.Name,
                        animationId = "rbxassetid://" .. animId,
                        parent = obj.Name,
                        source = "script"
                    }
                    table.insert(animations, animData)
                end
            end
        end
    end
    
    return animations, animationCount
end

-- –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π –º–æ–¥–µ–ª–∏
local function scanBaseParts(model)
    local parts = {}
    local partCount = 0
    
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            partCount = partCount + 1
            local partData = {
                name = obj.Name,
                className = obj.ClassName,
                size = obj.Size,
                material = obj.Material.Name,
                color = obj.Color,
                transparency = obj.Transparency,
                canCollide = obj.CanCollide,
                anchored = obj.Anchored,
                cframe = obj.CFrame,
                parent = obj.Parent and obj.Parent.Name or "nil"
            }
            table.insert(parts, partData)
        end
    end
    
    return parts, partCount
end

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è UUID –ø–∏—Ç–æ–º—Ü–∞
local function scanUUIDPet(petModel)
    logEvent("üî¨ DEEP_SCAN", "Starting deep structure analysis", {
        PetName = petModel.Name,
        PetClass = petModel.ClassName
    })
    
    local petData = {
        name = petModel.Name,
        className = petModel.ClassName,
        primaryPart = petModel.PrimaryPart and petModel.PrimaryPart.Name or "nil",
        scanTime = os.date("%Y-%m-%d %H:%M:%S"),
        position = (function()
            local ok, cf = pcall(function()
                return petModel:GetModelCFrame()
            end)
            if ok and cf then
                return cf.Position
            end
            local pp = petModel.PrimaryPart
            return pp and pp.Position or Vector3.new()
        end)()
    }
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º Motor6D
    logEvent("üîß MOTOR6D_SCAN", "Scanning Motor6D joints...")
    petData.motors, petData.motorCount = scanMotor6D(petModel)
    logEvent("üîß MOTOR6D_RESULT", "Found " .. petData.motorCount .. " Motor6D joints")
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º Meshes
    logEvent("üé® MESH_SCAN", "Scanning mesh data...")
    petData.meshes, petData.meshCount = scanMeshData(petModel)
    logEvent("üé® MESH_RESULT", "Found " .. petData.meshCount .. " mesh components")
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º Attachments
    logEvent("üìé ATTACHMENT_SCAN", "Scanning attachments...")
    petData.attachments, petData.attachmentCount = scanAttachments(petModel)
    logEvent("üìé ATTACHMENT_RESULT", "Found " .. petData.attachmentCount .. " attachments")
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º Animations
    logEvent("üé≠ ANIMATION_SCAN", "Scanning animations...")
    petData.animations, petData.animationCount = scanAnimations(petModel)
    logEvent("üé≠ ANIMATION_RESULT", "Found " .. petData.animationCount .. " animation references")
    
    -- –°–∫–∞–Ω–∏—Ä—É–µ–º BaseParts
    logEvent("üß± PARTS_SCAN", "Scanning base parts...")
    petData.parts, petData.partCount = scanBaseParts(petModel)
    logEvent("üß± PARTS_RESULT", "Found " .. petData.partCount .. " base parts")
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    petDatabase[petModel.Name] = petData
    
    logEvent("üíæ SAVE_COMPLETE", "Pet structure saved to database", {
        TotalMotors = petData.motorCount,
        TotalMeshes = petData.meshCount,
        TotalAttachments = petData.attachmentCount,
        TotalAnimations = petData.animationCount,
        TotalParts = petData.partCount
    })
    
    return petData
end



-- –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
local function exportPetDatabase()
    if not scriptRunning then return end
    
    logEvent("üíæ EXPORT_START", "Starting pet database export...")
    
    if next(petDatabase) == nil then
        logEvent("‚ö†Ô∏è EXPORT_WARNING", "Pet database is empty! Scan some pets first.")
        return
    end
    
    local exportData = {
        exportTime = os.date("%Y-%m-%d %H:%M:%S"),
        totalPets = 0,
        pets = {}
    }
    
    -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    for petName, petData in pairs(petDatabase) do
        exportData.totalPets = exportData.totalPets + 1
        exportData.pets[petName] = petData
        
        logEvent("üì¶ EXPORTING", "Pet: " .. petName, {
            Motors = petData.motorCount or 0,
            Meshes = petData.meshCount or 0,
            Parts = petData.partCount or 0,
            Attachments = petData.attachmentCount or 0,
            Animations = petData.animationCount or 0
        })
    end
    
    -- –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    logEvent("üíæ EXPORT_DATA", "=== PET DATABASE EXPORT START ===")
    logEvent("üìä EXPORT_SUMMARY", "Total pets in database: " .. exportData.totalPets)
    logEvent("üìÖ EXPORT_TIME", "Export time: " .. exportData.exportTime)
    
    -- –î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    for petName, petData in pairs(exportData.pets) do
        logEvent("üêæ PET_EXPORT", "=== " .. petName .. " ===")
        logEvent("üìã PET_INFO", "Class: " .. (petData.className or "Unknown"))
        logEvent("üìç PET_POSITION", "Position: " .. tostring(petData.position or "Unknown"))
        logEvent("üïí PET_SCAN_TIME", "Scanned: " .. (petData.scanTime or "Unknown"))
        
        -- Motor6D –¥–∞–Ω–Ω—ã–µ
        if petData.motors and #petData.motors > 0 then
            logEvent("üîß MOTORS", "Motor6D joints (" .. #petData.motors .. "):")
            for i, motor in ipairs(petData.motors) do
                logEvent("üîß MOTOR_" .. i, motor.name .. " [" .. motor.part0 .. " -> " .. motor.part1 .. "]")
            end
        end
        
        -- Mesh –¥–∞–Ω–Ω—ã–µ
        if petData.meshes and #petData.meshes > 0 then
            logEvent("üé® MESHES", "Mesh components (" .. #petData.meshes .. "):")
            for i, mesh in ipairs(petData.meshes) do
                logEvent("üé® MESH_" .. i, mesh.name .. " [" .. mesh.type .. "] ID: " .. (mesh.meshId or "none"))
            end
        end
        
        -- Attachment –¥–∞–Ω–Ω—ã–µ
        if petData.attachments and #petData.attachments > 0 then
            logEvent("üìé ATTACHMENTS", "Attachments (" .. #petData.attachments .. "):")
            for i, att in ipairs(petData.attachments) do
                logEvent("üìé ATT_" .. i, att.name .. " [" .. att.parent .. "]")
            end
        end
        
        -- Animation –¥–∞–Ω–Ω—ã–µ
        if petData.animations and #petData.animations > 0 then
            logEvent("üé≠ ANIMATIONS", "Animations (" .. #petData.animations .. "):")
            for i, anim in ipairs(petData.animations) do
                logEvent("üé≠ ANIM_" .. i, anim.name .. " ID: " .. (anim.animationId or "none"))
            end
        end
        
        logEvent("üêæ PET_END", "=== END " .. petName .. " ===")
    end
    
    logEvent("üíæ EXPORT_DATA", "=== PET DATABASE EXPORT END ===")
    logEvent("‚úÖ EXPORT_COMPLETE", "Database export completed successfully!", {
        TotalPetsExported = exportData.totalPets,
        ExportTime = exportData.exportTime
    })
    
    -- –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ print –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    print("=== PET STRUCTURE DATABASE EXPORT ===")
    print("Export Time: " .. exportData.exportTime)
    print("Total Pets: " .. exportData.totalPets)
    print("")
    
    for petName, petData in pairs(exportData.pets) do
        print("PET: " .. petName)
        print("  Class: " .. (petData.className or "Unknown"))
        print("  Motors: " .. (petData.motorCount or 0))
        print("  Meshes: " .. (petData.meshCount or 0))
        print("  Parts: " .. (petData.partCount or 0))
        print("  Attachments: " .. (petData.attachmentCount or 0))
        print("  Animations: " .. (petData.animationCount or 0))
        print("")
    end
    
    print("=== END EXPORT ===")
end

-- === –°–ò–°–¢–ï–ú–ê –í–û–°–°–û–ó–î–ê–ù–ò–Ø –ü–ò–¢–û–ú–¶–ï–í –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• ===

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è BasePart –∏–∑ –¥–∞–Ω–Ω—ã—Ö
local function createPartFromData(partData)
    local part = Instance.new(partData.className or "Part")
    part.Name = partData.name
    part.Size = partData.size
    part.CFrame = partData.cframe
    part.Color = partData.color
    part.Transparency = partData.transparency or 0
    part.CanCollide = partData.canCollide
    part.Anchored = partData.anchored
    
    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
    local success = pcall(function()
        part.Material = Enum.Material[partData.material]
    end)
    if not success then
        part.Material = Enum.Material.Plastic
    end
    
    return part
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Mesh –∏–∑ –¥–∞–Ω–Ω—ã—Ö
local function createMeshFromData(meshData, parent)
    if meshData.type == "MeshPart" then
        -- –î–ª—è MeshPart —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MeshId –∏ TextureId
        if parent:IsA("MeshPart") then
            parent.MeshId = meshData.meshId or ""
            parent.TextureID = meshData.textureId or ""
        end
    elseif meshData.type == "SpecialMesh" then
        local mesh = Instance.new("SpecialMesh")
        mesh.Name = meshData.name
        mesh.MeshId = meshData.meshId or ""
        mesh.TextureId = meshData.textureId or ""
        mesh.Scale = meshData.scale or Vector3.new(1, 1, 1)
        
        -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –º–µ—à–∞
        local success = pcall(function()
            mesh.MeshType = Enum.MeshType[meshData.meshType]
        end)
        if not success then
            mesh.MeshType = Enum.MeshType.FileMesh
        end
        
        mesh.Parent = parent
        return mesh
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Motor6D –∏–∑ –¥–∞–Ω–Ω—ã—Ö
local function createMotorFromData(motorData, model)
    local motor = Instance.new("Motor6D")
    motor.Name = motorData.name
    motor.C0 = motorData.c0
    motor.C1 = motorData.c1
    
    -- –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç–∏ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    local part0 = model:FindFirstChild(motorData.part0)
    local part1 = model:FindFirstChild(motorData.part1)
    
    if part0 and part1 then
        motor.Part0 = part0
        motor.Part1 = part1
        motor.Parent = part0
        return motor
    else
        motor:Destroy()
        return nil
    end
end

-- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Attachment –∏–∑ –¥–∞–Ω–Ω—ã—Ö
local function createAttachmentFromData(attachmentData, parent)
    local attachment = Instance.new("Attachment")
    attachment.Name = attachmentData.name
    attachment.CFrame = attachmentData.cframe
    attachment.Visible = attachmentData.visible or false
    attachment.Parent = parent
    return attachment
end

-- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–û–°–°–û–ó–î–ê–ù–ò–Ø –ü–ò–¢–û–ú–¶–ê
local function recreatePetFromDatabase(petName, position)
    if not petDatabase[petName] then
        logEvent("‚ùå RECREATE_ERROR", "Pet not found in database: " .. petName)
        return nil
    end
    
    local petData = petDatabase[petName]
    logEvent("üîß RECREATE_START", "Recreating pet from database", {
        PetName = petName,
        TotalParts = petData.partCount or 0,
        TotalMotors = petData.motorCount or 0,
        TotalMeshes = petData.meshCount or 0
    })
    
    -- –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å
    local model = Instance.new("Model")
    model.Name = petName .. "_RECREATED"
    
    local partsCreated = 0
    local motorsCreated = 0
    local meshesCreated = 0
    local attachmentsCreated = 0
    
    -- –°–æ–∑–¥–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    if petData.parts then
        for _, partData in ipairs(petData.parts) do
            local success, part = pcall(function()
                return createPartFromData(partData)
            end)
            
            if success and part then
                part.Parent = model
                partsCreated = partsCreated + 1
                
                -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PrimaryPart –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è
                if not model.PrimaryPart or partData.name == petData.primaryPart then
                    model.PrimaryPart = part
                end
            end
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º Meshes
    if petData.meshes then
        for _, meshData in ipairs(petData.meshes) do
            local parentPart = model:FindFirstChild(meshData.parent)
            if parentPart then
                local success = pcall(function()
                    createMeshFromData(meshData, parentPart)
                end)
                if success then
                    meshesCreated = meshesCreated + 1
                end
            end
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º Attachments
    if petData.attachments then
        for _, attachmentData in ipairs(petData.attachments) do
            local parentPart = model:FindFirstChild(attachmentData.parent)
            if parentPart then
                local success = pcall(function()
                    createAttachmentFromData(attachmentData, parentPart)
                end)
                if success then
                    attachmentsCreated = attachmentsCreated + 1
                end
            end
        end
    end
    
    -- –°–æ–∑–¥–∞–µ–º Motor6D —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–°–ê–ú–û–ï –í–ê–ñ–ù–û–ï –î–õ–Ø –ê–ù–ò–ú–ê–¶–ò–ô!)
    if petData.motors then
        for _, motorData in ipairs(petData.motors) do
            local success, motor = pcall(function()
                return createMotorFromData(motorData, model)
            end)
            
            if success and motor then
                motorsCreated = motorsCreated + 1
            end
        end
    end
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if position and model.PrimaryPart then
        pcall(function()
            if model.PivotTo then
                model:PivotTo(CFrame.new(position))
            else
                model:SetPrimaryPartCFrame(CFrame.new(position))
            end
        end)
    end
    
    -- –†–∞–∑–º–µ—â–∞–µ–º –≤ Workspace
    model.Parent = Workspace
    
    logEvent("‚úÖ RECREATE_SUCCESS", "Pet recreated successfully!", {
        PartsCreated = partsCreated,
        MotorsCreated = motorsCreated,
        MeshesCreated = meshesCreated,
        AttachmentsCreated = attachmentsCreated,
        ModelName = model.Name
    })
    
    return model
end

-- (—É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ recreateNearestPet)

-- === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ê–í–¢–û–ó–ê–ü–£–°–ö ===

-- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ workspace
local function startAutoMonitoring()
    if not scriptRunning then return end
    
    logEvent("üîÑ AUTO_MONITOR", "Starting automatic UUID pet monitoring...")
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ workspace
    local workspaceConnection = Workspace.ChildAdded:Connect(function(child)
        if not scriptRunning then return end
        
        if child:IsA("Model") and isUUIDName(child.Name) then
            logEvent("üÜï NEW_UUID_PET", "New UUID pet detected: " .. child.Name)
            
            -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            spawn(function()
                wait(0.5)
                if child.Parent and scriptRunning then
                    local playerChar = player.Character
                    if playerChar and playerChar:FindFirstChild("HumanoidRootPart") then
                        local success, modelCFrame = pcall(function() return child:GetModelCFrame() end)
                        if success then
                            local distance = (modelCFrame.Position - playerChar.HumanoidRootPart.Position).Magnitude
                            if distance <= 100 then
                                logEvent("üî¨ AUTO_SCAN", "Auto-scanning new UUID pet within range", {
                                    Name = child.Name,
                                    Distance = string.format("%.1f studs", distance)
                                })
                                local ok, err = pcall(function()
                                    scanUUIDPet(child)
                                end)
                                if not ok then
                                    logEvent("‚ùå AUTO_SCAN_ERROR", tostring(err) or "unknown error")
                                end
                            end
                        else
                            logEvent("‚ùå MODEL_CFRAME_ERROR", tostring(modelCFrame) or "unknown error")
                        end
                    end
                end
            end)
        end
    end)
    
    table.insert(connections, workspaceConnection)
    
    -- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
    local periodicConnection = spawn(function()
        while scriptRunning do
            wait(30)
            if scriptRunning then
                logEvent("üîÑ PERIODIC_SCAN", "Periodic UUID pet scan...")
                findAndScanNearbyUUIDPets()
            end
        end
    end)
    
    table.insert(connections, periodicConnection)
    
    logEvent("‚úÖ AUTO_MONITOR_STARTED", "Automatic monitoring activated", {
        WorkspaceMonitoring = "ON",
        PeriodicScanning = "30 seconds",
        AutoScanRadius = "100 studs"
    })
end

-- (—É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ startSystem)

-- –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (–ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –°–ö–†–ò–ü–¢–ï)
local function startSystem()
    print("üöÄ –ó–∞–ø—É—Å–∫ Pet Structure Analyzer v4.0...")
    
    -- –°–æ–∑–¥–∞–µ–º GUI
    gui = createModernGUI()
    
    if not gui then
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GUI!")
        return
    end
    
    -- –ê–≤—Ç–æ—Å–∫–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if autoStartMonitoring then
        startAutoMonitoring()
    else
        logEvent("üõë AUTO_SCAN_DISABLED", "Auto-scan at startup is disabled")
    end
    
    logEvent("üéâ SYSTEM_READY", "Pet Structure Analyzer v4.0 is fully operational!", {
        GUI = "Modern interface loaded",
        AutoMonitoring = "Active",
        Database = "Ready for pet data",
        Status = "ONLINE"
    })
    
    print("‚úÖ Pet Structure Analyzer v4.0 READY!")
    print("üî¨ Modern GUI loaded with enhanced scanning capabilities")
    print("ü§ñ Automatic monitoring: ON")
    print("üìä Database system: READY")
    print("üéØ Scan radius: 100 studs")
    print("‚ö° Ready to analyze UUID pet structures!")
end

-- === –ê–í–¢–û–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ ===
print("üåü Pet Structure Analyzer v4.0 - MODERN EDITION")
print("üî¨ Advanced UUID Pet Structure Scanner")
print("üí´ Developed for deep pet analysis and recreation")
print("")

-- –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É (–ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –°–ö–†–ò–ü–¢–ï)
startSystem()

print("üìù –ß–∞—Å—Ç—å 5 –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
print("üéâ PET STRUCTURE ANALYZER v4.0 –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í!")
