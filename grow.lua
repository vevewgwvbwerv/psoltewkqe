-- VisualsOnlyWatcher.lua
-- –§–û–ö–£–° –ù–ê VISUALS: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ workspace.Visuals
-- –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –º—É—Å–æ—Ä (EggExplode –∏ –¥—Ä.), —Ñ–æ–∫—É—Å –¢–û–õ–¨–ö–û –Ω–∞ Visuals

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üëÄ === VISUALS ONLY WATCHER ===")
print("üéØ –¶–µ–ª—å: –û—Ç—Å–ª–µ–¥–∏—Ç—å –¢–û–õ–¨–ö–û –ø–∏—Ç–æ–º—Ü–∞ –≤ workspace.Visuals")
print("=" .. string.rep("=", 60))

-- üìä –î–ê–ù–ù–´–ï –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–Ø
local VisualsData = {
    visualsFolder = nil,
    petModel = nil,
    sources = {},
    startTime = nil,
    isWatching = false
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨
local VisualsConsole = nil
local ConsoleLines = {}
local MaxLines = 100

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createVisualsConsole()
    if VisualsConsole then VisualsConsole:Destroy() end
    
    VisualsConsole = Instance.new("ScreenGui")
    VisualsConsole.Name = "VisualsOnlyWatcherConsole"
    VisualsConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 750, 0, 550)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.1)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(1, 0.2, 1)
    frame.Parent = VisualsConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(1, 0.2, 1)
    title.BorderSizePixel = 0
    title.Text = "üëÄ VISUALS ONLY WATCHER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.05, 0.01, 0.05)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 15
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üëÄ –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å Visuals –≥–æ—Ç–æ–≤..."
    textLabel.TextColor3 = Color3.new(1, 0.9, 1)
    textLabel.TextSize = 11
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
local function visualsLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local relativeTime = VisualsData.startTime and string.format("+%.3f", tick() - VisualsData.startTime) or "0.000"
    
    local prefixes = {
        VISUALS = "üëÄ", PET = "üêï", SOURCE = "üì¶", ANALYSIS = "üìä",
        FOUND = "üéØ", CRITICAL = "üî•", SUCCESS = "‚úÖ", ERROR = "‚ùå", 
        INFO = "‚ÑπÔ∏è", MATCH = "üéØ"
    }
    
    local logLine = string.format("[%s] (%s) %s %s", timestamp, relativeTime, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n      %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if VisualsConsole then
        local textLabel = VisualsConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üîç –ü–û–ò–°–ö VISUALS –ü–ê–ü–ö–ò
local function findVisualsFolder()
    visualsLog("VISUALS", "üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ Visuals...")
    
    local visuals = Workspace:FindFirstChild("Visuals")
    if visuals then
        VisualsData.visualsFolder = visuals
        visualsLog("SUCCESS", "‚úÖ –ü–ê–ü–ö–ê VISUALS –ù–ê–ô–î–ï–ù–ê!", {
            Path = visuals:GetFullName(),
            Children = #visuals:GetChildren(),
            ClassName = visuals.ClassName
        })
        
        -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Visuals
        if #visuals:GetChildren() > 0 then
            visualsLog("INFO", "‚ÑπÔ∏è –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Visuals:")
            for _, child in pairs(visuals:GetChildren()) do
                visualsLog("INFO", string.format("  ‚Ä¢ %s (%s)", child.Name, child.ClassName))
            end
        else
            visualsLog("INFO", "‚ÑπÔ∏è –ü–∞–ø–∫–∞ Visuals –ø—É—Å—Ç–∞")
        end
        
        return visuals
    else
        visualsLog("ERROR", "‚ùå –ü–ê–ü–ö–ê VISUALS –ù–ï –ù–ê–ô–î–ï–ù–ê!")
        return nil
    end
end

-- üì¶ –ü–û–ò–°–ö –ò–°–¢–û–ß–ù–ò–ö–û–í –í REPLICATEDSTORAGE
local function findPetSources()
    visualsLog("SOURCE", "üì¶ –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ ReplicatedStorage...")
    
    local sources = {}
    local found = 0
    
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" or
               name == "goldenlab" or name:find("lab") then
                
                sources[obj.Name] = {
                    object = obj,
                    path = obj:GetFullName(),
                    children = #obj:GetChildren(),
                    descendants = #obj:GetDescendants()
                }
                
                found = found + 1
                visualsLog("FOUND", "üéØ –ò–°–¢–û–ß–ù–ò–ö –ù–ê–ô–î–ï–ù: " .. obj.Name, {
                    Path = obj:GetFullName(),
                    Children = #obj:GetChildren(),
                    Descendants = #obj:GetDescendants()
                })
            end
        end
    end
    
    VisualsData.sources = sources
    visualsLog("SOURCE", string.format("üì¶ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %d", found))
    return sources
end

-- üêï –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–õ–¨–ö–û VISUALS
local function monitorVisualsOnly()
    local visuals = VisualsData.visualsFolder
    if not visuals then
        visualsLog("ERROR", "‚ùå –ù–µ—Ç –ø–∞–ø–∫–∏ Visuals –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        return nil
    end
    
    visualsLog("VISUALS", "üëÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –¢–û–õ–¨–ö–û VISUALS...")
    
    local visualsConnection = visuals.ChildAdded:Connect(function(obj)
        local relativeTime = VisualsData.startTime and (tick() - VisualsData.startTime) or 0
        
        visualsLog("PET", "üêï –ù–û–í–´–ô –û–ë–™–ï–ö–¢ –í VISUALS: " .. obj.Name, {
            ClassName = obj.ClassName,
            RelativeTime = string.format("%.3f —Å–µ–∫", relativeTime)
        })
        
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" or
               name == "goldenlab" or name:find("lab") then
                
                VisualsData.petModel = obj
                
                visualsLog("CRITICAL", "üî• –ü–ò–¢–û–ú–ï–¶ –í VISUALS –û–ë–ù–ê–†–£–ñ–ï–ù: " .. obj.Name, {
                    ClassName = obj.ClassName,
                    RelativeTime = string.format("%.3f —Å–µ–∫", relativeTime),
                    Children = #obj:GetChildren(),
                    Descendants = #obj:GetDescendants()
                })
                
                -- –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–æ–º—Ü–∞
                analyzePetInVisuals(obj)
                
                -- –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                findMatchingSource(obj)
                
                -- –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–¥–∫–∏
                visualsConnection:Disconnect()
                visualsLog("VISUALS", "‚úÖ –ü–ò–¢–û–ú–ï–¶ –ù–ê–ô–î–ï–ù - –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
            end
        end
    end)
    
    return visualsConnection
end

-- üìä –ê–ù–ê–õ–ò–ó –ü–ò–¢–û–ú–¶–ê –í VISUALS
local function analyzePetInVisuals(pet)
    visualsLog("ANALYSIS", "üìä –ê–ù–ê–õ–ò–ó –ü–ò–¢–û–ú–¶–ê –í VISUALS: " .. pet.Name)
    
    -- –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    local info = {
        Name = pet.Name,
        ClassName = pet.ClassName,
        Parent = "Visuals",
        Children = #pet:GetChildren(),
        Descendants = #pet:GetDescendants(),
        PrimaryPart = pet.PrimaryPart and pet.PrimaryPart.Name or "NIL"
    }
    
    visualsLog("ANALYSIS", "üìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", info)
    
    -- –°—Ç—Ä—É–∫—Ç—É—Ä–∞
    local structure = {}
    for _, obj in pairs(pet:GetDescendants()) do
        structure[obj.ClassName] = (structure[obj.ClassName] or 0) + 1
    end
    
    visualsLog("ANALYSIS", "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞:", structure)
    
    -- –ü–æ–∑–∏—Ü–∏—è
    if pet.PrimaryPart then
        visualsLog("ANALYSIS", "üìä –ü–æ–∑–∏—Ü–∏—è –ø–∏—Ç–æ–º—Ü–∞:", {
            Position = tostring(pet.PrimaryPart.Position),
            Size = tostring(pet.PrimaryPart.Size)
        })
    end
end

-- üéØ –ü–û–ò–°–ö –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–©–ï–ì–û –ò–°–¢–û–ß–ù–ò–ö–ê
local function findMatchingSource(pet)
    visualsLog("MATCH", "üéØ –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è: " .. pet.Name)
    
    local bestMatch = nil
    local bestScore = 0
    
    for sourceName, sourceData in pairs(VisualsData.sources) do
        local score = 0
        local reasons = {}
        
        -- –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        if sourceName:lower() == pet.Name:lower() then
            score = score + 1000
            table.insert(reasons, "–¢–æ—á–Ω–æ–µ –∏–º—è")
        elseif sourceName:lower():find(pet.Name:lower()) or pet.Name:lower():find(sourceName:lower()) then
            score = score + 500
            table.insert(reasons, "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏–º—è")
        end
        
        -- –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
        if sourceData.children == #pet:GetChildren() then
            score = score + 200
            table.insert(reasons, "–¢–æ—á–Ω—ã–µ –¥–µ—Ç–∏")
        elseif math.abs(sourceData.children - #pet:GetChildren()) <= 2 then
            score = score + 100
            table.insert(reasons, "–ë–ª–∏–∑–∫–∏–µ –¥–µ—Ç–∏")
        end
        
        -- –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–º–∫–æ–≤
        if sourceData.descendants == #pet:GetDescendants() then
            score = score + 150
            table.insert(reasons, "–¢–æ—á–Ω—ã–µ –ø–æ—Ç–æ–º–∫–∏")
        elseif math.abs(sourceData.descendants - #pet:GetDescendants()) <= 5 then
            score = score + 50
            table.insert(reasons, "–ë–ª–∏–∑–∫–∏–µ –ø–æ—Ç–æ–º–∫–∏")
        end
        
        if score > bestScore then
            bestScore = score
            bestMatch = {
                source = sourceData,
                score = score,
                reasons = reasons
            }
        end
        
        if score > 0 then
            visualsLog("MATCH", string.format("üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç: %s (Score: %d)", sourceName, score), {
                Path = sourceData.path,
                Reasons = table.concat(reasons, ", "),
                Confidence = score > 1000 and "–û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø" or (score > 500 and "–í–´–°–û–ö–ê–Ø" or "–°–†–ï–î–ù–Ø–Ø")
            })
        end
    end
    
    if bestMatch then
        visualsLog("SUCCESS", "‚úÖ –õ–£–ß–®–ò–ô –ò–°–¢–û–ß–ù–ò–ö –ù–ê–ô–î–ï–ù!", {
            Source = bestMatch.source.object.Name,
            Path = bestMatch.source.path,
            Score = bestMatch.score,
            Confidence = bestMatch.score > 1000 and "–û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø" or (bestMatch.score > 500 and "–í–´–°–û–ö–ê–Ø" or "–°–†–ï–î–ù–Ø–Ø"),
            Reasons = table.concat(bestMatch.reasons, ", ")
        })
        
        visualsLog("CRITICAL", "üî• –í–´–í–û–î: –ü–∏—Ç–æ–º–µ—Ü –∫–ª–æ–Ω–∏—Ä—É–µ—Ç—Å—è –∏–∑ " .. bestMatch.source.path)
    else
        visualsLog("ERROR", "‚ùå –ù–ï –ù–ê–ô–î–ï–ù –ü–û–î–•–û–î–Ø–©–ò–ô –ò–°–¢–û–ß–ù–ò–ö")
    end
end

-- üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
local function startVisualsWatching()
    visualsLog("VISUALS", "üöÄ –ó–ê–ü–£–°–ö –ù–ê–ë–õ–Æ–î–ï–ù–ò–Ø –ó–ê VISUALS")
    visualsLog("VISUALS", "üëÄ –§–æ–∫—É—Å –¢–û–õ–¨–ö–û –Ω–∞ workspace.Visuals")
    
    VisualsData.isWatching = true
    VisualsData.startTime = tick()
    
    -- –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ Visuals
    local visuals = findVisualsFolder()
    if not visuals then
        visualsLog("ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É Visuals!")
        return
    end
    
    -- –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    local sources = findPetSources()
    
    -- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ Visuals
    local visualsConnection = monitorVisualsOnly()
    
    visualsLog("VISUALS", "‚úÖ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ Visuals –∞–∫—Ç–∏–≤–Ω–æ!")
    visualsLog("VISUALS", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –°–ï–ô–ß–ê–°!")
    
    -- –ê–≤—Ç–æ–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
    spawn(function()
        wait(120)
        if visualsConnection then
            visualsConnection:Disconnect()
        end
        VisualsData.isWatching = false
        visualsLog("VISUALS", "‚è∞ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
    end)
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createVisualsGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VisualsOnlyWatcherGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 120)
    frame.Position = UDim2.new(1, -320, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.1)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(1, 0.2, 1)
    title.BorderSizePixel = 0
    title.Text = "üëÄ VISUALS WATCHER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(1, 0.2, 1)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üëÄ –ù–ê–ë–õ–Æ–î–ê–¢–¨ VISUALS"
    startBtn.TextColor3 = Color3.new(1, 1, 1)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 30)
    status.Position = UDim2.new(0, 10, 0, 90)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏—é Visuals"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!"
        status.TextColor3 = Color3.new(1, 0.2, 1)
        startBtn.Text = "‚úÖ –ù–ê–ë–õ–Æ–î–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startVisualsWatching()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createVisualsConsole()
createVisualsGUI()

visualsLog("VISUALS", "‚úÖ VisualsOnlyWatcher –≥–æ—Ç–æ–≤!")
visualsLog("VISUALS", "üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –∑–∞ workspace.Visuals")
visualsLog("VISUALS", "üéØ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤–µ—Å—å –º—É—Å–æ—Ä (EggExplode –∏ –¥—Ä.)")
visualsLog("VISUALS", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ù–ê–ë–õ–Æ–î–ê–¢–¨ VISUALS' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ!")
