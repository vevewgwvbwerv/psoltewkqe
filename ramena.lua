-- UniversalSourceHunter.lua
-- –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–•–û–¢–ù–ò–ö –ó–ê –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò: –ò—â–µ—Ç –í–ï–ó–î–ï –∏ –ü–û –í–°–ï–ú –ö–†–ò–¢–ï–†–ò–Ø–ú
-- –ù–∞—Ö–æ–¥–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∏–≥—Ä—ã

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst = game:GetService("ReplicatedFirst")
local ServerStorage = game:GetService("ServerStorage")
local StarterGui = game:GetService("StarterGui")
local StarterPack = game:GetService("StarterPack")
local StarterPlayer = game:GetService("StarterPlayer")

local player = Players.LocalPlayer

print("üéØ === UNIVERSAL SOURCE HUNTER ===")
print("üîç –¶–µ–ª—å: –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –í–ï–ó–î–ï")
print("=" .. string.rep("=", 60))

-- üìä –î–ê–ù–ù–´–ï –û–•–û–¢–ù–ò–ö–ê
local HunterData = {
    tempModel = nil,
    allSources = {},
    bestMatches = {},
    searchLocations = {},
    isHunting = false
}

-- üñ•Ô∏è –ö–û–ù–°–û–õ–¨ –û–•–û–¢–ù–ò–ö–ê
local HunterConsole = nil
local ConsoleLines = {}
local MaxLines = 80

-- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏
local function createHunterConsole()
    if HunterConsole then HunterConsole:Destroy() end
    
    HunterConsole = Instance.new("ScreenGui")
    HunterConsole.Name = "UniversalSourceHunterConsole"
    HunterConsole.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 700, 0, 500)
    frame.Position = UDim2.new(0, 10, 0, 10)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.02)
    frame.BorderSizePixel = 3
    frame.BorderColor3 = Color3.new(1, 0.2, 0.2)
    frame.Parent = HunterConsole
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 35)
    title.BackgroundColor3 = Color3.new(1, 0.2, 0.2)
    title.BorderSizePixel = 0
    title.Text = "üéØ UNIVERSAL SOURCE HUNTER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, -10, 1, -45)
    scrollFrame.Position = UDim2.new(0, 5, 0, 40)
    scrollFrame.BackgroundColor3 = Color3.new(0.05, 0.01, 0.01)
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 10
    scrollFrame.Parent = frame
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, 0)
    textLabel.Position = UDim2.new(0, 5, 0, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ—Ö–æ—Ç–Ω–∏–∫ –≥–æ—Ç–æ–≤..."
    textLabel.TextColor3 = Color3.new(1, 0.9, 0.9)
    textLabel.TextSize = 11
    textLabel.Font = Enum.Font.SourceSans
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    textLabel.TextWrapped = true
    textLabel.Parent = scrollFrame
    
    return textLabel
end

-- –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ö–æ—Ç–Ω–∏–∫–∞
local function hunterLog(category, message, data)
    local timestamp = os.date("%H:%M:%S.") .. string.format("%03d", (tick() % 1) * 1000)
    local prefixes = {
        HUNTER = "üéØ", SEARCH = "üîç", FOUND = "üéØ", MATCH = "‚úÖ", 
        LOCATION = "üìç", ANALYSIS = "üìä", CRITICAL = "üî•", ERROR = "‚ùå"
    }
    
    local logLine = string.format("[%s] %s %s", timestamp, prefixes[category] or "‚ÑπÔ∏è", message)
    
    if data and next(data) then
        for key, value in pairs(data) do
            logLine = logLine .. string.format("\n    %s: %s", key, tostring(value))
        end
    end
    
    table.insert(ConsoleLines, logLine)
    
    if #ConsoleLines > MaxLines then
        table.remove(ConsoleLines, 1)
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å
    if HunterConsole then
        local textLabel = HunterConsole:FindFirstChild("Frame"):FindFirstChild("ScrollingFrame"):FindFirstChild("TextLabel")
        if textLabel then
            textLabel.Text = table.concat(ConsoleLines, "\n")
            local scrollFrame = textLabel.Parent
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, textLabel.TextBounds.Y + 10)
            scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
        end
    end
    
    print(logLine)
end

-- üîç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–û –í–°–ï–• –õ–û–ö–ê–¶–ò–Ø–•
local function searchAllLocations()
    hunterLog("HUNTER", "üîç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–û –í–°–ï–• –õ–û–ö–ê–¶–ò–Ø–•")
    
    local locations = {
        {name = "ReplicatedStorage", service = ReplicatedStorage},
        {name = "ReplicatedFirst", service = ReplicatedFirst},
        {name = "Workspace", service = Workspace},
        {name = "StarterGui", service = StarterGui},
        {name = "StarterPack", service = StarterPack},
        {name = "StarterPlayer", service = StarterPlayer}
    }
    
    -- –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ServerStorage (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
    local success, serverStorage = pcall(function() return game:GetService("ServerStorage") end)
    if success and serverStorage then
        table.insert(locations, {name = "ServerStorage", service = serverStorage})
    end
    
    local totalFound = 0
    
    for _, location in ipairs(locations) do
        hunterLog("LOCATION", "üìç –ü–æ–∏—Å–∫ –≤ " .. location.name .. "...")
        local foundInLocation = 0
        
        local success, result = pcall(function()
            for _, obj in pairs(location.service:GetDescendants()) do
                if obj:IsA("Model") or obj:IsA("Tool") then
                    local name = obj.Name:lower()
                    
                    -- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                    if name:find("dog") or name:find("bunny") or name:find("lab") or
                       name:find("cat") or name:find("rabbit") or name:find("puppy") or
                       name:find("pet") or name:find("animal") or name:find("golden") or
                       name == "dog" or name == "bunny" or name == "golden lab" then
                        
                        local sourceData = {
                            object = obj,
                            name = obj.Name,
                            path = obj:GetFullName(),
                            location = location.name,
                            children = #obj:GetChildren(),
                            descendants = #obj:GetDescendants(),
                            className = obj.ClassName
                        }
                        
                        HunterData.allSources[obj:GetFullName()] = sourceData
                        foundInLocation = foundInLocation + 1
                        totalFound = totalFound + 1
                        
                        hunterLog("FOUND", "üéØ –ò–°–¢–û–ß–ù–ò–ö –ù–ê–ô–î–ï–ù!", {
                            Name = obj.Name,
                            Location = location.name,
                            Path = obj:GetFullName(),
                            Children = #obj:GetChildren(),
                            ClassName = obj.ClassName
                        })
                    end
                end
            end
        end)
        
        if not success then
            hunterLog("ERROR", "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ " .. location.name .. ": " .. tostring(result))
        else
            hunterLog("LOCATION", string.format("üìç –í %s –Ω–∞–π–¥–µ–Ω–æ: %d –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", location.name, foundInLocation))
        end
    end
    
    hunterLog("HUNTER", string.format("üéØ –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: %d –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", totalFound))
    return totalFound
end

-- üìä –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –°–û–í–ü–ê–î–ï–ù–ò–ô
local function advancedMatchAnalysis(tempModel)
    hunterLog("ANALYSIS", "üìä –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –°–û–í–ü–ê–î–ï–ù–ò–ô –¥–ª—è: " .. tempModel.Name)
    
    local tempStructure = {
        name = tempModel.Name:lower(),
        children = #tempModel:GetChildren(),
        descendants = #tempModel:GetDescendants(),
        className = tempModel.ClassName
    }
    
    -- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    local tempDetails = {}
    for _, obj in pairs(tempModel:GetDescendants()) do
        tempDetails[obj.ClassName] = (tempDetails[obj.ClassName] or 0) + 1
    end
    
    hunterLog("ANALYSIS", "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:", tempDetails)
    
    local matches = {}
    
    for sourcePath, sourceData in pairs(HunterData.allSources) do
        local score = 0
        local reasons = {}
        
        -- 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if sourceData.name:lower() == tempStructure.name then
            score = score + 1000
            table.insert(reasons, "–¢–æ—á–Ω–æ–µ –∏–º—è")
        elseif sourceData.name:lower():find(tempStructure.name) then
            score = score + 500
            table.insert(reasons, "–ß–∞—Å—Ç–∏—á–Ω–æ–µ –∏–º—è")
        elseif tempStructure.name:find(sourceData.name:lower()) then
            score = score + 300
            table.insert(reasons, "–°–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è")
        end
        
        -- 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
        if sourceData.children == tempStructure.children then
            score = score + 200
            table.insert(reasons, "–¢–æ—á–Ω—ã–µ –¥–µ—Ç–∏")
        elseif math.abs(sourceData.children - tempStructure.children) <= 2 then
            score = score + 100
            table.insert(reasons, "–ë–ª–∏–∑–∫–∏–µ –¥–µ—Ç–∏")
        end
        
        -- 3. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–º–∫–æ–≤
        if sourceData.descendants == tempStructure.descendants then
            score = score + 150
            table.insert(reasons, "–¢–æ—á–Ω—ã–µ –ø–æ—Ç–æ–º–∫–∏")
        elseif math.abs(sourceData.descendants - tempStructure.descendants) <= 5 then
            score = score + 50
            table.insert(reasons, "–ë–ª–∏–∑–∫–∏–µ –ø–æ—Ç–æ–º–∫–∏")
        end
        
        -- 4. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–ª–∞—Å—Å–∞
        if sourceData.className == tempStructure.className then
            score = score + 50
            table.insert(reasons, "–¢–∏–ø –∫–ª–∞—Å—Å–∞")
        end
        
        -- 5. –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        local sourceDetails = {}
        local success, result = pcall(function()
            for _, obj in pairs(sourceData.object:GetDescendants()) do
                sourceDetails[obj.ClassName] = (sourceDetails[obj.ClassName] or 0) + 1
            end
        end)
        
        if success then
            local structureScore = 0
            for className, count in pairs(tempDetails) do
                if sourceDetails[className] and sourceDetails[className] == count then
                    structureScore = structureScore + 10
                elseif sourceDetails[className] and math.abs(sourceDetails[className] - count) <= 1 then
                    structureScore = structureScore + 5
                end
            end
            score = score + structureScore
            if structureScore > 50 then
                table.insert(reasons, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            end
        end
        
        if score > 0 then
            matches[sourcePath] = {
                source = sourceData,
                score = score,
                reasons = reasons,
                confidence = score > 1000 and "–û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø" or 
                           (score > 500 and "–í–´–°–û–ö–ê–Ø" or 
                           (score > 200 and "–°–†–ï–î–ù–Ø–Ø" or "–ù–ò–ó–ö–ê–Ø"))
            }
        end
    end
    
    -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
    local sortedMatches = {}
    for path, match in pairs(matches) do
        table.insert(sortedMatches, {path = path, match = match})
    end
    
    table.sort(sortedMatches, function(a, b) return a.match.score > b.match.score end)
    
    hunterLog("ANALYSIS", string.format("üìä –ù–∞–π–¥–µ–Ω–æ %d —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π", #sortedMatches))
    
    -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for i = 1, math.min(5, #sortedMatches) do
        local item = sortedMatches[i]
        hunterLog("MATCH", string.format("‚úÖ –°–û–í–ü–ê–î–ï–ù–ò–ï #%d: %s", i, item.match.source.name), {
            Path = item.path,
            Location = item.match.source.location,
            Score = item.match.score,
            Confidence = item.match.confidence,
            Reasons = table.concat(item.match.reasons, ", ")
        })
    end
    
    HunterData.bestMatches = sortedMatches
    return sortedMatches
end

-- üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–•–û–¢–´
local function startUniversalHunt()
    hunterLog("HUNTER", "üéØ –ó–ê–ü–£–°–ö –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –û–•–û–¢–´")
    hunterLog("HUNTER", "üîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –í–ï–ó–î–ï")
    
    HunterData.isHunting = true
    
    -- –§–∞–∑–∞ 1: –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏—è—Ö
    local totalSources = searchAllLocations()
    
    if totalSources == 0 then
        hunterLog("ERROR", "‚ùå –ù–ò –û–î–ù–û–ì–û –ò–°–¢–û–ß–ù–ò–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–û!")
        return
    end
    
    -- –§–∞–∑–∞ 2: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    hunterLog("HUNTER", "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    local modelConnection = Workspace.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") then
            local name = obj.Name:lower()
            if name == "dog" or name == "bunny" or name == "golden lab" or 
               name == "cat" or name == "rabbit" or name == "puppy" then
                
                hunterLog("FOUND", "üéØ –í–†–ï–ú–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨ –ó–ê–•–í–ê–ß–ï–ù–ê: " .. obj.Name)
                HunterData.tempModel = obj
                
                -- –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                local matches = advancedMatchAnalysis(obj)
                
                if #matches > 0 then
                    local best = matches[1]
                    hunterLog("CRITICAL", "üî• –õ–£–ß–®–ò–ô –ò–°–¢–û–ß–ù–ò–ö –ù–ê–ô–î–ï–ù!", {
                        Source = best.match.source.name,
                        Path = best.path,
                        Location = best.match.source.location,
                        Score = best.match.score,
                        Confidence = best.match.confidence
                    })
                else
                    hunterLog("ERROR", "‚ùå –ù–ò –û–î–ù–û–ì–û –ü–û–î–•–û–î–Ø–©–ï–ì–û –ò–°–¢–û–ß–ù–ò–ö–ê –ù–ï –ù–ê–ô–î–ï–ù–û")
                end
                
                -- –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ö–æ—Ç—É
                modelConnection:Disconnect()
                HunterData.isHunting = false
                hunterLog("HUNTER", "üéØ –û–•–û–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
            end
        end
    end)
    
    hunterLog("HUNTER", "‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ö–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!")
    hunterLog("HUNTER", "ü•ö –û–¢–ö–†–û–ô–¢–ï –Ø–ô–¶–û –î–õ–Ø –ó–ê–•–í–ê–¢–ê!")
end

-- –°–æ–∑–¥–∞–µ–º GUI
local function createHunterGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UniversalSourceHunterGUI"
    screenGui.Parent = player:WaitForChild("PlayerGui")
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 120)
    frame.Position = UDim2.new(1, -320, 0, 270)
    frame.BackgroundColor3 = Color3.new(0.1, 0.02, 0.02)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, 0, 0, 30)
    title.BackgroundColor3 = Color3.new(1, 0.2, 0.2)
    title.BorderSizePixel = 0
    title.Text = "üéØ SOURCE HUNTER"
    title.TextColor3 = Color3.new(1, 1, 1)
    title.TextScaled = true
    title.Font = Enum.Font.SourceSansBold
    title.Parent = frame
    
    local startBtn = Instance.new("TextButton")
    startBtn.Size = UDim2.new(1, -20, 0, 40)
    startBtn.Position = UDim2.new(0, 10, 0, 40)
    startBtn.BackgroundColor3 = Color3.new(1, 0.2, 0.2)
    startBtn.BorderSizePixel = 0
    startBtn.Text = "üéØ –ù–ê–ß–ê–¢–¨ –û–•–û–¢–£"
    startBtn.TextColor3 = Color3.new(1, 1, 1)
    startBtn.TextScaled = true
    startBtn.Font = Enum.Font.SourceSansBold
    startBtn.Parent = frame
    
    local status = Instance.new("TextLabel")
    status.Size = UDim2.new(1, -20, 0, 30)
    status.Position = UDim2.new(0, 10, 0, 90)
    status.BackgroundTransparency = 1
    status.Text = "–ì–æ—Ç–æ–≤ –∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ—Ö–æ—Ç–µ"
    status.TextColor3 = Color3.new(1, 1, 1)
    status.TextScaled = true
    status.Font = Enum.Font.SourceSans
    status.Parent = frame
    
    startBtn.MouseButton1Click:Connect(function()
        status.Text = "üéØ –û—Ö–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!"
        status.TextColor3 = Color3.new(1, 0.2, 0.2)
        startBtn.Text = "‚úÖ –û–•–û–¢–ê –ê–ö–¢–ò–í–ù–ê"
        startBtn.BackgroundColor3 = Color3.new(0.5, 0.5, 0.5)
        startBtn.Active = false
        
        startUniversalHunt()
    end)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º
local consoleTextLabel = createHunterConsole()
createHunterGUI()

hunterLog("HUNTER", "‚úÖ UniversalSourceHunter –≥–æ—Ç–æ–≤!")
hunterLog("HUNTER", "üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ö–æ—Ç–∞ –∑–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
hunterLog("HUNTER", "üîç –ü–æ–∏—Å–∫ –í–ï–ó–î–ï: ReplicatedStorage, Workspace, StarterGui –∏ –¥—Ä.")
hunterLog("HUNTER", "üöÄ –ù–∞–∂–º–∏—Ç–µ '–ù–ê–ß–ê–¢–¨ –û–•–û–¢–£' –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —è–π—Ü–æ!")
