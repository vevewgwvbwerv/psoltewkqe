-- InventoryPetAnalyzer.lua
-- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –≤ —Ä—É–∫–µ

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- –°–æ–∑–¥–∞–µ–º GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "InventoryPetAnalyzer"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 600, 0, 500)
mainFrame.Position = UDim2.new(0.5, -300, 0.5, -250)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- –ó–∞–≥–æ–ª–æ–≤–æ–∫
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 0, 40)
titleLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
titleLabel.BorderSizePixel = 0
titleLabel.Text = "üéí –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è –ü–∏—Ç–æ–º—Ü–µ–≤"
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.TextScaled = true
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.Parent = mainFrame

-- –°–∫—Ä–æ–ª–ª —Ñ—Ä–µ–π–º –¥–ª—è –ª–æ–≥–æ–≤
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, -20, 1, -120)
scrollFrame.Position = UDim2.new(0, 10, 0, 50)
scrollFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 8
scrollFrame.Parent = mainFrame

-- –¢–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–æ–≤
local logText = Instance.new("TextLabel")
logText.Size = UDim2.new(1, -10, 1, 0)
logText.Position = UDim2.new(0, 5, 0, 0)
logText.BackgroundTransparency = 1
logText.Text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞..."
logText.TextColor3 = Color3.fromRGB(255, 255, 255)
logText.TextXAlignment = Enum.TextXAlignment.Left
logText.TextYAlignment = Enum.TextYAlignment.Top
logText.TextWrapped = true
logText.Font = Enum.Font.SourceSans
logText.TextSize = 14
logText.Parent = scrollFrame

-- –ö–Ω–æ–ø–∫–∏
local buttonFrame = Instance.new("Frame")
buttonFrame.Size = UDim2.new(1, 0, 0, 60)
buttonFrame.Position = UDim2.new(0, 0, 1, -60)
buttonFrame.BackgroundTransparency = 1
buttonFrame.Parent = mainFrame

-- –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
local analyzeButton = Instance.new("TextButton")
analyzeButton.Size = UDim2.new(0.3, -5, 0.8, 0)
analyzeButton.Position = UDim2.new(0, 5, 0.1, 0)
analyzeButton.BackgroundColor3 = Color3.fromRGB(0, 120, 200)
analyzeButton.BorderSizePixel = 0
analyzeButton.Text = "üìã –ê–Ω–∞–ª–∏–∑ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è"
analyzeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
analyzeButton.TextScaled = true
analyzeButton.Font = Enum.Font.SourceSansBold
analyzeButton.Parent = buttonFrame

-- –ö–Ω–æ–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ handle
local monitorButton = Instance.new("TextButton")
monitorButton.Size = UDim2.new(0.3, -5, 0.8, 0)
monitorButton.Position = UDim2.new(0.33, 5, 0.1, 0)
monitorButton.BackgroundColor3 = Color3.fromRGB(200, 120, 0)
monitorButton.BorderSizePixel = 0
monitorButton.Text = "üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Handle"
monitorButton.TextColor3 = Color3.fromRGB(255, 255, 255)
monitorButton.TextScaled = true
monitorButton.Font = Enum.Font.SourceSansBold
monitorButton.Parent = buttonFrame

-- –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
local clearButton = Instance.new("TextButton")
clearButton.Size = UDim2.new(0.3, -5, 0.8, 0)
clearButton.Position = UDim2.new(0.66, 5, 0.1, 0)
clearButton.BackgroundColor3 = Color3.fromRGB(120, 120, 120)
clearButton.BorderSizePixel = 0
clearButton.Text = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å"
clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
clearButton.TextScaled = true
monitorButton.Font = Enum.Font.SourceSansBold
clearButton.Parent = buttonFrame

-- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
local logs = {}
local isMonitoring = false
local monitorConnection = nil

-- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞
local function addLog(message)
    table.insert(logs, os.date("[%H:%M:%S] ") .. message)
    if #logs > 100 then
        table.remove(logs, 1)
    end
    
    logText.Text = table.concat(logs, "\n")
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, logText.TextBounds.Y + 20)
    scrollFrame.CanvasPosition = Vector2.new(0, scrollFrame.CanvasSize.Y.Offset)
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
local function findAllPetsInInventory()
    addLog("üîç === –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ï–í –í –ò–ù–í–ï–ù–¢–ê–†–ï ===")
    
    local foundPets = {}
    local searchLocations = {
        {name = "Player", obj = player},
        {name = "Character", obj = player.Character},
        {name = "Backpack", obj = player:FindFirstChild("Backpack")},
        {name = "PlayerGui", obj = player:FindFirstChild("PlayerGui")},
        {name = "ReplicatedStorage", obj = game.ReplicatedStorage},
        {name = "Workspace", obj = game.Workspace}
    }
    
    for _, location in pairs(searchLocations) do
        if location.obj then
            addLog("üìÅ –°–∫–∞–Ω–∏—Ä—É—é " .. location.name .. "...")
            
            for _, item in pairs(location.obj:GetDescendants()) do
                if item:IsA("Model") then
                    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –ø–∏—Ç–æ–º—Ü–∞
                    local meshCount = 0
                    for _, part in pairs(item:GetDescendants()) do
                        if part:IsA("MeshPart") or part:IsA("SpecialMesh") then
                            meshCount = meshCount + 1
                        end
                    end
                    
                    -- –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—à–∏, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø–∏—Ç–æ–º–µ—Ü
                    if meshCount > 0 then
                        local petInfo = {
                            name = item.Name,
                            location = location.name,
                            path = item:GetFullName(),
                            meshCount = meshCount,
                            parent = item.Parent and item.Parent.Name or "nil"
                        }
                        table.insert(foundPets, petInfo)
                        
                        addLog("üêæ –ü–ò–¢–û–ú–ï–¶: " .. item.Name .. " –≤ " .. location.name .. " (–ú–µ—à–µ–π: " .. meshCount .. ")")
                    end
                end
            end
        end
    end
    
    addLog("üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–µ–≤: " .. #foundPets)
    
    -- –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∞–º
    local petGroups = {}
    for _, pet in pairs(foundPets) do
        if not petGroups[pet.name] then
            petGroups[pet.name] = {}
        end
        table.insert(petGroups[pet.name], pet)
    end
    
    addLog("üìã === –°–í–û–î–ö–ê –ü–û –ü–ò–¢–û–ú–¶–ê–ú ===")
    for petName, pets in pairs(petGroups) do
        addLog("üè∑Ô∏è " .. petName .. " (" .. #pets .. " —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤):")
        for _, pet in pairs(pets) do
            addLog("   üìç " .. pet.location .. " - " .. pet.parent .. " (–ú–µ—à–µ–π: " .. pet.meshCount .. ")")
        end
    end
    
    return foundPets
end

-- –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ handle
local function startHandleMonitoring()
    if isMonitoring then
        addLog("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    end
    
    isMonitoring = true
    monitorButton.Text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    monitorButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
    
    addLog("üëÅÔ∏è === –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê HANDLE ===")
    
    local lastHandleContents = {}
    
    monitorConnection = RunService.Heartbeat:Connect(function()
        local playerChar = player.Character
        if not playerChar then return end
        
        local handle = playerChar:FindFirstChild("Handle")
        if not handle then return end
        
        local currentContents = {}
        for _, child in pairs(handle:GetChildren()) do
            if child:IsA("Model") then
                table.insert(currentContents, {
                    name = child.Name,
                    className = child.ClassName,
                    fullName = child:GetFullName()
                })
            end
        end
        
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if #currentContents ~= #lastHandleContents then
            addLog("üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –í HANDLE:")
            addLog("   –ë—ã–ª–æ: " .. #lastHandleContents .. " –ø–∏—Ç–æ–º—Ü–µ–≤")
            addLog("   –°—Ç–∞–ª–æ: " .. #currentContents .. " –ø–∏—Ç–æ–º—Ü–µ–≤")
            
            for _, content in pairs(currentContents) do
                addLog("   ‚ûï " .. content.name .. " (" .. content.className .. ")")
            end
            
            lastHandleContents = currentContents
        end
    end)
    
    addLog("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ handle –∑–∞–ø—É—â–µ–Ω!")
end

-- –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
local function stopHandleMonitoring()
    if not isMonitoring then return end
    
    isMonitoring = false
    monitorButton.Text = "üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Handle"
    monitorButton.BackgroundColor3 = Color3.fromRGB(200, 120, 0)
    
    if monitorConnection then
        monitorConnection:Disconnect()
        monitorConnection = nil
    end
    
    addLog("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ handle –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
end

-- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
analyzeButton.MouseButton1Click:Connect(function()
    findAllPetsInInventory()
end)

monitorButton.MouseButton1Click:Connect(function()
    if isMonitoring then
        stopHandleMonitoring()
    else
        startHandleMonitoring()
    end
end)

clearButton.MouseButton1Click:Connect(function()
    logs = {}
    logText.Text = "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã..."
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
end)

-- –ù–∞—á–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
addLog("üöÄ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–∏—Ç–æ–º—Ü–µ–≤ –∑–∞–ø—É—â–µ–Ω!")
addLog("üìã –ù–∞–∂–º–∏—Ç–µ '–ê–Ω–∞–ª–∏–∑ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—è' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤")
addLog("üëÅÔ∏è –ù–∞–∂–º–∏—Ç–µ '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Handle' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä—É–∫–µ")

print("‚úÖ InventoryPetAnalyzer –∑–∞–≥—Ä—É–∂–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ GUI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
