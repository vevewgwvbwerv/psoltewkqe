-- üî• PET SCALER - –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° IDLE –ê–ù–ò–ú–ê–¶–ò–ï–ô
-- –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–ø–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π + –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ idle –ø–æ–∑–µ

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer

print("üî• === PET SCALER - –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø ===")

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local CONFIG = {
    SEARCH_RADIUS = 100,
    SCALE_FACTOR = 3.0,
    TWEEN_TIME = 3.0,
    EASING_STYLE = Enum.EasingStyle.Quad,
    EASING_DIRECTION = Enum.EasingDirection.Out
}

-- –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
local playerChar = player.Character
if not playerChar then
    print("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local hrp = playerChar:FindFirstChild("HumanoidRootPart")
if not hrp then
    print("‚ùå HumanoidRootPart –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    return
end

local playerPos = hrp.Position
print("üìç –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞:", playerPos)
print("üéØ –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞:", CONFIG.SEARCH_RADIUS)
print("üìè –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è:", CONFIG.SCALE_FACTOR .. "x")

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö BasePart –∏–∑ –º–æ–¥–µ–ª–∏
local function getAllParts(model)
    local parts = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    return parts
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
local function deepCopyModel(originalModel)
    print("üìã –°–æ–∑–¥–∞—é –∫–æ–ø–∏—é –º–æ–¥–µ–ª–∏:", originalModel.Name)
    
    local copy = originalModel:Clone()
    copy.Name = originalModel.Name .. "_SCALED_COPY"
    copy.Parent = Workspace
    
    -- –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–∏
    if copy.PrimaryPart and originalModel.PrimaryPart then
        local originalCFrame = originalModel.PrimaryPart.CFrame
        local offset = Vector3.new(15, 0, 0)
        local newPosition = originalCFrame.Position + offset
        local newCFrame = CFrame.lookAt(newPosition, newPosition + originalCFrame.LookVector, Vector3.new(0, 1, 0))
        copy:SetPrimaryPartCFrame(newCFrame)
    end
    
    print("‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:", copy.Name)
    return copy
end

-- –§—É–Ω–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
local function scaleModelSmoothly(model, scaleFactor, tweenTime)
    print("üî• –ù–∞—á–∏–Ω–∞—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", model.Name)
    
    local parts = getAllParts(model)
    print("üß© –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π:", #parts)
    
    if #parts == 0 then
        print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return false
    end
    
    -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    local centerCFrame
    if model.PrimaryPart then
        centerCFrame = model.PrimaryPart.CFrame
    else
        local success, modelCFrame = pcall(function() return model:GetModelCFrame() end)
        if success then
            centerCFrame = modelCFrame
        else
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return false
        end
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    local originalData = {}
    for _, part in ipairs(parts) do
        originalData[part] = {
            size = part.Size,
            cframe = part.CFrame
        }
    end
    
    -- –°–æ–∑–¥–∞–µ–º TweenInfo
    local tweenInfo = TweenInfo.new(
        tweenTime,
        CONFIG.EASING_STYLE,
        CONFIG.EASING_DIRECTION,
        0,
        false,
        0
    )
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    local tweens = {}
    local completedTweens = 0
    
    for _, part in ipairs(parts) do
        local originalSize = originalData[part].size
        local originalCFrame = originalData[part].cframe
        
        local newSize = originalSize * scaleFactor
        local relativeCFrame = centerCFrame:Inverse() * originalCFrame
        local scaledRelativeCFrame = CFrame.new(relativeCFrame.Position * scaleFactor) * (relativeCFrame - relativeCFrame.Position)
        local newCFrame = centerCFrame * scaledRelativeCFrame
        
        local tween = TweenService:Create(part, tweenInfo, {
            Size = newSize,
            CFrame = newCFrame
        })
        
        tween.Completed:Connect(function()
            completedTweens = completedTweens + 1
            if completedTweens == #parts then
                print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            end
        end)
        
        table.insert(tweens, tween)
        tween:Play()
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Motor6D
local function getMotor6Ds(model)
    local motors = {}
    for _, obj in pairs(model:GetDescendants()) do
        if obj:IsA("Motor6D") then
            local key = obj.Name
            if obj.Part0 then
                key = key .. "_" .. obj.Part0.Name
            end
            if obj.Part1 then
                key = key .. "_" .. obj.Part1.Name
            end
            motors[key] = obj
        end
    end
    return motors
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Motor6D
local function copyMotorState(originalMotor, copyMotor, scaleFactor)
    if not originalMotor or not copyMotor then
        return false
    end
    
    local originalTransform = originalMotor.Transform
    local scaledTransform = CFrame.new(originalTransform.Position * scaleFactor) * (originalTransform - originalTransform.Position)
    copyMotor.Transform = scaledTransform
    
    local originalC0 = originalMotor.C0
    local scaledC0 = CFrame.new(originalC0.Position * scaleFactor) * (originalC0 - originalC0.Position)
    copyMotor.C0 = scaledC0
    
    local originalC1 = originalMotor.C1
    local scaledC1 = CFrame.new(originalC1.Position * scaleFactor) * (originalC1 - originalC1.Position)
    copyMotor.C1 = scaledC1
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Anchored
local function smartAnchoredManagement(copyParts)
    print("üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Anchored...")
    
    local rootPart = nil
    for _, part in ipairs(copyParts) do
        if part.Name == "RootPart" or part.Name == "Torso" or part.Name == "HumanoidRootPart" then
            rootPart = part
            break
        end
    end
    
    if not rootPart and #copyParts > 0 then
        rootPart = copyParts[1]
    end
    
    for _, part in ipairs(copyParts) do
        if part == rootPart then
            part.Anchored = true
        else
            part.Anchored = false
        end
    end
    
    print("‚úÖ Anchored –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return rootPart
end

-- –§—É–Ω–∫—Ü–∏—è –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D
local function startLiveMotorCopying(original, copy)
    print("üîÑ –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Motor6D...")
    
    local originalMotors = getMotor6Ds(original)
    local copyMotors = getMotor6Ds(copy)
    
    if next(originalMotors) == nil or next(copyMotors) == nil then
        print("‚ùå Motor6D –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return nil
    end
    
    print("‚úÖ –ù–∞–π–¥–µ–Ω–æ Motor6D - –æ—Ä–∏–≥–∏–Ω–∞–ª:", #originalMotors, "–∫–æ–ø–∏—è:", #copyMotors)
    
    local connection = RunService.Heartbeat:Connect(function()
        for key, originalMotor in pairs(originalMotors) do
            local copyMotor = copyMotors[key]
            if copyMotor and originalMotor.Parent then
                copyMotorState(originalMotor, copyMotor, CONFIG.SCALE_FACTOR)
            end
        end
    end)
    
    return connection
end

-- –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
local function controlOriginalPet(petModel)
    print("üéØ === –ö–û–ù–¢–†–û–õ–¨ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ò–¢–û–ú–¶–ê ===")
    
    local originalRoot = petModel:FindFirstChild("RootPart") or 
                        petModel:FindFirstChild("Torso") or 
                        petModel:FindFirstChild("HumanoidRootPart")
    
    local originalHumanoid = petModel:FindFirstChildOfClass("Humanoid")
    
    if originalRoot then
        print("üêï –ù–∞—à–µ–ª –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞:", petModel.Name)
        
        -- –ó–∞—è–∫–æ—Ä–∏–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å
        originalRoot.Anchored = true
        print("‚öì –ö–æ—Ä–µ–Ω—å –∑–∞—è–∫–æ—Ä–µ–Ω")
        
        -- –û—Ç–∫–ª—é—á–∞–µ–º AI
        if originalHumanoid then
            originalHumanoid.WalkSpeed = 0
            originalHumanoid.JumpPower = 0
            print("ü§ñ AI –æ—Ç–∫–ª—é—á–µ–Ω")
        end
        
        -- –ò—â–µ–º –∏ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º idle –∞–Ω–∏–º–∞—Ü–∏—é
        local originalAnimator = petModel:FindFirstChildOfClass("Animator")
        if originalAnimator then
            print("üé≠ –ù–∞—à–µ–ª Animator - –∏—â—É idle –∞–Ω–∏–º–∞—Ü–∏—é")
            
            local allTracks = originalAnimator:GetPlayingAnimationTracks()
            local idleTrack = nil
            
            for _, track in pairs(allTracks) do
                local trackName = track.Name:lower()
                print("üîç –ê–Ω–∏–º–∞—Ü–∏—è:", track.Name)
                
                if trackName:find("idle") or trackName:find("stand") or trackName:find("breath") then
                    idleTrack = track
                    print("‚ú® –ù–∞—à–µ–ª IDLE –∞–Ω–∏–º–∞—Ü–∏—é:", track.Name)
                elseif trackName:find("walk") or trackName:find("run") or trackName:find("move") then
                    print("üö´ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ö–æ–¥—å–±—É:", track.Name)
                    track:Stop()
                end
            end
            
            if idleTrack then
                idleTrack.Looped = true
                idleTrack:Play()
                print("üîÑ –ó–ê–¶–ò–ö–õ–ò–õ idle –∞–Ω–∏–º–∞—Ü–∏—é:", idleTrack.Name)
                print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å—Å—è idle!")
            else
                print("‚ö†Ô∏è IDLE –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            end
        else
            print("‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω")
        end
        
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ idle!")
    else
        print("‚ùå –ù–µ –Ω–∞—à–µ–ª –∫–æ—Ä–µ–Ω—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞")
    end
end

-- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
local function main()
    print("\nüîç === –ü–û–ò–°–ö –ü–ò–¢–û–ú–¶–ê ===")
    
    local petModel = nil
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") and obj ~= playerChar then
            local humanoid = obj:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local rootPart = obj:FindFirstChild("RootPart") or obj:FindFirstChild("Torso") or obj:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local distance = (rootPart.Position - playerPos).Magnitude
                    if distance <= CONFIG.SEARCH_RADIUS then
                        petModel = obj
                        print("üêæ –ù–∞–π–¥–µ–Ω –ø–∏—Ç–æ–º–µ—Ü:", obj.Name, "–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏:", math.floor(distance))
                        break
                    end
                end
            end
        end
    end
    
    if not petModel then
        print("‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–¥–∏—É—Å–µ", CONFIG.SEARCH_RADIUS)
        return
    end
    
    -- –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
    print("\nüìã === –°–û–ó–î–ê–ù–ò–ï –ö–û–ü–ò–ò ===")
    local petCopy = deepCopyModel(petModel)
    
    -- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
    print("\nüìè === –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï ===")
    for _, part in pairs(petCopy:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = true
        end
    end
    
    wait(0.5)
    local scaleSuccess = scaleModelSmoothly(petCopy, CONFIG.SCALE_FACTOR, CONFIG.TWEEN_TIME)
    
    if not scaleSuccess then
        print("‚ùå –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        return
    end
    
    -- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Anchored –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    print("\nüß† === –ù–ê–°–¢–†–û–ô–ö–ê ANCHORED ===")
    wait(CONFIG.TWEEN_TIME + 1)
    
    local copyParts = getAllParts(petCopy)
    local rootPart = smartAnchoredManagement(copyParts)
    
    -- –ó–∞–ø—É—Å–∫–∞–µ–º –∂–∏–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüé≠ === –ó–ê–ü–£–°–ö –ê–ù–ò–ú–ê–¶–ò–ò ===")
    local connection = startLiveMotorCopying(petModel, petCopy)
    
    -- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    controlOriginalPet(petModel)
    
    if connection then
        print("\nüéâ === –ü–û–õ–ù–´–ô –£–°–ü–ï–•! ===")
        print("‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
        print("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∏—Ç–æ–º–µ—Ü –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –ö–æ–ø–∏—è –¥–æ–ª–∂–Ω–∞ —Å—Ç–æ—è—Ç—å —Å idle –∞–Ω–∏–º–∞—Ü–∏–µ–π!")
    else
        print("‚ö†Ô∏è –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å")
    end
end

-- –°–æ–∑–¥–∞–Ω–∏–µ GUI
local function createGUI()
    local playerGui = player:WaitForChild("PlayerGui")
    
    local oldGui = playerGui:FindFirstChild("PetScalerSimpleGUI")
    if oldGui then
        oldGui:Destroy()
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PetScalerSimpleGUI"
    screenGui.Parent = playerGui
    
    local frame = Instance.new("Frame")
    frame.Name = "MainFrame"
    frame.Size = UDim2.new(0, 250, 0, 80)
    frame.Position = UDim2.new(0, 50, 0, 250)
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    frame.BorderSizePixel = 2
    frame.BorderColor3 = Color3.fromRGB(255, 0, 255) -- –§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ä–∞–º–∫–∞
    frame.Parent = screenGui
    
    local button = Instance.new("TextButton")
    button.Name = "ScaleButton"
    button.Size = UDim2.new(0, 230, 0, 40)
    button.Position = UDim2.new(0, 10, 0, 20)
    button.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
    button.BorderSizePixel = 0
    button.Text = "üî• PetScaler –ü–†–û–°–¢–û–ô + IDLE"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.SourceSansBold
    button.Parent = frame
    
    button.MouseButton1Click:Connect(function()
        button.Text = "‚è≥ –°–æ–∑–¥–∞—é —Å idle –∞–Ω–∏–º–∞—Ü–∏–µ–π..."
        button.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
        
        spawn(function()
            main()
            
            wait(3)
            button.Text = "üî• PetScaler –ü–†–û–°–¢–û–ô + IDLE"
            button.BackgroundColor3 = Color3.fromRGB(255, 0, 255)
        end)
    end)
    
    print("üñ•Ô∏è PetScaler –ü–†–û–°–¢–û–ô GUI —Å–æ–∑–¥–∞–Ω!")
end

-- –ó–∞–ø—É—Å–∫
createGUI()
print("üí° –ù–∞–∂–º–∏—Ç–µ –§–ò–û–õ–ï–¢–û–í–£–Æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏!")
